<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="http://www.nkode.io/feed.xml" rel="self" type="application/atom+xml" /><link href="http://www.nkode.io/" rel="alternate" type="text/html" /><updated>2018-10-02T08:18:54+02:00</updated><id>http://www.nkode.io/</id><title type="html">nkode.io</title><subtitle>A blog about programming, data, cloud computing, and web scale systems</subtitle><entry><title type="html">Introduction to Programming (Winter 2018)</title><link href="http://www.nkode.io/lecture/2018/09/17/lecture-introduction-to-programming.html" rel="alternate" type="text/html" title="Introduction to Programming (Winter 2018)" /><published>2018-09-17T00:00:00+02:00</published><updated>2018-09-17T00:00:00+02:00</updated><id>http://www.nkode.io/lecture/2018/09/17/lecture-introduction-to-programming</id><content type="html" xml:base="http://www.nkode.io/lecture/2018/09/17/lecture-introduction-to-programming.html">&lt;p&gt;This course is about fundamentals of programming for first-year students and covers fundamental concepts of programming.
JAVA is used as a teaching language. Nevertheless, the principles apply to every (imperative or class-based object-oriented) programming language.&lt;/p&gt;

&lt;p&gt;This course is given for &lt;em&gt;Information Technology and Design&lt;/em&gt; students at the Lübeck University of Applied Sciences
and will cover following aspects:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Fundamental concepts&lt;/strong&gt; of programming including &lt;strong&gt;programming paradigms&lt;/strong&gt; and &lt;strong&gt;runtime models&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Variables&lt;/strong&gt;, &lt;strong&gt;data types&lt;/strong&gt;, &lt;strong&gt;operators&lt;/strong&gt; and &lt;strong&gt;expressions&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Control flow&lt;/strong&gt; and &lt;strong&gt;routines&lt;/strong&gt; (functions, procedures, methods)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Reference data types&lt;/strong&gt; and &lt;strong&gt;collections&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;(Stream based) &lt;strong&gt;I/O programming&lt;/strong&gt; and &lt;strong&gt;serialization&lt;/strong&gt; of objects&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Recursive programming&lt;/strong&gt; and &lt;strong&gt;datastructures&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;course-material-german-only&quot;&gt;Course Material (german only)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Lecture Unit 1: &lt;a href=&quot;/assets/ws2018/progI/Unit_01.pdf&quot;&gt;Core concepts of programming&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Lecture Unit 2: &lt;a href=&quot;/assets/ws2018/progI/Unit_02.pdf&quot;&gt;Fundamentals of imperative programming&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Lecture Unit 3: &lt;a href=&quot;/assets/ws2018/progI/Unit_03.pdf&quot;&gt;Reference data types and collections&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Lecture Unit 4: &lt;a href=&quot;/assets/ws2018/progI/Unit_04.pdf&quot;&gt;I/O programming, serialization&lt;/a&gt; (skipped, just for self study)&lt;/li&gt;
  &lt;li&gt;Lecture Unit 5: &lt;a href=&quot;/assets/ws2018/progI/Unit_05.pdf&quot;&gt;Recursive programming&lt;/a&gt; (functional programming skipped, just for self study)&lt;/li&gt;
  &lt;li&gt;Examples: &lt;a href=&quot;/assets/ws2018/progI/examples.pdf&quot;&gt;Catalogue of lecture examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Exercises: &lt;a href=&quot;/assets/ws2018/progI/excercises.pdf&quot;&gt;Catalogue of excercises&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Nane Kratzke</name></author><category term="lecture" /><category term="java" /><category term="programming" /><summary type="html"></summary></entry><entry><title type="html">Programming I (Winter 2018)</title><link href="http://www.nkode.io/lecture/2018/09/17/lecture-programming-i.html" rel="alternate" type="text/html" title="Programming I (Winter 2018)" /><published>2018-09-17T00:00:00+02:00</published><updated>2018-09-17T00:00:00+02:00</updated><id>http://www.nkode.io/lecture/2018/09/17/lecture-programming-i</id><content type="html" xml:base="http://www.nkode.io/lecture/2018/09/17/lecture-programming-i.html">&lt;p&gt;The course &lt;strong&gt;Programming I&lt;/strong&gt; is about fundamentals of programming for first-year students and covers fundamental concepts of programming.
JAVA is used as a teaching language. Nevertheless, the principles apply to every (imperative or class-based object-oriented) programming language.
The course is given for &lt;em&gt;Computer Science&lt;/em&gt; students at the Lübeck University of Applied Sciences, and covers the following aspects:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Fundamental concepts&lt;/strong&gt; of programming including &lt;strong&gt;programming paradigms&lt;/strong&gt; and &lt;strong&gt;runtime models&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Variables&lt;/strong&gt;, &lt;strong&gt;data types&lt;/strong&gt;, &lt;strong&gt;operators&lt;/strong&gt; and &lt;strong&gt;expressions&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Control flow&lt;/strong&gt; and &lt;strong&gt;routines&lt;/strong&gt; (functions, procedures, methods)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Reference data types&lt;/strong&gt; and &lt;strong&gt;collections&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;(Stream based) &lt;strong&gt;I/O programming&lt;/strong&gt; and &lt;strong&gt;serialization&lt;/strong&gt; of objects&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Recursive programming&lt;/strong&gt; and &lt;strong&gt;recursive datastructures&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Functional programming&lt;/strong&gt; using &lt;strong&gt;lambda functions&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Exception handling&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Introduction to &lt;strong&gt;object oriented programming&lt;/strong&gt; and &lt;strong&gt;UML&lt;/strong&gt; introducing fundamental concepts like &lt;strong&gt;abstraction&lt;/strong&gt;, &lt;strong&gt;encapsulation&lt;/strong&gt;, and &lt;strong&gt;polymorphism&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;course-material-german-only&quot;&gt;Course Material (german only)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Lecture Unit 1: &lt;a href=&quot;/assets/ws2018/progI/Unit_01.pdf&quot;&gt;Core concepts of programming&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Lecture Unit 2: &lt;a href=&quot;/assets/ws2018/progI/Unit_02.pdf&quot;&gt;Fundamentals of imperative programming&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Lecture Unit 3: &lt;a href=&quot;/assets/ws2018/progI/Unit_03.pdf&quot;&gt;Reference data types and collections&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Lecture Unit 4: &lt;a href=&quot;/assets/ws2018/progI/Unit_04.pdf&quot;&gt;I/O programming, serialization&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Lecture Unit 5: &lt;a href=&quot;/assets/ws2018/progI/Unit_05.pdf&quot;&gt;Recursive and functional programming&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Lecture Unit 6: &lt;a href=&quot;/assets/ws2018/progI/Unit_06.pdf&quot;&gt;OO and UML&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Examples: &lt;a href=&quot;/assets/ws2018/progI/examples.pdf&quot;&gt;Catalogue of lecture examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Exercises: &lt;a href=&quot;/assets/ws2018/progI/excercises.pdf&quot;&gt;Catalogue of excercises&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Nane Kratzke</name></author><category term="lecture" /><category term="java" /><category term="programming" /><summary type="html"></summary></entry><entry><title type="html">And the winner is … Australia Simulator</title><link href="http://www.nkode.io/2018/07/13/And-the-winner-is.html" rel="alternate" type="text/html" title="And the winner is ... Australia Simulator" /><published>2018-07-13T00:00:00+02:00</published><updated>2018-07-13T00:00:00+02:00</updated><id>http://www.nkode.io/2018/07/13/And-the-winner-is</id><content type="html" xml:base="http://www.nkode.io/2018/07/13/And-the-winner-is.html">&lt;p&gt;One more time we had some fun this summer semester &lt;a href=&quot;/lecture/2018/03/14/webtech.html&quot;&gt;webtechnology course&lt;/a&gt;. 
My students implemented several games as &lt;a href=&quot;https://www.dartlang.org/&quot;&gt;Dart&lt;/a&gt; single page DOM-tree based HTML ‘apps’.&lt;/p&gt;

&lt;p&gt;These three games (of 27 game submissions) entered the &lt;a href=&quot;/assets/webtech-hall-of-fame/index.html&quot;&gt;Webtech Hall of Fame&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;#1: &lt;a href=&quot;/assets/ss2018/webtech/games/team-2a/index.html&quot;&gt;Australia Simulator&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;#2: &lt;a href=&quot;/assets/ss2018/webtech/games/team-1h/index.html&quot;&gt;Happy Pingu&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;#3: &lt;a href=&quot;/assets/ss2018/webtech/games/team-2g/index.html&quot;&gt;GridShift&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Congratulations.&lt;/p&gt;</content><author><name>Nane Kratzke,</name></author><category term="blog" /><summary type="html">One more time we had some fun this summer semester webtechnology course. My students implemented several games as Dart single page DOM-tree based HTML ‘apps’.</summary></entry><entry><title type="html">Developing a Graphical User Interface for Describing Cloud-native Applications for Elastic Container Platforms</title><link href="http://www.nkode.io/thesis/2018/06/28/thesis-ucaml-gui.html" rel="alternate" type="text/html" title="Developing a Graphical User Interface for Describing Cloud-native Applications for Elastic Container Platforms" /><published>2018-06-28T00:00:00+02:00</published><updated>2018-06-28T00:00:00+02:00</updated><id>http://www.nkode.io/thesis/2018/06/28/thesis-ucaml-gui</id><content type="html" xml:base="http://www.nkode.io/thesis/2018/06/28/thesis-ucaml-gui.html">&lt;p&gt;Cloud-native applications are intentionally designed for the cloud in order to leverage
cloud platform features like korizontal scaling and elasicity - benefits coming along
with cloud platforms. In addition to classical (and very often static) multi-tier deployment
scenarios, cloud-native applications are typically operated on much more complex but elastic
infrastructures. Furthermore, there is a trend to use elastic container platforms like
Kubernetes, Docker Swarm or Apache Mesos. However, describing this service can be extensive
and platform specific. Therefore, we developed a domain specific language for describing
cloud-native applications, including features like model-to-model generation for specific elastic container platforms.&lt;/p&gt;

&lt;p&gt;In this thesis, a graphical user interface for describing cloud-native application for multi-cloud deployments has to be implemented.&lt;/p&gt;

&lt;p&gt;For this purpose, the following sub-tasks have to be dealt with and documented:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Familiarization with UCAML (Universal Cloud Application Modeling Language), cloud-native applications (especially Docker), cloud computing and elastic container platforms&lt;/li&gt;
  &lt;li&gt;Identification of the GUI requirements&lt;/li&gt;
  &lt;li&gt;Design the software architecture of the GUI service&lt;/li&gt;
  &lt;li&gt;Implementation and evaluation of the GUI&lt;/li&gt;
  &lt;li&gt;Implementation of the GUI as a web-service&lt;/li&gt;
  &lt;li&gt;Automatic validation of the user input&lt;/li&gt;
  &lt;li&gt;Practical evaluation of the GUI by using it for describing a cloud-native demo application (e.g. the Sock Shop)&lt;/li&gt;
  &lt;li&gt;Writing a developer documentation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note: Should individual aspects shown to be to difficult to achieve during the processing of this work, the task can be adapted - after plausible proof of difficulty.&lt;/p&gt;</content><author><name>Peter-Christian Quint</name></author><category term="thesis" /><category term="programming" /><category term="web" /><summary type="html">Cloud-native applications are intentionally designed for the cloud in order to leverage cloud platform features like korizontal scaling and elasicity - benefits coming along with cloud platforms. In addition to classical (and very often static) multi-tier deployment scenarios, cloud-native applications are typically operated on much more complex but elastic infrastructures. Furthermore, there is a trend to use elastic container platforms like Kubernetes, Docker Swarm or Apache Mesos. However, describing this service can be extensive and platform specific. Therefore, we developed a domain specific language for describing cloud-native applications, including features like model-to-model generation for specific elastic container platforms.</summary></entry><entry><title type="html">Entwicklung einer dezentralen Studentenwohnheim-App mit Flutter</title><link href="http://www.nkode.io/thesis/2018/05/10/thesis-wohnheim-app.html" rel="alternate" type="text/html" title="Entwicklung einer dezentralen Studentenwohnheim-App mit Flutter" /><published>2018-05-10T00:00:00+02:00</published><updated>2018-05-10T00:00:00+02:00</updated><id>http://www.nkode.io/thesis/2018/05/10/thesis-wohnheim-app</id><content type="html" xml:base="http://www.nkode.io/thesis/2018/05/10/thesis-wohnheim-app.html">&lt;p&gt;Für die Bewohner von Studentenwohnheimen soll eine App entwickelt
werden, die diesen im sozialen und organisatorischen Bereich von Studentenwohnheimen pragmatische Interaktionsmöglichkeiten bietet und auf einem dezentralen und selbstorganisierendem Ansatz basiert.&lt;/p&gt;

&lt;p&gt;Studentenwohnheime sind häufig Heimat von mehreren hundert Studierenden mit hoher Fluktuation. Häufig existieren jedoch keine Online-Plattformen für Studentenwohnheimbelange. Meist wird hierzu (selbstorganisiert) auf Facebook-Gruppen ausgewichen, die von einzelnen Bewohnern erstellt werden. Verlassen die Gruppenadministratoren das Wohnheim zerfallen jedoch häufig diese Online-Gruppen aufgrund fehlender Administratoren und es müssen andere Organisationsformen in unregelmäßigen Abständen durch Bewohner gefunden werden.&lt;/p&gt;

&lt;p&gt;Um eine möglichst attraktive und sich selbstorganisierende Plattform für Studentenwohnheime zu bieten, soll zunächst ermittelt werden, welche Funktionen die Bewohner nutzen würden und wie groß der Bedarf an einer App ist. Dies könnten beispielsweise ein Wohnheimflohmarkt, ein Foodshare-Programm, Meldungen an den Hausmeister, Annahme von Paketen, eine WG-Einkaufsliste und weitere Features sein.&lt;/p&gt;

&lt;p&gt;Features mit ausreichendem Bedarf sollen dann implementiert
werden. Ferner soll eine geeignete technische Architektur für eine solche App entwickelt werden, die möglichst dezentral aufgebaut sein soll und es ermöglicht weitere Funktionalitäten für eine solche App nachträglich zu erweitern. Es soll auf zentrale Serverkomponenten verzichtet werden und Kommunikationskanäle genutzt werden von denen bekannt ist, dass Studierende über diese verlässlich erreichbar sind (bspw. Email). Der Ansatz kann als eine Art Social-Network-over-Email-Ansatz bezeichnet werden. Dabei soll Nutzern der App nicht deutlich werden, dass im Hintergrund EMails genutzt werden. Nutzer, die die App nicht nutzen wollen, sollen dennoch in der Lage sein, Nachrichtenströmen rund um Wohnhemisbelange per EMail (lesend) zu folgen.&lt;/p&gt;

&lt;p&gt;Die App soll mit &lt;a href=&quot;https://www.flutter.io&quot;&gt;Flutter&lt;/a&gt; für Android und iOS entwickelt werden. Dabei soll erhoben werden, inwiefern sich Flutter für die Entwicklung solcher Apps eignet (Lessons Learned).&lt;/p&gt;

&lt;h2 id=&quot;teilaufgaben&quot;&gt;Teilaufgaben:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Bedarfsanalyse von Funktionen für Studentenwohnheime. Hierbei sind Bewohner des Studentenwohnheims  geeignet einzubeziehen.&lt;/li&gt;
  &lt;li&gt;Analyse denkbarer technischer Lösungsansätze (dezentral, selbstorganisierend).&lt;/li&gt;
  &lt;li&gt;Architekturentwurf der Anwendung&lt;/li&gt;
  &lt;li&gt;Die Funktionsfähigkeit der App soll mittels Softwaretests geeignet nachgewiesen werden.&lt;/li&gt;
  &lt;li&gt;Die Nutzbarkeit der App soll systematisch evaluiert werden. Hierbei sind Bewohner des Studentenwohnheims  geeignet einzubeziehen.&lt;/li&gt;
  &lt;li&gt;Dokumentation der oben angegeben Schritte (Bachelor-Arbeit) inkl. Bewertung der Nutzbarkeit des Frameworks Flutter für solche Arten von Apps.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Es wird empfohlen die Dokumentation von Anfang an begleitend zur Arbeit zu erstellen und sich an einem Dokumentations-Template - wie bspw. &lt;a href=&quot;https://github.com/nkratzke/BAMA-Template&quot;&gt;diesem&lt;/a&gt; - zu orientieren.&lt;/p&gt;</content><author><name>Nane Kratzke</name></author><category term="thesis" /><summary type="html">Für die Bewohner von Studentenwohnheimen soll eine App entwickelt werden, die diesen im sozialen und organisatorischen Bereich von Studentenwohnheimen pragmatische Interaktionsmöglichkeiten bietet und auf einem dezentralen und selbstorganisierendem Ansatz basiert.</summary></entry><entry><title type="html">Eine gamifizierte Howto-App für Bachelorarbeiten</title><link href="http://www.nkode.io/thesis/2018/05/10/thesis-ba-seminar-app.html" rel="alternate" type="text/html" title="Eine gamifizierte Howto-App für Bachelorarbeiten" /><published>2018-05-10T00:00:00+02:00</published><updated>2018-05-10T00:00:00+02:00</updated><id>http://www.nkode.io/thesis/2018/05/10/thesis-ba-seminar-app</id><content type="html" xml:base="http://www.nkode.io/thesis/2018/05/10/thesis-ba-seminar-app.html">&lt;p&gt;Für Studierende im letzten Semester eines Bachelorstudiengangs, stellt das Verfassen einer Bachelorarbeit &lt;strong&gt;DIE&lt;/strong&gt; wesentliche Prüfungsleistung dar. Die Auseinandersetzung mit komplexen Problemstellungen stellt erfahrungsgemäß für viele Studierende eine große Herausforderung dar, welche sich aus dem erstmaligen Zusammenspiel von selbstständigem und eigenverantwortlichem Arbeiten sowie Problemlösen mittels erworbener Fach- und Methodenkenntnisse über einen längeren (in etwa dreimonatigen) Zeitraum ergibt.&lt;/p&gt;

&lt;p&gt;Im Verlauf des Studiums sollten Studierende folgendes Wissen und Fähigkeiten erworben haben und zielgerichtet anwenden:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Studiengang-spezifisches Grundlagenwissen&lt;/li&gt;
  &lt;li&gt;Wissen über fachspezifische Methoden und deren zielgerichtete Anwendung&lt;/li&gt;
  &lt;li&gt;Fähigkeit, komplexe Probleme zu erkennen, zu strukturieren und systematisch mittels geeigneter Methoden zu bearbeiten&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Es kommt im Kontext von Bachelorarbeiten dennoch oftmals zu Schwierigkeiten, das erworbene Wissen und Fähigkeiten zielgerichtet auf reale Probleme anzuwenden und deren Ergebnisse zusammenhängend zu dokumentieren.&lt;/p&gt;

&lt;h2 id=&quot;lösungsansatz&quot;&gt;Lösungsansatz&lt;/h2&gt;

&lt;p&gt;Ein möglicher Lösungsansatz wäre Studierenden eine Software bereitzustellen, welche unterstützend und wegweisend bei dem systematischen Vorgehen für komplexe Problemstellungen fungieren könnte.
Hierbei soll es nicht darum gehen, dem Studierenden die eigentliche Arbeit abzunehmen, sondern vielmehr darum, Studierende hinsichtlich Vorgehen und Methodenauswahl zielgerichtet zu unterstützen.&lt;/p&gt;

&lt;p&gt;Im Rahmen dieser Bachelorarbeit soll hierzu eine mobile Applikation entwickelt werden, die den Studierenden während der Dauer seiner Bachelorarbeit kontinuierlich “begleitet”. Dabei sollen Gamificationansätze realisiert werden, die motivierend im Rahmen einer Bachelorarbeit wirken sollen. Dies soll beispielhaft für den Studiengang Informatik/Softwareentwicklung erfolgen. Eine Erweiterbarkeit für andere Studiengänge ist hierbei jedoch von Anfang an konzeptionell vorzusehen.&lt;/p&gt;

&lt;p&gt;Primäre Funktion der Software ist Studierenden bei den folgenden Aufgaben begleitend zu unterstützen und fortwährend zu motivieren “am Ball zu bleiben”:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Brainstorming (zur Unterstützung zur Ideenfindung für Bachelorarbeits-Themen)&lt;/li&gt;
  &lt;li&gt;Recherche und Literaturverwaltung&lt;/li&gt;
  &lt;li&gt;Gliederung (unterschiedlicher Kategorien von Bachelorarbeiten, z.B. mittels bewährter Templates)&lt;/li&gt;
  &lt;li&gt;Zeitplanung, Fortschrittsverfolgung sowie Erinnerungs- und Benachrichtigungsfunktionen&lt;/li&gt;
  &lt;li&gt;Problem-orientierte Anforderungsanalyse und deren Dokumentation&lt;/li&gt;
  &lt;li&gt;Problem-orientierte Methoden- und Tool-/Frameworkselektion und deren Dokumentation&lt;/li&gt;
  &lt;li&gt;Methoden-spezifische Aufbereitung von Ergebnissen&lt;/li&gt;
  &lt;li&gt;Problem-orientierte Nachweisführung und deren Dokumentation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Die App soll mit &lt;a href=&quot;https://www.flutter.io&quot;&gt;Flutter&lt;/a&gt; für Android und iOS entwickelt werden. Dabei soll erhoben werden, inwiefern sich Flutter für die Entwicklung solcher Apps eignet (Lessons Learned).&lt;/p&gt;

&lt;h2 id=&quot;teilaufgaben&quot;&gt;Teilaufgaben&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Detaillierte Anforderungsanalyse oben angegebener Funktionen. Hierbei sind Studenten und Professoren des Studiengangs Informatik/Softwaretechnik geeignet einzubeziehen und relevante Literatur (insbesondere zu Gamification und Methoden der Informatik und des Softwareengineering) zu berücksichtigen.&lt;/li&gt;
  &lt;li&gt;Architekturentwurf der Anwendung (Erweiterbarkeit für andere Studiengänge ist konzeptionell vorzusehen)&lt;/li&gt;
  &lt;li&gt;Implementierung der Anwendung&lt;/li&gt;
  &lt;li&gt;Die Funktionsfähigkeit der App soll mittels Softwaretests geeignet nachgewiesen werden.&lt;/li&gt;
  &lt;li&gt;Die Nutzbarkeit der App soll systematisch evaluiert werden. Hierbei sind Studenten und Professoren des Studiengangs Informatik/Softwaretechnik geeignet einzubeziehen.&lt;/li&gt;
  &lt;li&gt;Dokumentation der oben angegeben Schritte (Bachelor-Arbeit) inkl. Bewertung der Nutzbarkeit des Frameworks Flutter für solche Arten von Apps.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Es wird empfohlen die Dokumentation von Anfang an begleitend zur Arbeit zu erstellen und sich an einem Dokumentations-Template - wie bspw. &lt;a href=&quot;https://github.com/nkratzke/BAMA-Template&quot;&gt;diesem&lt;/a&gt; - zu orientieren.&lt;/p&gt;</content><author><name>Nane Kratzke</name></author><category term="thesis" /><summary type="html">Für Studierende im letzten Semester eines Bachelorstudiengangs, stellt das Verfassen einer Bachelorarbeit DIE wesentliche Prüfungsleistung dar. Die Auseinandersetzung mit komplexen Problemstellungen stellt erfahrungsgemäß für viele Studierende eine große Herausforderung dar, welche sich aus dem erstmaligen Zusammenspiel von selbstständigem und eigenverantwortlichem Arbeiten sowie Problemlösen mittels erworbener Fach- und Methodenkenntnisse über einen längeren (in etwa dreimonatigen) Zeitraum ergibt.</summary></entry><entry><title type="html">Web Technologies (Summer 2018)</title><link href="http://www.nkode.io/lecture/2018/03/14/webtech.html" rel="alternate" type="text/html" title="Web Technologies (Summer 2018)" /><published>2018-03-14T00:00:00+01:00</published><updated>2018-03-14T00:00:00+01:00</updated><id>http://www.nkode.io/lecture/2018/03/14/webtech</id><content type="html" xml:base="http://www.nkode.io/lecture/2018/03/14/webtech.html">&lt;p&gt;This project is about common technologies used to build (part) of web information systems.
The project course is given for students
at the Lübeck University of Applied Sciences (in german language).
The course covers following aspects:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;descriptional languages&lt;/strong&gt; for web content like &lt;a href=&quot;http://www.w3.org/html/&quot;&gt;HTML&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;presentational languages&lt;/strong&gt; for web content like &lt;a href=&quot;http://www.w3.org/Style/CSS/&quot;&gt;CSS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Document Object Model&lt;/strong&gt; (DOM)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;client and server side programming&lt;/strong&gt; with &lt;a href=&quot;https://www.dartlang.org&quot;&gt;Dart&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;progressive web app&lt;/strong&gt; and offline capabilities of web pages&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;gyroscope&lt;/strong&gt; based controls&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Students apply their intensified web programming skills by developing
a small one person, DOM-tree based (that means not canvas based)
online game like &lt;em&gt;Tetris&lt;/em&gt; or &lt;em&gt;Boulder Dash&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;course-material-german-only&quot;&gt;Course Material (german only)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/assets/ss2018/webtech/unit-01.pdf&quot;&gt;Unit 01:&lt;/a&gt; HTML + DOM-Tree + CSS&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/assets/ss2018/webtech/unit-02.pdf&quot;&gt;Unit 02:&lt;/a&gt; Dart I (Dart as full purpose programming language)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/assets/ss2018/webtech/unit-03.pdf&quot;&gt;Unit 03:&lt;/a&gt; Dart II (Client- and server-side programming)&lt;/li&gt;
  &lt;li&gt;Self Study &lt;a href=&quot;/assets/ss2018/webtech/unit-04.pdf&quot;&gt;Unit 04:&lt;/a&gt; HTTP and REST&lt;/li&gt;
  &lt;li&gt;Add-On &lt;a href=&quot;/assets/ss2018/webtech/unit-05.pdf&quot;&gt;Unit 05:&lt;/a&gt; Progressive Web Apps and more with Dart&lt;/li&gt;
  &lt;li&gt;Reference game: &lt;a href=&quot;https://github.com/nkratzke/dartsnake&quot;&gt;SnakeDart&lt;/a&gt; (another game has to be developped using Dart)&lt;/li&gt;
  &lt;li&gt;Reference mobile “game”: &lt;a href=&quot;https://github.com/nkratzke/dartmotion&quot;&gt;Shadow Hunter&lt;/a&gt; (used to demonstrate progressive web app features and gyroscope control on mobile devices)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;game-outcomes&quot;&gt;Game outcomes&lt;/h2&gt;

&lt;p&gt;The following teams formed up released the following interesting mobile game implementations.
To have a look on the &lt;a href=&quot;/assets/webtech-hall-of-fame&quot;&gt;hall-of-fame&lt;/a&gt; of former semesters might be interesting as well.&lt;/p&gt;

&lt;h3 id=&quot;group-1&quot;&gt;Group 1&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Team 1.A: Klick Mich (not released for public)&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Team 1.B: &lt;a href=&quot;/assets/ss2018/webtech/games/team-1b/html/index.html&quot;&gt;Battle City&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Team 1.C: &lt;a href=&quot;/assets/ss2018/webtech/games/team-1c/index.html&quot;&gt;Tetris 360°&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Team 1.D: &lt;a href=&quot;/assets/ss2018/webtech/games/team-1d/index.html&quot;&gt;Dart Jump&lt;/a&gt; (&lt;strong&gt;placed 2nd&lt;/strong&gt; in group)&lt;/li&gt;
  &lt;li&gt;Team 1.E: &lt;a href=&quot;/assets/ss2018/webtech/games/team-1e/index.html&quot;&gt;Mexican Jones&lt;/a&gt; &lt;em&gt;[sadly keyboard control on desktop browsers seems buggy]&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Team 1.F: &lt;a href=&quot;/assets/ss2018/webtech/games/team-1f/index.html&quot;&gt;Brick Out&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;Team 1.G: Swipe and Move (surrendered)&lt;/del&gt;&lt;/li&gt;
  &lt;li&gt;Team 1.H: &lt;a href=&quot;/assets/ss2018/webtech/games/team-1h/index.html&quot;&gt;Pingu&lt;/a&gt; (&lt;strong&gt;placed 1st&lt;/strong&gt; in group, &lt;strong&gt;Final Five&lt;/strong&gt;, &lt;strong&gt;Hall of Fame (2nd)&lt;/strong&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;group-2&quot;&gt;Group 2&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Team 2.A: &lt;a href=&quot;/assets/ss2018/webtech/games/team-2a/index.html&quot;&gt;Australia Simulator&lt;/a&gt; (&lt;strong&gt;placed 1st&lt;/strong&gt; in group, &lt;strong&gt;Final Five&lt;/strong&gt;, &lt;strong&gt;Hall of Fame (1st)&lt;/strong&gt;)&lt;/li&gt;
  &lt;li&gt;Team 2.B: &lt;a href=&quot;/assets/ss2018/webtech/games/team-2b/index.html&quot;&gt;Dart Rogue&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;Team 2.C: Star Droid (surrendered)&lt;/del&gt;&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;Team 2.D: Donkey Jump (surrendered)&lt;/del&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Team 2.E: Path Puzzle (not released for public)&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;Team 2.F: Place a Bomb (surrendered)&lt;/del&gt;&lt;/li&gt;
  &lt;li&gt;Team 2.G: &lt;a href=&quot;/assets/ss2018/webtech/games/team-2g/index.html&quot;&gt;Grid Shift&lt;/a&gt; (&lt;strong&gt;placed 2nd&lt;/strong&gt; in group, &lt;strong&gt;Final Five&lt;/strong&gt;, &lt;strong&gt;Hall of Fame (3rd)&lt;/strong&gt;) &lt;em&gt;[sadly keyboard control on some desktop browsers seems buggy]&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;group-3&quot;&gt;Group 3&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Team 3.A: &lt;a href=&quot;/assets/ss2018/webtech/games/team-3a/index.html&quot;&gt;RabbitRinth&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Team 3.B: &lt;a href=&quot;/assets/ss2018/webtech/games/team-3b/index.html&quot;&gt;Color Jump&lt;/a&gt; (&lt;strong&gt;placed 2nd&lt;/strong&gt; in group)&lt;/li&gt;
  &lt;li&gt;Team 3.C: &lt;a href=&quot;/assets/ss2018/webtech/games/team-3c/index.html&quot;&gt;Warships&lt;/a&gt; &lt;em&gt;[sadly some images not working due to German special character encoding problems like in “flugzeugträger.png”]&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;Team 3.D: Outbreak (surrendered)&lt;/del&gt;&lt;/li&gt;
  &lt;li&gt;Team 3.E: &lt;a href=&quot;/assets/ss2018/webtech/games/team-3e/index.html&quot;&gt;Battle City&lt;/a&gt; (&lt;strong&gt;placed 1st&lt;/strong&gt; in group, &lt;strong&gt;Final Five&lt;/strong&gt;)&lt;/li&gt;
  &lt;li&gt;Team 3.F: &lt;a href=&quot;/assets/ss2018/webtech/games/team-3f/index.html&quot;&gt;SmurfsGoneWild&lt;/a&gt; &lt;em&gt;[sadly some images (drag icon) not working due to wrong relative paths]&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Team 3.G: Space Babel (not released for public)&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Team 3.H: &lt;a href=&quot;/assets/ss2018/webtech/games/team-3h/index.html&quot;&gt;Jumpy Run&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;group-4&quot;&gt;Group 4&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Team 4.A: &lt;a href=&quot;/assets/ss2018/webtech/games/team-4a/index.html&quot;&gt;Stone Royal&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Team 4.B: &lt;a href=&quot;/assets/ss2018/webtech/games/team-4b/html/index.html&quot;&gt;Star Jet Enterprise&lt;/a&gt; &lt;em&gt;[sadly keyboard control on desktop browsers seems buggy]&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Team 4.C: &lt;a href=&quot;/assets/ss2018/webtech/games/team-4c/index.html&quot;&gt;Bombenhagel&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Team 4.D: &lt;a href=&quot;/assets/ss2018/webtech/games/team-4d/index.html&quot;&gt;Frank the Fruitman&lt;/a&gt; (&lt;strong&gt;placed 1st (shared)&lt;/strong&gt; in group, &lt;strong&gt;Final Five&lt;/strong&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Team 4.E: Hunt (not released for public)&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Team 4.F: &lt;a href=&quot;/assets/ss2018/webtech/games/team-4f/index.html&quot;&gt;Open Flood&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Team 4.G: &lt;a href=&quot;/assets/ss2018/webtech/games/team-4g/index.html&quot;&gt;Break Out&lt;/a&gt; (&lt;strong&gt;placed 1st (shared)&lt;/strong&gt; in group)&lt;/li&gt;
  &lt;li&gt;Team 4.H: &lt;a href=&quot;/assets/ss2018/webtech/games/team-4h/index.html&quot;&gt;Battle Ship&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Nane Kratzke</name></author><category term="web" /><category term="lecture" /><category term="database" /><category term="html" /><category term="css" /><category term="dart" /><category term="programming" /><category term="rest" /><category term="http" /><summary type="html"></summary></entry><entry><title type="html">Programming II (Summer 2018)</title><link href="http://www.nkode.io/lecture/2018/03/14/lecture-programming-ii.html" rel="alternate" type="text/html" title="Programming II (Summer 2018)" /><published>2018-03-14T00:00:00+01:00</published><updated>2018-03-14T00:00:00+01:00</updated><id>http://www.nkode.io/lecture/2018/03/14/lecture-programming-ii</id><content type="html" xml:base="http://www.nkode.io/lecture/2018/03/14/lecture-programming-ii.html">&lt;p&gt;The course &lt;strong&gt;Programming II&lt;/strong&gt; continues &lt;strong&gt;Programming I&lt;/strong&gt; by introducing more sophistacted programming aspects
for second semester students. JAVA is used as teaching language. 
Nevertheless, the principles are applicable to every (class based) object oriented programming language.&lt;/p&gt;

&lt;p&gt;The course is given for students of the &lt;a href=&quot;https://www.fh-luebeck.de/hochschule/fachbereich-elektrotechnik-und-informatik/studiengaenge/informatik-softwaretechnik-bsc/uebersicht/&quot;&gt;Computer Science/Software Engineering&lt;/a&gt; study programme
at the Lübeck University of Applied Sciences and will cover following aspects:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Object oriented concepts&lt;/strong&gt; and programming techniques&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Testing&lt;/strong&gt; of software including introduction to &lt;strong&gt;contracts&lt;/strong&gt;, &lt;strong&gt;unit testing&lt;/strong&gt; and &lt;strong&gt;code coverage&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Generics&lt;/strong&gt; introducing concepts like generic classes and methodes as well as concepts like type erasure, bounds&lt;/li&gt;
  &lt;li&gt;Introduction to &lt;strong&gt;OOAD&lt;/strong&gt; (object oriented analysis and design) by example of Tic Tac Toe&lt;/li&gt;
  &lt;li&gt;Graphical user interfaces (&lt;strong&gt;GUI&lt;/strong&gt;) using Swing introducing &lt;strong&gt;MVC&lt;/strong&gt; (model view controler) paradigma&lt;/li&gt;
  &lt;li&gt;Concurrent programming using &lt;strong&gt;threads&lt;/strong&gt; introducing accompanying &lt;strong&gt;thread safeness&lt;/strong&gt; problems like race conditions, producer-consumer problem, deadlocks.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;course-material-german-only&quot;&gt;Course Material (german only)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/nkratzke/nkratzke.github.io/raw/master/assets/ss2018/prog-ii/unit-06.pdf&quot;&gt;Unit 6:&lt;/a&gt; Introduction to object oriented programming&lt;/li&gt;
  &lt;li&gt;Self Study &lt;a href=&quot;https://github.com/nkratzke/nkratzke.github.io/raw/master/assets/ss2018/prog-ii/unit-07.pdf&quot;&gt;Unit 7:&lt;/a&gt; Further aspects of object oriented programming&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/nkratzke/nkratzke.github.io/raw/master/assets/ss2018/prog-ii/unit-08.pdf&quot;&gt;Unit 8:&lt;/a&gt; Testing&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/nkratzke/nkratzke.github.io/raw/master/assets/ss2018/prog-ii/unit-09.pdf&quot;&gt;Unit 9:&lt;/a&gt; Generics&lt;/li&gt;
  &lt;li&gt;Self Study &lt;a href=&quot;https://github.com/nkratzke/nkratzke.github.io/raw/master/assets/ss2018/prog-ii/unit-10.pdf&quot;&gt;Unit 10:&lt;/a&gt; OOAD by example of Tic Tac Toe&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/nkratzke/nkratzke.github.io/raw/master/assets/ss2018/prog-ii/unit-11.pdf&quot;&gt;Unit 11:&lt;/a&gt; GUI and MVC&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/nkratzke/nkratzke.github.io/raw/master/assets/ss2018/prog-ii/unit-12.pdf&quot;&gt;Unit 12:&lt;/a&gt; Concurrent programming&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/nkratzke/nkratzke.github.io/raw/master/assets/ss2018/prog-ii/exercises.pdf&quot;&gt;Catalogue of exercises&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Nane Kratzke</name></author><category term="lecture" /><category term="java" /><category term="programming" /><summary type="html"></summary></entry><entry><title type="html">Conference Talks, Madeira 2018</title><link href="http://www.nkode.io/2018/03/11/madeira-talks.html" rel="alternate" type="text/html" title="Conference Talks, Madeira 2018" /><published>2018-03-11T00:00:00+01:00</published><updated>2018-03-11T00:00:00+01:00</updated><id>http://www.nkode.io/2018/03/11/madeira-talks</id><content type="html" xml:base="http://www.nkode.io/2018/03/11/madeira-talks.html">&lt;p&gt;I am glad to contribute the following to the &lt;a href=&quot;http://closer.scitevents.org/?y=2018&quot;&gt;8th International Conference on Cloud Computing and Services Science (CLOSER 2018)&lt;/a&gt; in Funchal, Madeira, Portugal this March 2018.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Position paper presentation about “Making Cloud Applications Too Fast and Furious for Attackers”&lt;/li&gt;
  &lt;li&gt;Paper presention about “A Lightweight Multi-Cloud DSL for Cloud-native Applications”&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;position-paper-presentation&quot;&gt;Position Paper Presentation&lt;/h2&gt;

&lt;h3 id=&quot;about-being-the-tortoise-or-the-hare-making-cloud-applications-too-fast-and-furious-for-attackers&quot;&gt;About being the Tortoise or the Hare? Making Cloud Applications too Fast and Furious for Attackers&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://bit.ly/2FuG5H1&quot;&gt;
&lt;img src=&quot;/img/posts/CLOSER-POSITION-2018.png&quot; width=&quot;45%&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;abstract&quot;&gt;Abstract&lt;/h3&gt;

&lt;p&gt;Cloud applications expose - beside service endpoints - also potential or actual vulnerabilities. And attackers have several advantages on their side. They can select the weapons, the point of time and the point of attack. Very often cloud application security engineering efforts focus to harden the fortress walls but seldom assume that attacks may be successful. So, cloud applications rely on their defensive walls but seldom attack intruders actively. Biological systems are different. They accept that defensive “walls” can be breached at several layers and therefore make use of an active and adaptive defense system to attack potential intruders - an immune system. This position paper proposes such an immune system inspired approach to ensure that even undetected intruders can be purged out of cloud applications. This makes it much harder for intruders to maintain a presence on victim systems. Evaluation experiments with popular cloud service infrastructures (Amazon Web Services, Google Compute Engine, Azure and OpenStack) showed that this could minimize the undetected acting period of intruders down to minutes.&lt;/p&gt;

&lt;h3 id=&quot;links&quot;&gt;Links&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://bit.ly/2GgiyH8&quot;&gt;Paper&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/bibliography/Kra2018b.html&quot;&gt;Howto cite&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;paper-presentation&quot;&gt;Paper presentation&lt;/h2&gt;

&lt;h3 id=&quot;towards-a-lightweight-multi-cloud-dsl-for-elastic-and-transferable-cloud-native-applications&quot;&gt;Towards a Lightweight Multi-Cloud DSL for Elastic and Transferable Cloud-native Applications&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://www.slideshare.net/i21aneka/towards-a-lightweight-multicloud-dsl-for-elastic-and-transferable-cloudnative-applications&quot;&gt;
&lt;img src=&quot;/img/posts/CLOSER-2018.png&quot; width=&quot;45%&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;abstract-1&quot;&gt;Abstract&lt;/h3&gt;

&lt;p&gt;Cloud-native applications are intentionally designed for the cloud in order to leverage cloud platform features like horizontal scaling and elasticity – benefits coming along with cloud platforms. In addition to classical (and very often static) multi-tier deployment scenarios, cloud-native applications are typically operated on much more complex but elastic infrastructures. Furthermore, there is a trend to use elastic container platforms like Kubernetes, Docker Swarm or Apache Mesos. However, especially multi-cloud use cases are astonishingly complex to handle. In consequence, cloud-native applications are prone to vendor lock-in. Very often TOSCA-based approaches are used to tackle this aspect. But, these application topology defining approaches are limited in supporting multi-cloud adaption of a cloud-native application at runtime. In this paper, we analyzed several approaches to define cloud-native applications being multi-cloud transferable at runtime. We have not found an approach that fully satisfies all of our requirements. Therefore we introduce a solution proposal that separates elastic platform definition from cloud application definition. We present first considerations for a domain specific language for application definition and demonstrate evaluation results on the platform level showing that a cloud-native application can be transfered between different cloud service providers like Azure and Google within minutes and without downtime. The evaluation covers public and private cloud service infrastructures provided by Amazon Web Services, Microsoft Azure, Google Compute Engine and OpenStack.&lt;/p&gt;

&lt;h3 id=&quot;links-1&quot;&gt;Links&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.researchgate.net/publication/321918056&quot;&gt;Paper&lt;/a&gt; (ResearchGate)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://bitbucket.org/cloudtransit/ucaml&quot;&gt;UCAML&lt;/a&gt; (Proposed DSL on Bitbucket)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/bibliography/QK2018a.html&quot;&gt;Howto cite&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Nane Kratzke</name></author><category term="blog" /><category term="cloud" /><category term="research" /><category term="cloudtransit" /><summary type="html">I am glad to contribute the following to the 8th International Conference on Cloud Computing and Services Science (CLOSER 2018) in Funchal, Madeira, Portugal this March 2018.</summary></entry><entry><title type="html">Ein P2P-basierter Echtzeit-Online-Editor für Code-Reviews und Pair-Programming</title><link href="http://www.nkode.io/thesis/2018/02/06/thesis-collab-editor.html" rel="alternate" type="text/html" title="Ein P2P-basierter Echtzeit-Online-Editor für Code-Reviews und Pair-Programming" /><published>2018-02-06T00:00:00+01:00</published><updated>2018-02-06T00:00:00+01:00</updated><id>http://www.nkode.io/thesis/2018/02/06/thesis-collab-editor</id><content type="html" xml:base="http://www.nkode.io/thesis/2018/02/06/thesis-collab-editor.html">&lt;p&gt;Gegenstand dieser Masterarbeit ist ein Browser-basiertes
Code-Review Tool, dass es ermöglicht Unterstützung von einem
entfernten Teammitglied anzufordern, insbesondere um einen fachlichen
Austausch zu Quellcode zu ermöglichen. Zur Vermeidung eines aufwändigen 
Backend-Server-Systems soll die Kommunikation 
zwischen den Browsern mittels einer Peer-to-Peer-basierten 
WebRTC-Verbindung erfolgen.&lt;/p&gt;

&lt;p&gt;Die Applikation soll insbesondere folgendes Szenario abdecken:
Ein Initiator möchte einen fachlichen Austausch zu einem Quellcode
anstoßen, indem er ein Teammitglied mittels einer Zufalls-URL 
zu einer Online-Session einlädt. Über diese URL kann ein anderer
Entwickler Änderungen am gemeinsam editierten Quellcode vornehmen
und zur Verfügung stellen. Solche Änderungen werden geeignet markiert.
Der Initiator soll diese Änderungen übernehmen können.&lt;/p&gt;

&lt;p&gt;Die Lösung soll eine Kombination aus Pair-Programming und Code-Review
unterstützen, indem unter anderem die folgenden Funktionalitäten
bereitgestellt werden.&lt;/p&gt;

&lt;p&gt;Priorität 1 (MUSS):&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Kollaboratives Editieren (wie oben beschrieben)&lt;/li&gt;
  &lt;li&gt;Bereitstellung von Zufalls-URLs für Sessioneinladungen per Copy-Paste&lt;/li&gt;
  &lt;li&gt;Text-Chat&lt;/li&gt;
  &lt;li&gt;Import- und Export von Textdateien&lt;/li&gt;
  &lt;li&gt;Austausch der Daten über eine Echtzeit-P2P-Verbindung&lt;/li&gt;
  &lt;li&gt;Aufbau der Verbindung ggf. über einen Connection Server (STUN, Signaling Server)&lt;/li&gt;
  &lt;li&gt;Der Connection Server soll in Form eines Docker Containers bereitgestellt werden.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Priorität 2 (KANN):&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Audio-Chat&lt;/li&gt;
  &lt;li&gt;Video-Chat&lt;/li&gt;
  &lt;li&gt;EMail Integration&lt;/li&gt;
  &lt;li&gt;Slack Integration (slack.com)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;teilaufgaben&quot;&gt;Teilaufgaben:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Analyse bestehender Lösungsansätze&lt;/li&gt;
  &lt;li&gt;Analyse der WebRTC Technologien und verfügbare APIs&lt;/li&gt;
  &lt;li&gt;Architekturentwurf der Anwendung&lt;/li&gt;
  &lt;li&gt;Prototypische Implementierung des Editors (gem. Prioritäten)&lt;/li&gt;
  &lt;li&gt;Prototypische Implementierung des Connection Servers&lt;/li&gt;
  &lt;li&gt;Die Funktionsfähigkeit von Editor und Connection Server soll mittels Softwaretests geeignet nachgewiesen werden.&lt;/li&gt;
  &lt;li&gt;Die Nutzbarkeit soll systematisch evaluiert werden. Hierbei ist ein Entwicklerteam geeignet einzubeziehen.&lt;/li&gt;
  &lt;li&gt;Dokumentation der oben angegeben Schritte (Master-Arbeit) inkl. Bewertung der Nutzbarkeit und technischen Eignung für oben angegebenen Einsatzzweck.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Es wird empfohlen die Dokumentation von Anfang an begleitend zur Arbeit zu erstellen und sich an einem Dokumentations-Template - wie bspw. &lt;a href=&quot;https://github.com/nkratzke/BAMA-Template&quot;&gt;diesem&lt;/a&gt; - zu orientieren.&lt;/p&gt;</content><author><name>Nane Kratzke</name></author><category term="thesis" /><category term="process" /><summary type="html">Gegenstand dieser Masterarbeit ist ein Browser-basiertes Code-Review Tool, dass es ermöglicht Unterstützung von einem entfernten Teammitglied anzufordern, insbesondere um einen fachlichen Austausch zu Quellcode zu ermöglichen. Zur Vermeidung eines aufwändigen Backend-Server-Systems soll die Kommunikation zwischen den Browsern mittels einer Peer-to-Peer-basierten WebRTC-Verbindung erfolgen.</summary></entry></feed>