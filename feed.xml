<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="http://www.nkode.io/feed.xml" rel="self" type="application/atom+xml" /><link href="http://www.nkode.io/" rel="alternate" type="text/html" /><updated>2018-03-06T18:10:00+01:00</updated><id>http://www.nkode.io/</id><title type="html">nkode.io</title><subtitle>A blog about programming, data, cloud computing, and web scale systems</subtitle><entry><title type="html">Ein P2P-basierter Echtzeit-Online-Editor für Code-Reviews und Pair-Programming</title><link href="http://www.nkode.io/thesis/2018/02/06/thesis-collab-editor.html" rel="alternate" type="text/html" title="Ein P2P-basierter Echtzeit-Online-Editor für Code-Reviews und Pair-Programming" /><published>2018-02-06T00:00:00+01:00</published><updated>2018-02-06T00:00:00+01:00</updated><id>http://www.nkode.io/thesis/2018/02/06/thesis-collab-editor</id><content type="html" xml:base="http://www.nkode.io/thesis/2018/02/06/thesis-collab-editor.html">&lt;p&gt;Gegenstand dieser Masterarbeit ist ein Browser-basiertes
Code-Review Tool, dass es ermöglicht Unterstützung von einem
entfernten Teammitglied anzufordern, insbesondere um einen fachlichen
Austausch zu Quellcode zu ermöglichen. Zur Vermeidung eines aufwändigen 
Backend-Server-Systems soll die Kommunikation 
zwischen den Browsern mittels einer Peer-to-Peer-basierten 
WebRTC-Verbindung erfolgen.&lt;/p&gt;

&lt;p&gt;Die Applikation soll insbesondere folgendes Szenario abdecken:
Ein Initiator möchte einen fachlichen Austausch zu einem Quellcode
anstoßen, indem er ein Teammitglied mittels einer Zufalls-URL 
zu einer Online-Session einlädt. Über diese URL kann ein anderer
Entwickler Änderungen am gemeinsam editierten Quellcode vornehmen
und zur Verfügung stellen. Solche Änderungen werden geeignet markiert.
Der Initiator soll diese Änderungen übernehmen können.&lt;/p&gt;

&lt;p&gt;Die Lösung soll eine Kombination aus Pair-Programming und Code-Review
unterstützen, indem unter anderem die folgenden Funktionalitäten
bereitgestellt werden.&lt;/p&gt;

&lt;p&gt;Priorität 1 (MUSS):&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Kollaboratives Editieren (wie oben beschrieben)&lt;/li&gt;
  &lt;li&gt;Bereitstellung von Zufalls-URLs für Sessioneinladungen per Copy-Paste&lt;/li&gt;
  &lt;li&gt;Text-Chat&lt;/li&gt;
  &lt;li&gt;Import- und Export von Textdateien&lt;/li&gt;
  &lt;li&gt;Austausch der Daten über eine Echtzeit-P2P-Verbindung&lt;/li&gt;
  &lt;li&gt;Aufbau der Verbindung ggf. über einen Connection Server (STUN, Signaling Server)&lt;/li&gt;
  &lt;li&gt;Der Connection Server soll in Form eines Docker Containers bereitgestellt werden.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Priorität 2 (KANN):&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Audio-Chat&lt;/li&gt;
  &lt;li&gt;Video-Chat&lt;/li&gt;
  &lt;li&gt;EMail Integration&lt;/li&gt;
  &lt;li&gt;Slack Integration (slack.com)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;teilaufgaben&quot;&gt;Teilaufgaben:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Analyse bestehender Lösungsansätze&lt;/li&gt;
  &lt;li&gt;Analyse der WebRTC Technologien und verfügbare APIs&lt;/li&gt;
  &lt;li&gt;Architekturentwurf der Anwendung&lt;/li&gt;
  &lt;li&gt;Prototypische Implementierung des Editors (gem. Prioritäten)&lt;/li&gt;
  &lt;li&gt;Prototypische Implementierung des Connection Servers&lt;/li&gt;
  &lt;li&gt;Die Funktionsfähigkeit von Editor und Connection Server soll mittels Softwaretests geeignet nachgewiesen werden.&lt;/li&gt;
  &lt;li&gt;Die Nutzbarkeit soll systematisch evaluiert werden. Hierbei ist ein Entwicklerteam geeignet einzubeziehen.&lt;/li&gt;
  &lt;li&gt;Dokumentation der oben angegeben Schritte (Master-Arbeit) inkl. Bewertung der Nutzbarkeit und technischen Eignung für oben angegebenen Einsatzzweck.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Es wird empfohlen die Dokumentation von Anfang an begleitend zur Arbeit zu erstellen und sich an einem Dokumentations-Template - wie bspw. &lt;a href=&quot;https://github.com/nkratzke/BAMA-Template&quot;&gt;diesem&lt;/a&gt; - zu orientieren.&lt;/p&gt;</content><author><name>Nane Kratzke</name></author><category term="thesis" /><category term="process" /><summary type="html">Gegenstand dieser Masterarbeit ist ein Browser-basiertes Code-Review Tool, dass es ermöglicht Unterstützung von einem entfernten Teammitglied anzufordern, insbesondere um einen fachlichen Austausch zu Quellcode zu ermöglichen. Zur Vermeidung eines aufwändigen Backend-Server-Systems soll die Kommunikation zwischen den Browsern mittels einer Peer-to-Peer-basierten WebRTC-Verbindung erfolgen.</summary></entry><entry><title type="html">Digitalisierung von Geschäftsprozessen zur Ersatzteilbestellung und Materialrückgabe</title><link href="http://www.nkode.io/thesis/2018/01/25/thesis-rma-process.html" rel="alternate" type="text/html" title="Digitalisierung von Geschäftsprozessen zur Ersatzteilbestellung und Materialrückgabe" /><published>2018-01-25T00:00:00+01:00</published><updated>2018-01-25T00:00:00+01:00</updated><id>http://www.nkode.io/thesis/2018/01/25/thesis-rma-process</id><content type="html" xml:base="http://www.nkode.io/thesis/2018/01/25/thesis-rma-process.html">&lt;p&gt;In dieser Bachelorarbeit sollen bislang nicht digitalisierte Geschäftsprozesse (Supportanfrage, Ersatzteilbestellung und Materialrücklieferung) analysiert und digitalisiert werden. Dabei sind die vorhandene Prozessdokumentation und das vorhandene Firmen Customer Relationship Managment (CRM) System zu berücksichtigen. Die Lösung ist zusammen mit dem Geschäftsprozess-Owner (Support Team) und den Prozess nutzenden Kunden (Geschäftspartnern) zu evaluieren. Der Schwerpunkt der Digitalisierung soll im Bereich Kundenanfrage bis zum fertigen Vorgangs-Datensatz für das CRM System liegen. Im Detail müssen folgende Teilaufgaben bearbeitet und dokumentiert (Bachelorarbeit) werden:&lt;/p&gt;

&lt;h2 id=&quot;teilaufgaben&quot;&gt;Teilaufgaben&lt;/h2&gt;

&lt;p&gt;Die &lt;strong&gt;Dokumentation&lt;/strong&gt; folgender Aufgaben erfolgt im Rahmen der schriftlichen Ausarbeitung der Bachelorarbeit. Es wird empfohlen sich dabei an folgendes &lt;a href=&quot;https://github.com/nkratzke/BAMA-Template&quot;&gt;Template&lt;/a&gt; zu halten.&lt;/p&gt;

&lt;h3 id=&quot;analyse-des-istzustands&quot;&gt;Analyse des Istzustands&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Analyse des vorhandenen Prozesses&lt;/li&gt;
  &lt;li&gt;Entwickeln und bewerten möglicher Lösungsmöglichkeiten&lt;/li&gt;
  &lt;li&gt;Selektion einer favorisierten Lösungsmöglichkeit gemeinsam mit dem RMA Team&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;prototypische-realisierung-und-integration&quot;&gt;Prototypische Realisierung und Integration&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Anforderungen erheben (gemeinsam mit dem Support Team)&lt;/li&gt;
  &lt;li&gt;Architektur für eine Integration in das bestehende CRM entwickeln&lt;/li&gt;
  &lt;li&gt;Protoypische Implementierung der Geschäftsprozesse&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;funktionsnachweis-und-evaluierung&quot;&gt;Funktionsnachweis und Evaluierung&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Die Funktionsfähigkeit der Lösung soll mittels Softwaretests geeignet nachgewiesen werden.&lt;/li&gt;
  &lt;li&gt;Die Nutzbarkeit soll systematisch evaluiert werden. Hierbei ist das RMA Team und Kunde geeignet einzubeziehen.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Nane Kratzke</name></author><category term="thesis" /><category term="process" /><summary type="html">In dieser Bachelorarbeit sollen bislang nicht digitalisierte Geschäftsprozesse (Supportanfrage, Ersatzteilbestellung und Materialrücklieferung) analysiert und digitalisiert werden. Dabei sind die vorhandene Prozessdokumentation und das vorhandene Firmen Customer Relationship Managment (CRM) System zu berücksichtigen. Die Lösung ist zusammen mit dem Geschäftsprozess-Owner (Support Team) und den Prozess nutzenden Kunden (Geschäftspartnern) zu evaluieren. Der Schwerpunkt der Digitalisierung soll im Bereich Kundenanfrage bis zum fertigen Vorgangs-Datensatz für das CRM System liegen. Im Detail müssen folgende Teilaufgaben bearbeitet und dokumentiert (Bachelorarbeit) werden:</summary></entry><entry><title type="html">Conference Talks, Barcelona 2018</title><link href="http://www.nkode.io/2018/01/18/barcelona-talks.html" rel="alternate" type="text/html" title="Conference Talks, Barcelona 2018" /><published>2018-01-18T00:00:00+01:00</published><updated>2018-01-18T00:00:00+01:00</updated><id>http://www.nkode.io/2018/01/18/barcelona-talks</id><content type="html" xml:base="http://www.nkode.io/2018/01/18/barcelona-talks.html">&lt;p&gt;I am glad to contribute the following to the &lt;a href=&quot;https://www.iaria.org/conferences2018/CLOUDCOMPUTING18.html&quot;&gt;9th International Conference on Cloud Computing, GRIDs, and Virtualization (CLOUD COMPUTING 2018)&lt;/a&gt; in Barcelona, Spain this February 2018.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Paper presention of “About an Immune System Understanding for Cloud-native Applications”&lt;/li&gt;
  &lt;li&gt;The contribution of “Bricks and Mortar of Cloud-native Cathedrals” to a panel discussion on “Challenges in Cloud Computing-based Systems”&lt;/li&gt;
  &lt;li&gt;The contribution of “There is no impenetrable system” to a panel discussion on “Security and Safety in Cloud-based Systems and Services”&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;paper-presentation&quot;&gt;Paper Presentation&lt;/h2&gt;

&lt;h3 id=&quot;about-an-immune-system-understanding-for-cloud-native-applications&quot;&gt;About an Immune System Understanding for Cloud-native Applications&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://www.slideshare.net/i21aneka/about-an-immune-system-understanding-for-cloudnative-applications-biology-inspired-thoughts-to-immunize-the-cloud-forensic-trail-86351671&quot;&gt;
&lt;img src=&quot;/img/posts/CLOUD-COMPUTING-2018.png&quot; width=&quot;45%&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;abstract&quot;&gt;Abstract&lt;/h3&gt;

&lt;p&gt;There is no such thing as an impenetrable system, although the penetration of systems does get harder from year to year. The median days that intruders remained undetected on victim systems dropped from 416 days in 2010 down to 99 in 2016. Perhaps because of that, a new trend in security breaches is to compromise the forensic trail to allow the intruder to remain undetected for longer in victim systems and to retain valuable footholds for as long as possible. This paper proposes an immune system inspired solution which uses a more frequent regeneration of cloud application nodes to ensure that undetected compromised nodes can be purged. This makes it much harder for intruders to maintain a presence on victim systems. Basically the biological concept of cell-regeneration is combined with the information systems concept of append-only logs. Evaluation experiments performed on popular cloud service infrastructures (Amazon Web Services, Google Compute Engine, Azure and OpenStack) have shown that between 6 and 40 nodes of elastic container platforms can be regenerated per hour. Even a large cluster of 400 nodes could be regenerated in somewhere between 9 and 66 hours. So, regeneration shows the potential to reduce the foothold of undetected intruders from months to just hours.&lt;/p&gt;

&lt;h3 id=&quot;links&quot;&gt;Links&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.researchgate.net/publication/322577384&quot;&gt;Paper&lt;/a&gt; (ResearchGate)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/bibliography/Kra2018a.html&quot;&gt;Howto cite&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;panel-discussion&quot;&gt;Panel discussion&lt;/h2&gt;

&lt;h3 id=&quot;challenges-in-cloud-computing-based-systems&quot;&gt;Challenges in Cloud Computing-based Systems&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://www.slideshare.net/i21aneka/we-have-the-bricks-to-build-cloudnative-cathedrals-but-do-we-have-the-mortar&quot;&gt;
&lt;img src=&quot;/img/posts/CLOUD-COMPUTING-PANEL-2018.png&quot; width=&quot;45%&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;abstract-1&quot;&gt;Abstract&lt;/h3&gt;

&lt;p&gt;Cloud-native applications (CNA) are build more and more often according to microservice and &lt;a href=&quot;http://isa-principles.org/&quot;&gt;independent system architecture (ISA)&lt;/a&gt; approaches. ISA involves two architecture layers: the macro and the micro architecture layer. Software engineering outcomes on the micro layer are often distributed in a standardized form as self-contained deployment units (so called container images). There exist plenty of programming languages to implement these units: JAVA, C, C++, JavaScript, Python, R, PHP, Ruby, … (this list is almost endless). But on the macro layer, one might mention &lt;a href=&quot;http://docs.oasis-open.org/tosca/TOSCA/v1.0/TOSCA-v1.0.html&quot;&gt;TOSCA&lt;/a&gt; and little more. TOSCA is an OASIS deployment and orchestration standard language to describe a topology of cloud based web services, their components, relationships, and the processes that manage them. This works for static deployments. However, CNA are elastic, self-adaptive - almost the exact opposite of what can be defined efficiently using TOSCA. For these kind of scenarios one might mention &lt;a href=&quot;https://kubernetes.io/&quot;&gt;Kubernetes&lt;/a&gt; or &lt;a href=&quot;https://docs.docker.com/engine/swarm/&quot;&gt;Docker Swarm&lt;/a&gt; as container orchestrators which are intentionally build to operate elastic services formed of containers. But these operating platforms do not provide expressive and pragmatic programming languages covering the macro layer of cloud-native applications. So it seems there is a gap and the question arises, whether we need further (and what kind of) macro layer languages for CNA?&lt;/p&gt;

&lt;h2 id=&quot;panel-discussion-1&quot;&gt;Panel discussion&lt;/h2&gt;

&lt;h3 id=&quot;security-and-safety-in-cloud-based-systems-and-services&quot;&gt;Security and Safety in Cloud-based Systems and Services&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://www.slideshare.net/i21aneka/there-is-no-impenetrable-system-so-why-we-are-still-waiting-to-get-breached&quot;&gt;
&lt;img src=&quot;/img/posts/CLOUD-PANEL-II-2018.png&quot; width=&quot;45%&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;abstract-2&quot;&gt;Abstract&lt;/h3&gt;

&lt;p&gt;Although it might be hard to accept. By principle, attackers can establish footholds in our systems whenever they want (zero-day exploits). Cloud application security engineering efforts focus to harden the “fortress walls”. Therefore, cloud applications rely on these defensive walls but seldom attack intruders actively. There is the somehow the need for a more reactive component. A component that could be inspired by biological systems. Biological systems consider by design that defensive “walls” can be breached at several layers. So, biological systems provide an additional active defense system to attack potential successful intruders - an immune system. Although several experts find this approach “intriguing”, there are follow-up questions arising. What is about exploits that adapt to bio-inspired systems? How to protect the immune system against direct attacks? Are cloud immune systems prone to phenomenons like fever (running hot) or auto-immune diseases (self-attacking)?&lt;/p&gt;</content><author><name>Nane Kratzke</name></author><category term="blog" /><category term="paper" /><category term="cloud" /><category term="research" /><category term="cloudtransit" /><category term="container" /><category term="ecp" /><category term="kubernetes" /><category term="swarm" /><category term="docker" /><summary type="html">I am glad to contribute the following to the 9th International Conference on Cloud Computing, GRIDs, and Virtualization (CLOUD COMPUTING 2018) in Barcelona, Spain this February 2018.</summary></entry><entry><title type="html">Analyse und Optimierung von Software-Update-Verfahren</title><link href="http://www.nkode.io/thesis/2017/12/15/thesis-update-verfahren.html" rel="alternate" type="text/html" title="Analyse und Optimierung von Software-Update-Verfahren" /><published>2017-12-15T00:00:00+01:00</published><updated>2017-12-15T00:00:00+01:00</updated><id>http://www.nkode.io/thesis/2017/12/15/thesis-update-verfahren</id><content type="html" xml:base="http://www.nkode.io/thesis/2017/12/15/thesis-update-verfahren.html">&lt;p&gt;In dieser Arbeit geht es um sogenannte Patches für clientbasierte Software. Untersucht werden sollen bestehende Patchverfahren, die insbesondere bei Videospielen Anwendung finden.
Auf Basis dieser Untersuchungen sollen Optimierungen vorgeschlagen, implementiert
und evaluiert werden, die sich auf die folgenden Bereiche beziehen:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Speicherbedarf: Ein Patchverfahren sollte server- wie clientseitig möglichst wenig Speicher in Form vorzuhaltender Patches benötigen.&lt;/li&gt;
  &lt;li&gt;Datentransfer: Patchverfahren sollten möglichst wenig (Upstream wie Downstream) Datentransfer  erzeugen.&lt;/li&gt;
  &lt;li&gt;Geschwindigkeit: Patchverfahren sollten auf dem Zieldevice möglichst schnell durchgeführt werden können.&lt;/li&gt;
  &lt;li&gt;Sicherheit: Patchverfahren sollten hinsichtlich Manipulationen geschützt sein (z.B. sollte ein Spieler nicht Dateien veränderen, um sich daraus selbst einen unfairen Vorteil zu verschaffen, Verdopplung des Punktestands, etc.).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Es wird empfohlen folgendes &lt;a href=&quot;https://github.com/nkratzke/BAMA-Template&quot;&gt;Template&lt;/a&gt; zur Dokumentation der Bachelorarbeit von Anfang an zu berücksichtigen.&lt;/p&gt;

&lt;h2 id=&quot;aufgaben-dokumentation-und-outcomes&quot;&gt;Aufgaben, Dokumentation und Outcomes&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Analyse&lt;/strong&gt; und Dokumentation bestehender Patchverfahren,&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Ableiten&lt;/strong&gt; und Darstellung von Optimierungsmöglichkeiten im Bereich von Speicherbedarf, Datentransfer, Geschwindigkeit und Sicherheit&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Implementierung&lt;/strong&gt; von optimierten Patchverfahren,&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Leistungsermittlung&lt;/strong&gt; der implementierten Patchverfahren und vergleichende Gegenüberstellung der gemessenen Leistungsdaten&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Dokumentation&lt;/strong&gt; der oben dargestellten Schritte inklusive eines Fazits und Schlussfolgerungen sowie Empfehlungen zur Optimierung von Patch- und Updateverfahren.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Nane Kratzke</name></author><category term="thesis" /><summary type="html">In dieser Arbeit geht es um sogenannte Patches für clientbasierte Software. Untersucht werden sollen bestehende Patchverfahren, die insbesondere bei Videospielen Anwendung finden. Auf Basis dieser Untersuchungen sollen Optimierungen vorgeschlagen, implementiert und evaluiert werden, die sich auf die folgenden Bereiche beziehen:</summary></entry><entry><title type="html">Analysis of Face Recognition Capabilities by Example of a Mobile Web Game</title><link href="http://www.nkode.io/thesis/2017/12/12/thesis-face-recognition.html" rel="alternate" type="text/html" title="Analysis of Face Recognition Capabilities by Example of a Mobile Web Game" /><published>2017-12-12T00:00:00+01:00</published><updated>2017-12-12T00:00:00+01:00</updated><id>http://www.nkode.io/thesis/2017/12/12/thesis-face-recognition</id><content type="html" xml:base="http://www.nkode.io/thesis/2017/12/12/thesis-face-recognition.html">&lt;p&gt;This thesis shall identify face recognition, face tracking, and face gesture recognition libraries,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;summarize and categorize their features,&lt;/li&gt;
  &lt;li&gt;assess and compare their efficiency,&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;to develop and realize an interesting game concept that demonstrates face recognition capabilities of smartphones. The resulting web game should be executable in a modern mobile HTML5 web browser. The game is intended to be presented on fairs to demonstrate student outcomes of computer science students. The game will likely involve technologies like JavaScript, HTML, DOM-Tree, CSS and so on. The game should be realized as a single page web app. No server component should be necessary to operate the game.&lt;/p&gt;

&lt;p&gt;It is recommended to study and consider this &lt;a href=&quot;https://github.com/nkratzke/BAMA-Template&quot;&gt;template&lt;/a&gt; for thesis documentation from the very beginning.&lt;/p&gt;

&lt;h2 id=&quot;tasks-documentation-and-outcomes&quot;&gt;Tasks, Documentation and Outcomes&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Analyze&lt;/strong&gt; face recognition, face tracking, and face gesture recognition libraries,&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Compare&lt;/strong&gt; performance and efficiency of such kind of libraries,&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Summarize&lt;/strong&gt; features, opportunities and limitations of these libraries and derive an interesting game concpet that is playable on a wide range of mobile browsers on SmartPhones,&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Implementation&lt;/strong&gt; and documentation of the game&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Evaluation&lt;/strong&gt; of the game including typical software testing and user acceptance strategies&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Documentation&lt;/strong&gt; of the above mentioned steps. It is recommended to allign the documentation according to this &lt;a href=&quot;https://github.com/nkratzke/BAMA-Template&quot;&gt;Template&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Nane Kratzke</name></author><category term="thesis" /><category term="programming" /><category term="web" /><summary type="html">This thesis shall identify face recognition, face tracking, and face gesture recognition libraries,</summary></entry><entry><title type="html">Programming I (Winter 2017)</title><link href="http://www.nkode.io/lecture/2017/09/21/lecture-programming-i.html" rel="alternate" type="text/html" title="Programming I (Winter 2017)" /><published>2017-09-21T00:00:00+02:00</published><updated>2017-09-21T00:00:00+02:00</updated><id>http://www.nkode.io/lecture/2017/09/21/lecture-programming-i</id><content type="html" xml:base="http://www.nkode.io/lecture/2017/09/21/lecture-programming-i.html">&lt;p&gt;The course &lt;strong&gt;Programming I&lt;/strong&gt; is about fundamentals of programming for freshman students and covers fundamental concepts of programming.
JAVA is used as teaching language, nevertheless the principles are applicable to every (imperative or class based object oriented) programming language.
The course is given for &lt;em&gt;Computer Science&lt;/em&gt; students at the Lübeck University of Applied Sciences.
and covers the following aspects:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Fundamental concepts&lt;/strong&gt; of programming including &lt;strong&gt;programming paradigms&lt;/strong&gt; and &lt;strong&gt;runtime models&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Variables&lt;/strong&gt;, &lt;strong&gt;data types&lt;/strong&gt;, &lt;strong&gt;operators&lt;/strong&gt; and &lt;strong&gt;expressions&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Control flow&lt;/strong&gt; and &lt;strong&gt;routines&lt;/strong&gt; (functions, procedures, methods)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Reference data types&lt;/strong&gt; and &lt;strong&gt;collections&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;(Stream based) &lt;strong&gt;I/O programming&lt;/strong&gt; and &lt;strong&gt;serialization&lt;/strong&gt; of objects&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Recursive programming&lt;/strong&gt; and &lt;strong&gt;recursive datastructures&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Functional programming&lt;/strong&gt; using &lt;strong&gt;lambda functions&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Exception handling&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Introduction to &lt;strong&gt;object oriented programming&lt;/strong&gt; and &lt;strong&gt;UML&lt;/strong&gt; introducing fundamental concepts like &lt;strong&gt;abstraction&lt;/strong&gt;, &lt;strong&gt;encapsulation&lt;/strong&gt;, &lt;strong&gt;polymorphism&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;course-material-german-only&quot;&gt;Course Material (german only)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Lecture Unit 1: &lt;a href=&quot;/assets/ws2017/progI/Unit_01.pdf&quot;&gt;Core concepts of programming&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Lecture Unit 2: &lt;a href=&quot;/assets/ws2017/progI/Unit_02.pdf&quot;&gt;Fundamentals of imperative programming&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Lecture Unit 3: &lt;a href=&quot;/assets/ws2017/progI/Unit_03.pdf&quot;&gt;Reference data types and collections&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Lecture Unit 4: &lt;a href=&quot;/assets/ws2017/progI/Unit_04.pdf&quot;&gt;I/O programming, serialization&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Lecture Unit 5: &lt;a href=&quot;/assets/ws2017/progI/Unit_05.pdf&quot;&gt;Recursive and functional programming&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Lecture Unit 6: &lt;a href=&quot;/assets/ws2017/progI/Unit_06.pdf&quot;&gt;OO and UML&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Exercises: &lt;a href=&quot;/assets/ws2017/progI/excercises.pdf&quot;&gt;Catalogue of excercises&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Youtube Playlist: &lt;a href=&quot;https://www.youtube.com/playlist?list=PL06-G-mnBYTJ2QffB3jgjZH-1TVIwMDr8&quot;&gt;Excercises of WS2015/16 explained&lt;/a&gt; (thanks to &lt;strong&gt;Marco Torge Gabrecht&lt;/strong&gt; for providing this tremendous work)&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Nane Kratzke</name></author><category term="lecture" /><category term="java" /><category term="programming" /><summary type="html"></summary></entry><entry><title type="html">Introduction to Programming (Winter 2017)</title><link href="http://www.nkode.io/lecture/2017/09/21/introduction-to-prgramming.html" rel="alternate" type="text/html" title="Introduction to Programming (Winter 2017)" /><published>2017-09-21T00:00:00+02:00</published><updated>2017-09-21T00:00:00+02:00</updated><id>http://www.nkode.io/lecture/2017/09/21/introduction-to-prgramming</id><content type="html" xml:base="http://www.nkode.io/lecture/2017/09/21/introduction-to-prgramming.html">&lt;p&gt;This course provides an introduction into programming for freshman students and teaches a fundamental understanding of programming.
JAVA is used as teaching language, nevertheless the principles are applicable to every (imperative or class based object oriented) programming language.&lt;/p&gt;

&lt;p&gt;This course is given for &lt;em&gt;Information Technology and Design&lt;/em&gt; students at the Lübeck University of Applied Sciences
and will cover following aspects:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Fundamental concepts&lt;/strong&gt; of programming including &lt;strong&gt;programming paradigms&lt;/strong&gt; and &lt;strong&gt;runtime models&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Variables&lt;/strong&gt;, &lt;strong&gt;data types&lt;/strong&gt;, &lt;strong&gt;operators&lt;/strong&gt; and &lt;strong&gt;expressions&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Control flow&lt;/strong&gt; and &lt;strong&gt;routines&lt;/strong&gt; (functions, procedures, methods)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Reference data types&lt;/strong&gt; and &lt;strong&gt;collections&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;(Stream based) &lt;strong&gt;I/O programming&lt;/strong&gt; and &lt;strong&gt;serialization&lt;/strong&gt; of objects&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Recursive programming&lt;/strong&gt; and &lt;strong&gt;datastructures&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;course-material-german-only&quot;&gt;Course Material (german only)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Lecture Unit 1: &lt;a href=&quot;/assets/ws2017/progI/Unit_01.pdf&quot;&gt;Core concepts of programming&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Lecture Unit 2: &lt;a href=&quot;/assets/ws2017/progI/Unit_02.pdf&quot;&gt;Fundamentals of imperative programming&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Lecture Unit 3: &lt;a href=&quot;/assets/ws2017/progI/Unit_03.pdf&quot;&gt;Reference data types and collections&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Lecture Unit 4: &lt;a href=&quot;/assets/ws2017/progI/Unit_04.pdf&quot;&gt;I/O programming, serialization&lt;/a&gt; (skipped, just for self study)&lt;/li&gt;
  &lt;li&gt;Lecture Unit 5: &lt;a href=&quot;/assets/ws2017/progI/Unit_05.pdf&quot;&gt;Recursive programming&lt;/a&gt; (functional programming skipped, just for self study)&lt;/li&gt;
  &lt;li&gt;Exercises: &lt;a href=&quot;/assets/ws2017/progI/excercises.pdf&quot;&gt;Catalogue of excercises&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Youtube Playlist: &lt;a href=&quot;https://www.youtube.com/playlist?list=PL06-G-mnBYTJ2QffB3jgjZH-1TVIwMDr8&quot;&gt;Excercises of WS2015/16 explained&lt;/a&gt; (thanks to &lt;strong&gt;Marco Torge Gabrecht&lt;/strong&gt; for providing this tremendous work)&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Nane Kratzke</name></author><category term="lecture" /><category term="java" /><category term="programming" /><summary type="html"></summary></entry><entry><title type="html">A List of Serverless Frameworks</title><link href="http://www.nkode.io/2017/09/12/serverless-frameworks.html" rel="alternate" type="text/html" title="A List of Serverless Frameworks" /><published>2017-09-12T00:00:00+02:00</published><updated>2017-09-12T00:00:00+02:00</updated><id>http://www.nkode.io/2017/09/12/serverless-frameworks</id><content type="html" xml:base="http://www.nkode.io/2017/09/12/serverless-frameworks.html">&lt;p&gt;Serverless computing is a cloud computing execution model in which the the allocation of machine resources is dynamically managed. There is a good blog bost by Mike Roberts on &lt;a href=&quot;https://martinfowler.com/articles/serverless.html&quot;&gt;serverless architectures&lt;/a&gt; for the interested reader. “Serverless computing” is misleading to some degree. Obviously servers are still needed, but the term “serverless” is used because the server management and capacity planning decisions are completely hidden from the developer or operator. Serverless code can be used in conjunction with code deployed in more traditional styles, such as microservices. However, applications can be written to be purely serverless as well.&lt;/p&gt;

&lt;p&gt;There are very well curated link lists dealing with serverless computing in general like &lt;a href=&quot;https://github.com/anaibol/awesome-serverless&quot;&gt;Awesome serverless&lt;/a&gt;. However, this blog post would like to concentrate only on the frameworks. The main intent is to curate a list of open source serverless frameworks over time. If you think some framework is missing do not hesitate to &lt;a href=&quot;mailto:nane.kratzke@fh-luebeck.de&quot;&gt;propose&lt;/a&gt; it.&lt;/p&gt;

&lt;h2 id=&quot;public-commercial-serverless-services&quot;&gt;Public (commercial) serverless services&lt;/h2&gt;

&lt;p&gt;Most public cloud service providers offer compute runtimes, also known as function as a service (FaaS) platforms. Here are some well known type representatives.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.google.com/appengine/&quot;&gt;Google App Engine&lt;/a&gt; (one of the first commercially successfull solutions, however App Engine relies on a custom Python framework.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/de/lambda/&quot;&gt;AWS Lambda&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.google.com/functions/&quot;&gt;Google Cloud Functions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://azure.microsoft.com/en-us/services/functions/&quot;&gt;Azure Functions&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;open-source-serverless-platforms&quot;&gt;Open (source) serverless platforms&lt;/h2&gt;

&lt;p&gt;All of the mentioned commercial serverless computing models are prone to create vendor lock-in (to some degree). Therefore, open source serverless frameworks might be an alternative with the downside that the infrastructure must be operated. Obviously these frameworks need platforms or infrastructures to be executed on.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/nuclio/nuclio&quot;&gt;nuclio&lt;/a&gt; - High-Performance Serverless event and data processing framework (added 24. Oct 2017)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://fnproject.io/&quot;&gt;Fn project&lt;/a&gt; - The Fn project is a container native serverless platform. It supports every programming language. (added 3. Oct 2017)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://openwhisk.incubator.apache.org/&quot;&gt;OpenWhisk&lt;/a&gt; by Apache includes native support for Node.js, Python, Java, and Swift, and supports other languages and runtime via Docker containers. (added 12. Sep 2017)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://kubeless.io/&quot;&gt;Kubeless&lt;/a&gt;, a serverless framework for Kubernetes. (added 12. Sep 2017)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://fission.io/&quot;&gt;Fission&lt;/a&gt;, another serverless framework for Kubernetes, supporting Python, NodeJS, Go, C#, and PHP. (added 12. Sep 2017)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://funktion.fabric8.io/&quot;&gt;Funktion&lt;/a&gt;, an event-based lambda programming environment for Kubernetes. (added 12. Sep 2017)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/alexellis/faas&quot;&gt;Functions as a Service (OpenFaaS)&lt;/a&gt; - a serverless framework for Docker &amp;amp; Kubernetes (added 12. Sep 2017)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/iron-io/functions&quot;&gt;IronFunctions&lt;/a&gt; - the serverless microservices platform (added 12. Sep 2017)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-function&quot;&gt;SpringCloud Functions&lt;/a&gt; - the serverless approach of Spring (added 12. Sep 2017)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This list is likely not complete. If you know further serverless platforms do not hesitate to contact me.&lt;/p&gt;

&lt;h2 id=&quot;provider-agnostic-serverless-frameworks&quot;&gt;Provider agnostic serverless frameworks&lt;/h2&gt;

&lt;p&gt;While serverless platforms need infrastructures to be executed on, provider agnostic serverless frameworks provide a provider and platform agnostic way to define and deploy serverless code on various serverless platforms or commercial serverless services. This is an option to avoid (or reduce) vendor lock-in without the necessity to operate an own infrastructure.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://serverless.com/&quot;&gt;Serverless Framework&lt;/a&gt; (added 13. Sep 2017)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://squeezer.io&quot;&gt;Squeezer Framework&lt;/a&gt; (added 13. Sep 2017)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This list is likely not complete. If you know further provider agnostic serverless frameworks do not hesitate to contact me.&lt;/p&gt;</content><author><name>Nane Kratzke,</name></author><category term="blog" /><category term="cloud" /><category term="serverless" /><category term="frameworks" /><category term="programming" /><category term="game" /><summary type="html">Serverless computing is a cloud computing execution model in which the the allocation of machine resources is dynamically managed. There is a good blog bost by Mike Roberts on serverless architectures for the interested reader. “Serverless computing” is misleading to some degree. Obviously servers are still needed, but the term “serverless” is used because the server management and capacity planning decisions are completely hidden from the developer or operator. Serverless code can be used in conjunction with code deployed in more traditional styles, such as microservices. However, applications can be written to be purely serverless as well.</summary></entry><entry><title type="html">And the winner is … Dynamite Man</title><link href="http://www.nkode.io/2017/07/24/And-the-winner-is-Dynamite-Man.html" rel="alternate" type="text/html" title="And the winner is ... Dynamite Man" /><published>2017-07-24T00:00:00+02:00</published><updated>2017-07-24T00:00:00+02:00</updated><id>http://www.nkode.io/2017/07/24/And-the-winner-is-Dynamite-Man</id><content type="html" xml:base="http://www.nkode.io/2017/07/24/And-the-winner-is-Dynamite-Man.html">&lt;p&gt;One more time we had some fun this summer semester &lt;a href=&quot;/lecture/2017/06/15/lecture-webtech.html&quot;&gt;webtechnology course&lt;/a&gt;. 
My students implemented several classical games as &lt;a href=&quot;https://www.dartlang.org/&quot;&gt;Dart&lt;/a&gt; single page HTML ‘apps’.
And these three games (of 18 game submissions) entered the &lt;a href=&quot;/assets/webtech-hall-of-fame/index.html&quot;&gt;Webtech Hall of Fame&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;#1: &lt;a href=&quot;/assets/ss2017/webtech/games/team-04-dynamite-man/web/index.html&quot;&gt;Dynamite Man&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;#2: &lt;a href=&quot;/assets/ss2017/webtech/games/team-07-ninja-swap/web/index.html&quot;&gt;Ninja Swap&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;#3: &lt;a href=&quot;/assets/ss2017/webtech/games/team-06-star-speeder/web/index.html&quot;&gt;Star Speeder&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Congratulations.&lt;/p&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;2048px&quot; src=&quot;/assets/webtech-hall-of-fame/index.html&quot;&gt;Uupps, your browser does not support iframes.&lt;iframe&gt;
&lt;/iframe&gt;&lt;/iframe&gt;</content><author><name>Nane Kratzke,</name></author><category term="blog" /><summary type="html">One more time we had some fun this summer semester webtechnology course. My students implemented several classical games as Dart single page HTML ‘apps’. And these three games (of 18 game submissions) entered the Webtech Hall of Fame.</summary></entry><entry><title type="html">Web Technologies (Summer 2017)</title><link href="http://www.nkode.io/lecture/2017/06/15/lecture-webtech.html" rel="alternate" type="text/html" title="Web Technologies (Summer 2017)" /><published>2017-06-15T00:00:00+02:00</published><updated>2017-06-15T00:00:00+02:00</updated><id>http://www.nkode.io/lecture/2017/06/15/lecture-webtech</id><content type="html" xml:base="http://www.nkode.io/lecture/2017/06/15/lecture-webtech.html">&lt;p&gt;This project is about common technologies used to build (part) of web information systems.
The project course is given for students
at Lübeck University of Applied Sciences (in german language).
The course covers following aspects:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;descriptional languages&lt;/strong&gt; for web content like &lt;a href=&quot;http://www.w3.org/html/&quot;&gt;HTML&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;presentational languages&lt;/strong&gt; for web content like &lt;a href=&quot;http://www.w3.org/Style/CSS/&quot;&gt;CSS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Document Object Model&lt;/strong&gt; (DOM)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;client and server side programming&lt;/strong&gt; with &lt;a href=&quot;https://www.dartlang.org&quot;&gt;Dart&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;security aspects&lt;/strong&gt; like &lt;em&gt;HTML injections&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Students apply their intensified web programming skills by developing
a small one person, DOM-tree based (that means not canvas based)
online game like &lt;em&gt;Tetris&lt;/em&gt; or &lt;em&gt;Boulder Dash&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;course-material-german-only&quot;&gt;Course Material (german only)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;HTML Unit: &lt;a href=&quot;/assets/ss2017/webtech/webtech-html-css.pdf&quot;&gt;HTML and CSS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Dart Unit: &lt;a href=&quot;/assets/ss2017/webtech/webtech-dart-i.pdf&quot;&gt;Part 1&lt;/a&gt;, &lt;a href=&quot;/assets/ss2017/webtech/webtech-dart-ii.pdf&quot;&gt;Part 2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;REST and HTTP Unit: &lt;a href=&quot;/assets/ss2017/webtech/webtech-http-rest.pdf&quot;&gt;REST&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;An exemplary reference game: &lt;a href=&quot;https://github.com/nkratzke/dartsnake&quot;&gt;SnakeDart&lt;/a&gt; (another game has to be developped using Dart)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;game-outcomes&quot;&gt;Game outcomes&lt;/h2&gt;

&lt;p&gt;20 Teams started this project. These teams plan to finish the following announced games. Playable game outcomes will be linked here. So, stay tuned.&lt;/p&gt;

&lt;p&gt;Be aware, this semester mobile games have to be implemented. So, some of the following games may be only working in mobile devices (due to necessarry 3D orientation or geolocation capabilities). However, most of the announced games should be playable on desktop browsers as well.&lt;/p&gt;

&lt;h3 id=&quot;group-a&quot;&gt;Group A&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Team 1: &lt;a href=&quot;/assets/ss2017/webtech/games/team-01-ctb/web/start.html&quot;&gt;Catch the Ballz&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Team 2: &lt;a href=&quot;/assets/ss2017/webtech/games/team-02-running-man/web/index.html&quot;&gt;Running Man&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Team 3: &lt;a href=&quot;/assets/ss2017/webtech/games/team-03-tetris/web/index.html&quot;&gt;Tetris&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Team 4: &lt;a href=&quot;/assets/ss2017/webtech/games/team-04-dynamite-man/web/index.html&quot;&gt;Dynamite Man&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Team 5: &lt;a href=&quot;/assets/ss2017/webtech/games/team-05-schfel-space/web/index.html&quot;&gt;SchFel Space (Invader)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;group-b&quot;&gt;Group B&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Team 6: &lt;a href=&quot;/assets/ss2017/webtech/games/team-06-star-speeder/web/index.html&quot;&gt;Star Speeder&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Team 7: &lt;a href=&quot;/assets/ss2017/webtech/games/team-07-ninja-swap/web/index.html&quot;&gt;Ninja Swap&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Team 8: &lt;a href=&quot;/assets/ss2017/webtech/games/team-08-tower-defence/web/index.html&quot;&gt;Tower Defence&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Team 9: &lt;a href=&quot;/assets/ss2017/webtech/games/team-09-simdart/web/index.html&quot;&gt;Simdart&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Team 10: &lt;a href=&quot;/assets/ss2017/webtech/games/team-10-sudoku/web/index.html&quot;&gt;Sudoku&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;group-c&quot;&gt;Group C&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Team 11: &lt;a href=&quot;/assets/ss2017/webtech/games/team-11-drops/web/index.html&quot;&gt;Drops&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Team 12: &lt;a href=&quot;/assets/ss2017/webtech/games/team-12-conway-wars/web/index.html&quot;&gt;Conway Wars&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Team 13: Space Combat Game &lt;strong&gt;(team surrendered)&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Team 14: A.R.S.S. [Another Random Space Shooter] &lt;strong&gt;(team surrendered)&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Team 15: &lt;a href=&quot;/assets/ss2017/webtech/games/team-15-breakout/web/index.html&quot;&gt;Break Out&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Team 16: &lt;a href=&quot;/assets/ss2017/webtech/games/team-16-flappydart/web/index.html&quot;&gt;Flappy Dart&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;group-d&quot;&gt;Group D&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Team 17: &lt;a href=&quot;/assets/ss2017/webtech/games/team-17-tombrunner/web/index.html&quot;&gt;TOMB Runner&lt;/a&gt; &lt;em&gt;sadly, this game has a severe bug … :-(&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Team 18: &lt;a href=&quot;/assets/ss2017/webtech/games/team-18-frogger/web/index.html&quot;&gt;Frogger&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Team 19: &lt;a href=&quot;/assets/ss2017/webtech/games/team-19-memory/web/index.html&quot;&gt;Memory&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Team 20: &lt;a href=&quot;/assets/ss2017/webtech/games/team-20-dartfall/web/index.html&quot;&gt;Dartfall&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Nane Kratzke</name></author><category term="web" /><category term="lecture" /><category term="database" /><category term="html" /><category term="css" /><category term="dart" /><category term="programming" /><category term="rest" /><category term="http" /><summary type="html"></summary></entry></feed>