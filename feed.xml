<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-12-18T08:51:00+01:00</updated><id>http://localhost:4000/</id><title type="html">nkode.io</title><subtitle>A blog about programming, data, cloud computing, and web scale systems</subtitle><entry><title type="html">Analyse und Optimierung von Software-Update-Verfahren</title><link href="http://localhost:4000/thesis/2017/12/15/thesis-update-verfahren.html" rel="alternate" type="text/html" title="Analyse und Optimierung von Software-Update-Verfahren" /><published>2017-12-15T00:00:00+01:00</published><updated>2017-12-15T00:00:00+01:00</updated><id>http://localhost:4000/thesis/2017/12/15/thesis-update-verfahren</id><content type="html" xml:base="http://localhost:4000/thesis/2017/12/15/thesis-update-verfahren.html">&lt;p&gt;In dieser Arbeit geht es um sogenannte Patches für clientbasierte Software. Untersucht werden sollen bestehende Patchverfahren, die insbesondere bei Videospielen Anwendung finden.
Auf Basis dieser Untersuchungen sollen Optimierungen vorgeschlagen, implementiert
und evaluiert werden, die sich auf die folgenden Bereiche beziehen:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Speicherbedarf: Ein Patchverfahren sollte server- wie clientseitig möglichst wenig Speicher in Form vorzuhaltender Patches benötigen.&lt;/li&gt;
  &lt;li&gt;Datentransfer: Patchverfahren sollten möglichst wenig (Upstream wie Downstream) Datentransfer  erzeugen.&lt;/li&gt;
  &lt;li&gt;Geschwindigkeit: Patchverfahren sollten auf dem Zieldevice möglichst schnell durchgeführt werden können.&lt;/li&gt;
  &lt;li&gt;Sicherheit: Patchverfahren sollten hinsichtlich Manipulationen geschützt sein (z.B. sollte ein Spieler nicht Dateien veränderen, um sich daraus selbst einen unfairen Vorteil zu verschaffen, Verdopplung des Punktestands, etc.).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Es wird empfohlen folgendes &lt;a href=&quot;https://github.com/nkratzke/BAMA-Template&quot;&gt;Template&lt;/a&gt; zur Dokumentation der Bachelorarbeit von Anfang an zu berücksichtigen.&lt;/p&gt;

&lt;h2 id=&quot;aufgaben-dokumentation-und-outcomes&quot;&gt;Aufgaben, Dokumentation und Outcomes&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Analyse&lt;/strong&gt; und Dokumentation bestehender Patchverfahren,&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Ableiten&lt;/strong&gt; und Darstellung von Optimierungsmöglichkeiten im Bereich von Speicherbedarf, Datentransfer, Geschwindigkeit und Sicherheit&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Implementierung&lt;/strong&gt; von optimierten Patchverfahren,&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Leistungsermittlung&lt;/strong&gt; der implementierten Patchverfahren und vergleichende Gegenüberstellung der gemessenen Leistungsdaten&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Dokumentation&lt;/strong&gt; der oben dargestellten Schritte inklusive eines Fazits und Schlussfolgerungen sowie Empfehlungen zur Optimierung von Patch- und Updateverfahren.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Nane Kratzke</name></author><category term="thesis" /><summary type="html">In dieser Arbeit geht es um sogenannte Patches für clientbasierte Software. Untersucht werden sollen bestehende Patchverfahren, die insbesondere bei Videospielen Anwendung finden. Auf Basis dieser Untersuchungen sollen Optimierungen vorgeschlagen, implementiert und evaluiert werden, die sich auf die folgenden Bereiche beziehen:</summary></entry><entry><title type="html">Analysis of Face Recognition Capabilities by Example of a Mobile Web Game</title><link href="http://localhost:4000/thesis/2017/12/12/thesis-face-recognition.html" rel="alternate" type="text/html" title="Analysis of Face Recognition Capabilities by Example of a Mobile Web Game" /><published>2017-12-12T00:00:00+01:00</published><updated>2017-12-12T00:00:00+01:00</updated><id>http://localhost:4000/thesis/2017/12/12/thesis-face-recognition</id><content type="html" xml:base="http://localhost:4000/thesis/2017/12/12/thesis-face-recognition.html">&lt;p&gt;This thesis shall identify face recognition, face tracking, and face gesture recognition libraries,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;summarize and categorize their features,&lt;/li&gt;
  &lt;li&gt;assess and compare their efficiency,&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;to develop and realize an interesting game concept that demonstrates face recognition capabilities of smartphones. The resulting web game should be executable in a modern mobile HTML5 web browser. The game is intended to be presented on fairs to demonstrate student outcomes of computer science students. The game will likely involve technologies like JavaScript, HTML, DOM-Tree, CSS and so on. The game should be realized as a single page web app. No server component should be necessary to operate the game.&lt;/p&gt;

&lt;p&gt;It is recommended to study and consider this &lt;a href=&quot;https://github.com/nkratzke/BAMA-Template&quot;&gt;template&lt;/a&gt; for thesis documentation from the very beginning.&lt;/p&gt;

&lt;h2 id=&quot;tasks-documentation-and-outcomes&quot;&gt;Tasks, Documentation and Outcomes&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Analyze&lt;/strong&gt; face recognition, face tracking, and face gesture recognition libraries,&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Compare&lt;/strong&gt; performance and efficiency of such kind of libraries,&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Summarize&lt;/strong&gt; features, opportunities and limitations of these libraries and derive an interesting game concpet that is playable on a wide range of mobile browsers on SmartPhones,&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Implementation&lt;/strong&gt; and documentation of the game&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Evaluation&lt;/strong&gt; of the game including typical software testing and user acceptance strategies&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Documentation&lt;/strong&gt; of the above mentioned steps. It is recommended to allign the documentation according to this &lt;a href=&quot;https://github.com/nkratzke/BAMA-Template&quot;&gt;Template&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Nane Kratzke</name></author><category term="thesis" /><category term="programming" /><category term="web" /><summary type="html">This thesis shall identify face recognition, face tracking, and face gesture recognition libraries,</summary></entry><entry><title type="html">Programming I (Winter 2017)</title><link href="http://localhost:4000/lecture/2017/09/21/lecture-programming-i.html" rel="alternate" type="text/html" title="Programming I (Winter 2017)" /><published>2017-09-21T00:00:00+02:00</published><updated>2017-09-21T00:00:00+02:00</updated><id>http://localhost:4000/lecture/2017/09/21/lecture-programming-i</id><content type="html" xml:base="http://localhost:4000/lecture/2017/09/21/lecture-programming-i.html">&lt;p&gt;The course &lt;strong&gt;Programming I&lt;/strong&gt; is about fundamentals of programming for freshman students and covers fundamental concepts of programming.
JAVA is used as teaching language, nevertheless the principles are applicable to every (imperative or class based object oriented) programming language.
The course is given for &lt;em&gt;Computer Science&lt;/em&gt; students at the Lübeck University of Applied Sciences.
and covers the following aspects:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Fundamental concepts&lt;/strong&gt; of programming including &lt;strong&gt;programming paradigms&lt;/strong&gt; and &lt;strong&gt;runtime models&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Variables&lt;/strong&gt;, &lt;strong&gt;data types&lt;/strong&gt;, &lt;strong&gt;operators&lt;/strong&gt; and &lt;strong&gt;expressions&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Control flow&lt;/strong&gt; and &lt;strong&gt;routines&lt;/strong&gt; (functions, procedures, methods)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Reference data types&lt;/strong&gt; and &lt;strong&gt;collections&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;(Stream based) &lt;strong&gt;I/O programming&lt;/strong&gt; and &lt;strong&gt;serialization&lt;/strong&gt; of objects&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Recursive programming&lt;/strong&gt; and &lt;strong&gt;recursive datastructures&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Functional programming&lt;/strong&gt; using &lt;strong&gt;lambda functions&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Exception handling&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Introduction to &lt;strong&gt;object oriented programming&lt;/strong&gt; and &lt;strong&gt;UML&lt;/strong&gt; introducing fundamental concepts like &lt;strong&gt;abstraction&lt;/strong&gt;, &lt;strong&gt;encapsulation&lt;/strong&gt;, &lt;strong&gt;polymorphism&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;course-material-german-only&quot;&gt;Course Material (german only)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Lecture Unit 1: &lt;a href=&quot;/assets/ws2017/progI/Unit_01.pdf&quot;&gt;Core concepts of programming&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Lecture Unit 2: &lt;a href=&quot;/assets/ws2017/progI/Unit_02.pdf&quot;&gt;Fundamentals of imperative programming&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Lecture Unit 3: &lt;a href=&quot;/assets/ws2017/progI/Unit_03.pdf&quot;&gt;Reference data types and collections&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Lecture Unit 4: &lt;a href=&quot;/assets/ws2017/progI/Unit_04.pdf&quot;&gt;I/O programming, serialization&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Lecture Unit 5: &lt;a href=&quot;/assets/ws2017/progI/Unit_05.pdf&quot;&gt;Recursive and functional programming&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Lecture Unit 6: &lt;a href=&quot;/assets/ws2017/progI/Unit_06.pdf&quot;&gt;OO and UML&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Exercises: &lt;a href=&quot;/assets/ws2017/progI/excercises.pdf&quot;&gt;Catalogue of excercises&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Youtube Playlist: &lt;a href=&quot;https://www.youtube.com/playlist?list=PL06-G-mnBYTJ2QffB3jgjZH-1TVIwMDr8&quot;&gt;Excercises of WS2015/16 explained&lt;/a&gt; (thanks to &lt;strong&gt;Marco Torge Gabrecht&lt;/strong&gt; for providing this tremendous work)&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Nane Kratzke</name></author><category term="lecture" /><category term="java" /><category term="programming" /><summary type="html"></summary></entry><entry><title type="html">Introduction to Programming (Winter 2017)</title><link href="http://localhost:4000/lecture/2017/09/21/introduction-to-prgramming.html" rel="alternate" type="text/html" title="Introduction to Programming (Winter 2017)" /><published>2017-09-21T00:00:00+02:00</published><updated>2017-09-21T00:00:00+02:00</updated><id>http://localhost:4000/lecture/2017/09/21/introduction-to-prgramming</id><content type="html" xml:base="http://localhost:4000/lecture/2017/09/21/introduction-to-prgramming.html">&lt;p&gt;This course provides an introduction into programming for freshman students and teaches a fundamental understanding of programming.
JAVA is used as teaching language, nevertheless the principles are applicable to every (imperative or class based object oriented) programming language.&lt;/p&gt;

&lt;p&gt;This course is given for &lt;em&gt;Information Technology and Design&lt;/em&gt; students at the Lübeck University of Applied Sciences
and will cover following aspects:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Fundamental concepts&lt;/strong&gt; of programming including &lt;strong&gt;programming paradigms&lt;/strong&gt; and &lt;strong&gt;runtime models&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Variables&lt;/strong&gt;, &lt;strong&gt;data types&lt;/strong&gt;, &lt;strong&gt;operators&lt;/strong&gt; and &lt;strong&gt;expressions&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Control flow&lt;/strong&gt; and &lt;strong&gt;routines&lt;/strong&gt; (functions, procedures, methods)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Reference data types&lt;/strong&gt; and &lt;strong&gt;collections&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;(Stream based) &lt;strong&gt;I/O programming&lt;/strong&gt; and &lt;strong&gt;serialization&lt;/strong&gt; of objects&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Recursive programming&lt;/strong&gt; and &lt;strong&gt;datastructures&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;course-material-german-only&quot;&gt;Course Material (german only)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Lecture Unit 1: &lt;a href=&quot;/assets/ws2017/progI/Unit_01.pdf&quot;&gt;Core concepts of programming&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Lecture Unit 2: &lt;a href=&quot;/assets/ws2017/progI/Unit_02.pdf&quot;&gt;Fundamentals of imperative programming&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Lecture Unit 3: &lt;a href=&quot;/assets/ws2017/progI/Unit_03.pdf&quot;&gt;Reference data types and collections&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Lecture Unit 4: &lt;a href=&quot;/assets/ws2017/progI/Unit_04.pdf&quot;&gt;I/O programming, serialization&lt;/a&gt; (skipped, just for self study)&lt;/li&gt;
  &lt;li&gt;Lecture Unit 5: &lt;a href=&quot;/assets/ws2017/progI/Unit_05.pdf&quot;&gt;Recursive programming&lt;/a&gt; (functional programming skipped, just for self study)&lt;/li&gt;
  &lt;li&gt;Exercises: &lt;a href=&quot;/assets/ws2017/progI/excercises.pdf&quot;&gt;Catalogue of excercises&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Youtube Playlist: &lt;a href=&quot;https://www.youtube.com/playlist?list=PL06-G-mnBYTJ2QffB3jgjZH-1TVIwMDr8&quot;&gt;Excercises of WS2015/16 explained&lt;/a&gt; (thanks to &lt;strong&gt;Marco Torge Gabrecht&lt;/strong&gt; for providing this tremendous work)&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Nane Kratzke</name></author><category term="lecture" /><category term="java" /><category term="programming" /><summary type="html"></summary></entry><entry><title type="html">A List of Serverless Frameworks</title><link href="http://localhost:4000/2017/09/12/serverless-frameworks.html" rel="alternate" type="text/html" title="A List of Serverless Frameworks" /><published>2017-09-12T00:00:00+02:00</published><updated>2017-09-12T00:00:00+02:00</updated><id>http://localhost:4000/2017/09/12/serverless-frameworks</id><content type="html" xml:base="http://localhost:4000/2017/09/12/serverless-frameworks.html">&lt;p&gt;Serverless computing is a cloud computing execution model in which the the allocation of machine resources is dynamically managed. There is a good blog bost by Mike Roberts on &lt;a href=&quot;https://martinfowler.com/articles/serverless.html&quot;&gt;serverless architectures&lt;/a&gt; for the interested reader. “Serverless computing” is misleading to some degree. Obviously servers are still needed, but the term “serverless” is used because the server management and capacity planning decisions are completely hidden from the developer or operator. Serverless code can be used in conjunction with code deployed in more traditional styles, such as microservices. However, applications can be written to be purely serverless as well.&lt;/p&gt;

&lt;p&gt;There are very well curated link lists dealing with serverless computing in general like &lt;a href=&quot;https://github.com/anaibol/awesome-serverless&quot;&gt;Awesome serverless&lt;/a&gt;. However, this blog post would like to concentrate only on the frameworks. The main intent is to curate a list of open source serverless frameworks over time. If you think some framework is missing do not hesitate to &lt;a href=&quot;mailto:nane.kratzke@fh-luebeck.de&quot;&gt;propose&lt;/a&gt; it.&lt;/p&gt;

&lt;h2 id=&quot;public-commercial-serverless-services&quot;&gt;Public (commercial) serverless services&lt;/h2&gt;

&lt;p&gt;Most public cloud service providers offer compute runtimes, also known as function as a service (FaaS) platforms. Here are some well known type representatives.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.google.com/appengine/&quot;&gt;Google App Engine&lt;/a&gt; (one of the first commercially successfull solutions, however App Engine relies on a custom Python framework.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/de/lambda/&quot;&gt;AWS Lambda&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.google.com/functions/&quot;&gt;Google Cloud Functions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://azure.microsoft.com/en-us/services/functions/&quot;&gt;Azure Functions&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;open-source-serverless-platforms&quot;&gt;Open (source) serverless platforms&lt;/h2&gt;

&lt;p&gt;All of the mentioned commercial serverless computing models are prone to create vendor lock-in (to some degree). Therefore, open source serverless frameworks might be an alternative with the downside that the infrastructure must be operated. Obviously these frameworks need platforms or infrastructures to be executed on.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/nuclio/nuclio&quot;&gt;nuclio&lt;/a&gt; - High-Performance Serverless event and data processing framework (added 24. Oct 2017)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://fnproject.io/&quot;&gt;Fn project&lt;/a&gt; - The Fn project is a container native serverless platform. It supports every programming language. (added 3. Oct 2017)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://openwhisk.incubator.apache.org/&quot;&gt;OpenWhisk&lt;/a&gt; by Apache includes native support for Node.js, Python, Java, and Swift, and supports other languages and runtime via Docker containers. (added 12. Sep 2017)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://kubeless.io/&quot;&gt;Kubeless&lt;/a&gt;, a serverless framework for Kubernetes. (added 12. Sep 2017)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://fission.io/&quot;&gt;Fission&lt;/a&gt;, another serverless framework for Kubernetes, supporting Python, NodeJS, Go, C#, and PHP. (added 12. Sep 2017)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://funktion.fabric8.io/&quot;&gt;Funktion&lt;/a&gt;, an event-based lambda programming environment for Kubernetes. (added 12. Sep 2017)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/alexellis/faas&quot;&gt;Functions as a Service (OpenFaaS)&lt;/a&gt; - a serverless framework for Docker &amp;amp; Kubernetes (added 12. Sep 2017)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/iron-io/functions&quot;&gt;IronFunctions&lt;/a&gt; - the serverless microservices platform (added 12. Sep 2017)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-function&quot;&gt;SpringCloud Functions&lt;/a&gt; - the serverless approach of Spring (added 12. Sep 2017)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This list is likely not complete. If you know further serverless platforms do not hesitate to contact me.&lt;/p&gt;

&lt;h2 id=&quot;provider-agnostic-serverless-frameworks&quot;&gt;Provider agnostic serverless frameworks&lt;/h2&gt;

&lt;p&gt;While serverless platforms need infrastructures to be executed on, provider agnostic serverless frameworks provide a provider and platform agnostic way to define and deploy serverless code on various serverless platforms or commercial serverless services. This is an option to avoid (or reduce) vendor lock-in without the necessity to operate an own infrastructure.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://serverless.com/&quot;&gt;Serverless Framework&lt;/a&gt; (added 13. Sep 2017)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://squeezer.io&quot;&gt;Squeezer Framework&lt;/a&gt; (added 13. Sep 2017)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This list is likely not complete. If you know further provider agnostic serverless frameworks do not hesitate to contact me.&lt;/p&gt;</content><author><name>Nane Kratzke,</name></author><category term="blog" /><category term="cloud" /><category term="serverless" /><category term="frameworks" /><category term="programming" /><category term="game" /><summary type="html">Serverless computing is a cloud computing execution model in which the the allocation of machine resources is dynamically managed. There is a good blog bost by Mike Roberts on serverless architectures for the interested reader. “Serverless computing” is misleading to some degree. Obviously servers are still needed, but the term “serverless” is used because the server management and capacity planning decisions are completely hidden from the developer or operator. Serverless code can be used in conjunction with code deployed in more traditional styles, such as microservices. However, applications can be written to be purely serverless as well.</summary></entry><entry><title type="html">And the winner is … Dynamite Man</title><link href="http://localhost:4000/2017/07/24/And-the-winner-is-Dynamite-Man.html" rel="alternate" type="text/html" title="And the winner is ... Dynamite Man" /><published>2017-07-24T00:00:00+02:00</published><updated>2017-07-24T00:00:00+02:00</updated><id>http://localhost:4000/2017/07/24/And-the-winner-is-Dynamite-Man</id><content type="html" xml:base="http://localhost:4000/2017/07/24/And-the-winner-is-Dynamite-Man.html">&lt;p&gt;One more time we had some fun this summer semester &lt;a href=&quot;/lecture/2017/06/15/lecture-webtech.html&quot;&gt;webtechnology course&lt;/a&gt;. 
My students implemented several classical games as &lt;a href=&quot;https://www.dartlang.org/&quot;&gt;Dart&lt;/a&gt; single page HTML ‘apps’.
And these three games (of 18 game submissions) entered the &lt;a href=&quot;/assets/webtech-hall-of-fame/index.html&quot;&gt;Webtech Hall of Fame&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;#1: &lt;a href=&quot;/assets/ss2017/webtech/games/team-04-dynamite-man/web/index.html&quot;&gt;Dynamite Man&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;#2: &lt;a href=&quot;/assets/ss2017/webtech/games/team-07-ninja-swap/web/index.html&quot;&gt;Ninja Swap&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;#3: &lt;a href=&quot;/assets/ss2017/webtech/games/team-06-star-speeder/web/index.html&quot;&gt;Star Speeder&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Congratulations.&lt;/p&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;2048px&quot; src=&quot;/assets/webtech-hall-of-fame/index.html&quot;&gt;Uupps, your browser does not support iframes.&lt;iframe&gt;
&lt;/iframe&gt;&lt;/iframe&gt;</content><author><name>Nane Kratzke,</name></author><category term="blog" /><summary type="html">One more time we had some fun this summer semester webtechnology course. My students implemented several classical games as Dart single page HTML ‘apps’. And these three games (of 18 game submissions) entered the Webtech Hall of Fame.</summary></entry><entry><title type="html">Web Technologies (Summer 2017)</title><link href="http://localhost:4000/lecture/2017/06/15/lecture-webtech.html" rel="alternate" type="text/html" title="Web Technologies (Summer 2017)" /><published>2017-06-15T00:00:00+02:00</published><updated>2017-06-15T00:00:00+02:00</updated><id>http://localhost:4000/lecture/2017/06/15/lecture-webtech</id><content type="html" xml:base="http://localhost:4000/lecture/2017/06/15/lecture-webtech.html">&lt;p&gt;This project is about common technologies used to build (part) of web information systems.
The project course is given for students
at Lübeck University of Applied Sciences (in german language).
The course covers following aspects:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;descriptional languages&lt;/strong&gt; for web content like &lt;a href=&quot;http://www.w3.org/html/&quot;&gt;HTML&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;presentational languages&lt;/strong&gt; for web content like &lt;a href=&quot;http://www.w3.org/Style/CSS/&quot;&gt;CSS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Document Object Model&lt;/strong&gt; (DOM)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;client and server side programming&lt;/strong&gt; with &lt;a href=&quot;https://www.dartlang.org&quot;&gt;Dart&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;security aspects&lt;/strong&gt; like &lt;em&gt;HTML injections&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Students apply their intensified web programming skills by developing
a small one person, DOM-tree based (that means not canvas based)
online game like &lt;em&gt;Tetris&lt;/em&gt; or &lt;em&gt;Boulder Dash&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;course-material-german-only&quot;&gt;Course Material (german only)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;HTML Unit: &lt;a href=&quot;/assets/ss2017/webtech/webtech-html-css.pdf&quot;&gt;HTML and CSS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Dart Unit: &lt;a href=&quot;/assets/ss2017/webtech/webtech-dart-i.pdf&quot;&gt;Part 1&lt;/a&gt;, &lt;a href=&quot;/assets/ss2017/webtech/webtech-dart-ii.pdf&quot;&gt;Part 2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;REST and HTTP Unit: &lt;a href=&quot;/assets/ss2017/webtech/webtech-http-rest.pdf&quot;&gt;REST&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;An exemplary reference game: &lt;a href=&quot;https://github.com/nkratzke/dartsnake&quot;&gt;SnakeDart&lt;/a&gt; (another game has to be developped using Dart)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;game-outcomes&quot;&gt;Game outcomes&lt;/h2&gt;

&lt;p&gt;20 Teams started this project. These teams plan to finish the following announced games. Playable game outcomes will be linked here. So, stay tuned.&lt;/p&gt;

&lt;p&gt;Be aware, this semester mobile games have to be implemented. So, some of the following games may be only working in mobile devices (due to necessarry 3D orientation or geolocation capabilities). However, most of the announced games should be playable on desktop browsers as well.&lt;/p&gt;

&lt;h3 id=&quot;group-a&quot;&gt;Group A&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Team 1: &lt;a href=&quot;/assets/ss2017/webtech/games/team-01-ctb/web/start.html&quot;&gt;Catch the Ballz&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Team 2: &lt;a href=&quot;/assets/ss2017/webtech/games/team-02-running-man/web/index.html&quot;&gt;Running Man&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Team 3: &lt;a href=&quot;/assets/ss2017/webtech/games/team-03-tetris/web/index.html&quot;&gt;Tetris&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Team 4: &lt;a href=&quot;/assets/ss2017/webtech/games/team-04-dynamite-man/web/index.html&quot;&gt;Dynamite Man&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Team 5: &lt;a href=&quot;/assets/ss2017/webtech/games/team-05-schfel-space/web/index.html&quot;&gt;SchFel Space (Invader)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;group-b&quot;&gt;Group B&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Team 6: &lt;a href=&quot;/assets/ss2017/webtech/games/team-06-star-speeder/web/index.html&quot;&gt;Star Speeder&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Team 7: &lt;a href=&quot;/assets/ss2017/webtech/games/team-07-ninja-swap/web/index.html&quot;&gt;Ninja Swap&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Team 8: &lt;a href=&quot;/assets/ss2017/webtech/games/team-08-tower-defence/web/index.html&quot;&gt;Tower Defence&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Team 9: &lt;a href=&quot;/assets/ss2017/webtech/games/team-09-simdart/web/index.html&quot;&gt;Simdart&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Team 10: &lt;a href=&quot;/assets/ss2017/webtech/games/team-10-sudoku/web/index.html&quot;&gt;Sudoku&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;group-c&quot;&gt;Group C&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Team 11: &lt;a href=&quot;/assets/ss2017/webtech/games/team-11-drops/web/index.html&quot;&gt;Drops&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Team 12: &lt;a href=&quot;/assets/ss2017/webtech/games/team-12-conway-wars/web/index.html&quot;&gt;Conway Wars&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Team 13: Space Combat Game &lt;strong&gt;(team surrendered)&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Team 14: A.R.S.S. [Another Random Space Shooter] &lt;strong&gt;(team surrendered)&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Team 15: &lt;a href=&quot;/assets/ss2017/webtech/games/team-15-breakout/web/index.html&quot;&gt;Break Out&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Team 16: &lt;a href=&quot;/assets/ss2017/webtech/games/team-16-flappydart/web/index.html&quot;&gt;Flappy Dart&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;group-d&quot;&gt;Group D&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Team 17: &lt;a href=&quot;/assets/ss2017/webtech/games/team-17-tombrunner/web/index.html&quot;&gt;TOMB Runner&lt;/a&gt; &lt;em&gt;sadly, this game has a severe bug … :-(&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Team 18: &lt;a href=&quot;/assets/ss2017/webtech/games/team-18-frogger/web/index.html&quot;&gt;Frogger&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Team 19: &lt;a href=&quot;/assets/ss2017/webtech/games/team-19-memory/web/index.html&quot;&gt;Memory&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Team 20: &lt;a href=&quot;/assets/ss2017/webtech/games/team-20-dartfall/web/index.html&quot;&gt;Dartfall&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Nane Kratzke</name></author><category term="web" /><category term="lecture" /><category term="database" /><category term="html" /><category term="css" /><category term="dart" /><category term="programming" /><category term="rest" /><category term="http" /><summary type="html"></summary></entry><entry><title type="html">Smuggling Multi-Cloud Support into Cloud-native Applications using Elastic Container Platforms</title><link href="http://localhost:4000/2017/04/28/closer2017.html" rel="alternate" type="text/html" title="Smuggling Multi-Cloud Support into Cloud-native Applications using Elastic Container Platforms" /><published>2017-04-28T00:00:00+02:00</published><updated>2017-04-28T00:00:00+02:00</updated><id>http://localhost:4000/2017/04/28/closer2017</id><content type="html" xml:base="http://localhost:4000/2017/04/28/closer2017.html">&lt;p&gt;How to transfer elastic container platforms like Docker Swarm, Kubernetes across different cloud service providers like AWS, GCE, Azure, OpenStack &lt;strong&gt;at runtime&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;I presented a proof-of-concept solution (accepted as an full paper) to do this on the &lt;a href=&quot;http://closer.scitevents.org/?y=2017&quot;&gt;7th International Conference on Cloud Computing and Services Science&lt;/a&gt; (CLOSER 2017) in Porto, Portugal.&lt;/p&gt;

&lt;p&gt;Currently the proof-of-concept system supports the following infrastructures and elastic platforms.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Infrastructures: AWS (using Ruby aws-sdk), GCE (using CLI interface), Azure (using fog.io), OpenStack (using fog.io)&lt;/li&gt;
  &lt;li&gt;Platforms: Kubernetes (1.6 and above), Docker Swarm (1.12 and above)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, due to its extendable design arbitrary cloud infrastructures (IaaS) and elastic container platforms can be supported by providing addtional drivers.&lt;/p&gt;

&lt;p&gt;A full text version of the paper is provided via &lt;span class=&quot;researchgate&quot;&gt;&lt;a href=&quot;https://www.researchgate.net/publication/313860386&quot;&gt;Research&lt;em&gt;Gate&lt;/em&gt;&lt;/a&gt;&lt;/span&gt;.
Informations how to cite the paper can be found &lt;a href=&quot;/bibliography/Kra2017a.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The conference presentation slides are embedded in this post. However, they can be accessed directly via &lt;a href=&quot;slideshare&quot;&gt;SlideShare&lt;/a&gt; as well.&lt;/p&gt;

&lt;h3 id=&quot;abstract&quot;&gt;Abstract&lt;/h3&gt;

&lt;p&gt;Elastic container platforms (like Kubernetes, Docker Swarm, Apache Mesos) fit very well with existing cloud-native application architecture approaches. So it is more than astonishing, that these already existing and open source available elastic platforms are not considered more consequently in multi-cloud research. Elastic container platforms provide inherent multi-cloud support that can be easily accessed. We present a solution proposal of a control process which is able to scale (and migrate as a side effect) elastic container platforms across different public and private cloud-service providers. This control loop can be used in an execution phase of self-adaptive auto-scaling MAPE loops (monitoring, analysis, planning, execution). Additionally, we present several lessons learned from our prototype implementation which might be of general interest for researchers and practitioners. For instance, to describe only the intended state of an elastic platform and let a single control process take care to reach this intended state is far less complex than to define plenty of specific and necessary multi-cloud aware workflows to deploy, migrate, terminate, scale up and scale down elastic platforms or applications.&lt;/p&gt;

&lt;h3 id=&quot;slides&quot;&gt;Slides&lt;/h3&gt;

&lt;center&gt;
&lt;iframe src=&quot;http://www.slideshare.net/slideshow/embed_code/key/HLaB6fZ30TIuwt&quot; width=&quot;100%&quot; height=&quot;500px&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border: 1px solid white; max-width: 100%; background-color: white;&quot;&gt;&lt;/iframe&gt;
&lt;/center&gt;

&lt;h3 id=&quot;proof-of-concept-implementation&quot;&gt;Proof-of-Concept Implementation&lt;/h3&gt;

&lt;p&gt;The proof-of-concept implementation can be found in the following &lt;a href=&quot;https://bitbucket.org/nanekratzke/plain&quot;&gt;bitbucket&lt;/a&gt; repository. You will find the last progress in the &lt;strong&gt;working&lt;/strong&gt; branch.&lt;/p&gt;</content><author><name>Nane Kratzke</name></author><category term="blog" /><category term="paper" /><category term="cloud" /><category term="research" /><category term="cloudtransit" /><category term="container" /><category term="ecp" /><category term="kubernetes" /><category term="swarm" /><category term="docker" /><summary type="html"></summary></entry><entry><title type="html">Cloud-native Apps</title><link href="http://localhost:4000/2017/04/12/cloud-com-interview.html" rel="alternate" type="text/html" title="Cloud-native Apps" /><published>2017-04-12T00:00:00+02:00</published><updated>2017-04-12T00:00:00+02:00</updated><id>http://localhost:4000/2017/04/12/cloud-com-interview</id><content type="html" xml:base="http://localhost:4000/2017/04/12/cloud-com-interview.html">&lt;h2 id=&quot;80-der-cloud-dienste-sind-nicht-standardisiert&quot;&gt;80% der Cloud-Dienste sind nicht standardisiert&lt;/h2&gt;

&lt;p&gt;Dank vieler Vorzüge erlebt Cloud-native einen Hype. Das Konzept hat aber auch Nachteile. Wer zur Entwicklung Cloud-nativer Applikationen Dienste eines Cloud-Anbieters einsetzt, spart viel Arbeit, begibt sich aber auch in Abhängigkeiten. Wie lässt sich das Risiko eines Vendor Lock-Ins minimieren?&lt;/p&gt;

&lt;p&gt;Mehr dazu in folgendem Interview (auch als &lt;a href=&quot;/assets/self-archive/com-interview.pdf&quot;&gt;PDF&lt;/a&gt;):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/com-interview.jpg&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;</content><author><name>Nane Kratzke</name></author><category term="blog" /><category term="cloud" /><category term="container" /><category term="docker" /><category term="kubernetes" /><summary type="html">80% der Cloud-Dienste sind nicht standardisiert</summary></entry><entry><title type="html">Programming II (Summer 2017)</title><link href="http://localhost:4000/lecture/2017/04/11/programming-ii.html" rel="alternate" type="text/html" title="Programming II (Summer 2017)" /><published>2017-04-11T00:00:00+02:00</published><updated>2017-04-11T00:00:00+02:00</updated><id>http://localhost:4000/lecture/2017/04/11/programming-ii</id><content type="html" xml:base="http://localhost:4000/lecture/2017/04/11/programming-ii.html">&lt;p&gt;The course &lt;strong&gt;Programming II&lt;/strong&gt; continues &lt;strong&gt;Programming I&lt;/strong&gt; by introducing more sophistacted programming aspects
for second semester students. JAVA is used as teaching language. 
Nevertheless, the principles are applicable to every (class based) object oriented programming language.&lt;/p&gt;

&lt;p&gt;The course is given for students of the &lt;a href=&quot;https://www.fh-luebeck.de/hochschule/fachbereich-elektrotechnik-und-informatik/studiengaenge/informatik-softwaretechnik-bsc/uebersicht/&quot;&gt;Computer Science/Software Engineering&lt;/a&gt; study programme
at the Lübeck University of Applied Sciences and will cover following aspects:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Object oriented concepts&lt;/strong&gt; and programming techniques&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Testing&lt;/strong&gt; of software including introduction to &lt;strong&gt;contracts&lt;/strong&gt;, &lt;strong&gt;unit testing&lt;/strong&gt; and &lt;strong&gt;code coverage&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Generics&lt;/strong&gt; introducing concepts like generic classes and methodes as well as concepts like type erasure, bounds&lt;/li&gt;
  &lt;li&gt;Introduction to &lt;strong&gt;OOAD&lt;/strong&gt; (object oriented analysis and design) by example of Tic Tac Toe&lt;/li&gt;
  &lt;li&gt;Graphical user interfaces (&lt;strong&gt;GUI&lt;/strong&gt;) using Swing introducing &lt;strong&gt;MVC&lt;/strong&gt; (model view controler) paradigma&lt;/li&gt;
  &lt;li&gt;Concurrent programming using &lt;strong&gt;threads&lt;/strong&gt; introducing accompanying &lt;strong&gt;thread safeness&lt;/strong&gt; problems like race conditions, producer-consumer problem, deadlocks.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;course-material-german-only&quot;&gt;Course Material (german only)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Lecture Unit 6: &lt;a href=&quot;/assets/ss2016/progII/prog-unit06.pdf&quot;&gt;Introduction to object oriented programming&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Self Study Unit 7: &lt;a href=&quot;/assets/ss2016/progII/prog-unit07.pdf&quot;&gt;Further aspects of object oriented programming&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Lecture Unit 8: &lt;a href=&quot;/assets/ss2016/progII/prog-unit08.pdf&quot;&gt;Testing&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Lecture Unit 9: &lt;a href=&quot;/assets/ss2016/progII/prog-unit09.pdf&quot;&gt;Generics&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Lecture Unit 10: &lt;a href=&quot;/assets/ss2016/progII/prog-unit10.pdf&quot;&gt;OOAD by example of Tic Tac Toe&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Lecture Unit 11: &lt;a href=&quot;/assets/ss2016/progII/prog-unit11.pdf&quot;&gt;GUI and MVC&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Lecture Unit 12: &lt;a href=&quot;/assets/ss2016/progII/prog-unit12.pdf&quot;&gt;Concurrent programming&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Exercises: &lt;a href=&quot;/assets/ss2016/progII/prog-exercises.pdf&quot;&gt;Catalogue of exercises&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Nane Kratzke</name></author><category term="lecture" /><category term="java" /><category term="programming" /><summary type="html"></summary></entry></feed>