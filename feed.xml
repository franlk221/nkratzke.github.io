<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>nkode.io</title>
    <description>A Blog About Programming, Cloud Computing, Webbased Systems</description>
    <link>http://www.nkode.io</link>
    <atom:link href="http://www.nkode.io/feed.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Valuable Container Platform Links (Swarm)</title>
      <description>
        
        &lt;img src=&quot;/img/posts/containership.jpg&quot;&gt;
        
        &lt;p&gt;Elastic container platforms like &lt;a href=&quot;http://kubernetes.io/&quot;&gt;Kubernetes&lt;/a&gt; or 
&lt;a href=&quot;http://www.docker.io&quot;&gt;Docker Swarm&lt;/a&gt; get more and more attention due to the
fact that they enable and simplify the deployment and operation of
multi-container systems or cloud-native applications.&lt;/p&gt;

&lt;p&gt;All these platforms provide weekly email newsletters where great links,
news, articles, howtos, manuals and more can be found.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.docker.io&quot;&gt;Docker&lt;/a&gt; weekly &lt;a href=&quot;https://www.docker.com/subscribe_newsletter/&quot;&gt;newsletter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://kubeweekly.com&quot;&gt;KubeWeekly&lt;/a&gt; newsletter aggregating all interesting weekly news about &lt;a href=&quot;http://kubernetes.io/&quot;&gt;Kubernetes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Nevertheless, these informations are short-living. They are fading out of
focus as the weeks pass by. But there are a lot of great posts
which should be collected and presented in a more enduring way.&lt;/p&gt;

&lt;p&gt;The links on this site are reviewed and updated weekly (very subjective).&lt;/p&gt;

&lt;p&gt;Feel free to contact &lt;a href=&quot;/about.html&quot;&gt;me&lt;/a&gt; if you think there are valuable links missing
or if you know better links. You may also want to use the disqus comments at the end of this
article to propose improvements or additional or even better links.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Warning: Links are not selected by objective criteria (this collection only
  contains links I find useful from a very personal point of view).&lt;/strong&gt;&lt;/p&gt;

&lt;ul class=&quot;nav nav-tabs&quot;&gt;
  &lt;li role=&quot;presentation&quot;&gt;&lt;a href=&quot;/2016/10/18/valuable-container-platform-links-kubernetes.html&quot;&gt;Kubernetes&lt;/a&gt;&lt;/li&gt;
  &lt;li role=&quot;presentation&quot; class=&quot;active&quot;&gt;&lt;a href=&quot;/2016/10/18/valuable-container-platform-links-swarm.html&quot;&gt;Docker Swarm Mode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;What is Docker&amp;#39;s Swarm Mode?&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.docker.com/engine/swarm/key-concepts/&quot;&gt;Swarm Mode Key Concepts&lt;/a&gt; by &lt;strong&gt;Docker&lt;/strong&gt; (added 18. Oct 2016) &lt;span class='label label-success'&gt;New&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Deploying the platform (your first cluster)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.docker.com/engine/swarm/swarm-tutorial/&quot;&gt;Getting started with swarm mode&lt;/a&gt; by &lt;strong&gt;Docker&lt;/strong&gt; (added 18. Oct 2016) &lt;span class='label label-success'&gt;New&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Deploying workloads/services&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.docker.com/engine/swarm/swarm-tutorial/deploy-service/&quot;&gt;Deploy a service to the swarm&lt;/a&gt; by &lt;strong&gt;Docker&lt;/strong&gt; (added 18. Oct 2016) &lt;span class='label label-success'&gt;New&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Monitoring the platform&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://logz.io/blog/docker-swarm-monitoring-logging-using-elk-stack/&quot;&gt;Docker Swarm Monitoring and Logging Using the ELK Stack&lt;/a&gt; by Asaf Yigal__ (added 18. Oct 2016) &lt;span class='label label-success'&gt;New&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Monitoring workloads/services&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://kubernetes.io/docs/user-guide/monitoring/&quot;&gt;Resource Usage Monitoring&lt;/a&gt; by &lt;strong&gt;Kubernetes.io&lt;/strong&gt; (added 18. Oct 2016) &lt;span class='label label-success'&gt;New&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://kubernetes.io/docs/user-guide/ui/&quot;&gt;Kubernetes Dashboard&lt;/a&gt; by &lt;em&gt;Kubernetes.io&lt;/em&gt;_ (added 18. Oct 2016) &lt;span class='label label-success'&gt;New&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Securing the platform&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.docker.com/engine/security/security/&quot;&gt;Docker Security&lt;/a&gt; by &lt;strong&gt;Docker&lt;/strong&gt; (added 18. Oct 2016) &lt;span class='label label-success'&gt;New&lt;/span&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.docker.com/engine/userguide/networking/overlay-security-model/&quot;&gt;Docker swarm mode overlay network security model&lt;/a&gt; by &lt;strong&gt;Docker&lt;/strong&gt; (added 18. Oct 2016) &lt;span class='label label-success'&gt;New&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Securing workloads/services&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;to be done&lt;/li&gt;
&lt;/ul&gt;

      </description>
      <pubDate>Tue, 18 Oct 2016 00:00:00 +0200</pubDate>
      <link>http://www.nkode.io//2016/10/18/valuable-container-platform-links-swarm.html</link>
      <guid isPermaLink="true">http://www.nkode.io//2016/10/18/valuable-container-platform-links-swarm.html</guid>
    </item>
    
    <item>
      <title>Valuable Container Platform Links (Kubernetes)</title>
      <description>
        
        &lt;img src=&quot;/img/posts/containership.jpg&quot;&gt;
        
        &lt;p&gt;Elastic container platforms like &lt;a href=&quot;http://kubernetes.io/&quot;&gt;Kubernetes&lt;/a&gt; or 
&lt;a href=&quot;http://www.docker.io&quot;&gt;Docker Swarm&lt;/a&gt; get more and more attention due to the
fact that they enable and simplify the deployment and operation of
multi-container systems or cloud-native applications.&lt;/p&gt;

&lt;p&gt;All these platforms provide weekly email newsletters where great links,
news, articles, howtos, manuals and more can be found.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.docker.io&quot;&gt;Docker&lt;/a&gt; weekly &lt;a href=&quot;https://www.docker.com/subscribe_newsletter/&quot;&gt;newsletter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://kubeweekly.com&quot;&gt;KubeWeekly&lt;/a&gt; newsletter aggregating all interesting weekly news about &lt;a href=&quot;http://kubernetes.io/&quot;&gt;Kubernetes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Nevertheless, these informations are short-living. They are fading out of
focus as the weeks pass by. But there are a lot of great posts
which should be collected and presented in a more enduring way.&lt;/p&gt;

&lt;p&gt;The links on this site are reviewed and updated weekly (very subjective).&lt;/p&gt;

&lt;p&gt;Feel free to contact &lt;a href=&quot;/about.html&quot;&gt;me&lt;/a&gt; if you think there are valuable links missing
or if you know better links. You may also want to use the disqus comments at the end of this
article to propose improvements or additional or even better links.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Warning: Links are not selected by objective criteria (this collection only
  contains links I find useful from a very personal point of view).&lt;/strong&gt;&lt;/p&gt;

&lt;ul class=&quot;nav nav-tabs&quot;&gt;
  &lt;li role=&quot;presentation&quot; class=&quot;active&quot;&gt;&lt;a href=&quot;/2016/10/18/valuable-container-platform-links-kubernetes.html&quot;&gt;Kubernetes&lt;/a&gt;&lt;/li&gt;
  &lt;li role=&quot;presentation&quot;&gt;&lt;a href=&quot;/2016/10/18/valuable-container-platform-links-swarm.html&quot;&gt;Docker Swarm Mode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;What is Kubernetes?&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://kubernetes.io/docs/whatisk8s/&quot;&gt;What is Kubernetes&lt;/a&gt; by &lt;strong&gt;Kubernetes.io&lt;/strong&gt; (added 18. Oct 2016) &lt;span class='label label-success'&gt;New&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://dzone.com/articles/exploring-kubernetes-as-a-mesos-framework-does-it&quot;&gt;Exploring Kubernetes as a Mesos Framework: Does it Make Sense?&lt;/a&gt; by &lt;strong&gt;Klaus Ma&lt;/strong&gt; (added 18. Oct 2016) &lt;span class='label label-success'&gt;New&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://codefresh.io/blog/know-kubernetes-1-4/&quot;&gt;What to Know About Kubernetes 1.4&lt;/a&gt; by &lt;strong&gt;Oley Verhovsky&lt;/strong&gt; (added 18. Oct 2016) &lt;span class='label label-success'&gt;New&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Deploying the platform (your first cluster)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://kubernetes.io/docs/getting-started-guides/kubeadm/&quot;&gt;Installing Kubernetes on Linux with kubeadm&lt;/a&gt; by &lt;strong&gt;Kubernetes.io&lt;/strong&gt; (added 18. Oct 2016) &lt;span class='label label-success'&gt;New&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://kubernetes.io/docs/tutorials/&quot;&gt;Tutorials&lt;/a&gt; by &lt;strong&gt;Kubernetes.io&lt;/strong&gt; (added 18. Oct 2016) &lt;span class='label label-success'&gt;New&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Deploying workloads/services&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://kubernetes.io/docs/hellonode/&quot;&gt;Hello World&lt;/a&gt; by &lt;strong&gt;Kubernetes.io&lt;/strong&gt; (added 18. Oct 2016) &lt;span class='label label-success'&gt;New&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Monitoring the platform&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://kubernetes.io/docs/getting-started-guides/logging-elasticsearch/&quot;&gt;Logging with Elasticsearch and Kibana&lt;/a&gt; by &lt;strong&gt;Kubernetes.io&lt;/strong&gt; (added 18. Oct 2016) &lt;span class='label label-success'&gt;New&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Monitoring workloads/services&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://kubernetes.io/docs/user-guide/monitoring/&quot;&gt;Resource Usage Monitoring&lt;/a&gt; by &lt;strong&gt;Kubernetes.io&lt;/strong&gt; (added 18. Oct 2016) &lt;span class='label label-success'&gt;New&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://kubernetes.io/docs/user-guide/ui/&quot;&gt;Kubernetes Dashboard&lt;/a&gt; by &lt;em&gt;Kubernetes.io&lt;/em&gt;_ (added 18. Oct 2016) &lt;span class='label label-success'&gt;New&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Securing the platform&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/weaveworks/weave-kube/issues/38#issuecomment-253843577&quot;&gt;Activate weave overlay network encryption for Kubernetes&lt;/a&gt; by &lt;strong&gt;Issue on GitHub&lt;/strong&gt; (added 18. Oct 2016) &lt;span class='label label-success'&gt;New&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Securing workloads/services&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://kubernetes.io/docs/user-guide/secrets/&quot;&gt;Secrets&lt;/a&gt; by &lt;strong&gt;Kubernetes.io&lt;/strong&gt; (added 18. Oct 2016) &lt;span class='label label-success'&gt;New&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://kubernetes.io/docs/user-guide/pod-security-policy/&quot;&gt;Pod Security Policies&lt;/a&gt; by &lt;strong&gt;Kubernetes.io&lt;/strong&gt; (added 18. Oct 2016) &lt;span class='label label-success'&gt;New&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
      <pubDate>Tue, 18 Oct 2016 00:00:00 +0200</pubDate>
      <link>http://www.nkode.io//2016/10/18/valuable-container-platform-links-kubernetes.html</link>
      <guid isPermaLink="true">http://www.nkode.io//2016/10/18/valuable-container-platform-links-kubernetes.html</guid>
    </item>
    
    <item>
      <title>Programming I (Winter 2016)</title>
      <description>
        
        &lt;img src=&quot;/img/posts/java-code.jpg&quot;&gt;
        
        &lt;p&gt;The lecture &lt;strong&gt;Programming I&lt;/strong&gt; is about fundamentals of programming
for freshman students.&lt;/p&gt;

&lt;p&gt;The lecture covers aspects like primitive and reference data types, operators, expressions,
control flow, routine (method) definitions, I/O programming,
recursive and object oriented programming.
JAVA is used as teaching language, nevertheless the principles are applicable to every (imperative or class based object oriented) programming language.&lt;/p&gt;

&lt;p&gt;Lecture is given for computer science students at Lübeck University of Applied Sciences.&lt;/p&gt;

&lt;p&gt;Lecture will cover following aspects:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Fundamental concepts&lt;/strong&gt; of programming including &lt;strong&gt;programming paradigms&lt;/strong&gt; and &lt;strong&gt;runtime models&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Variables&lt;/strong&gt;, &lt;strong&gt;data types&lt;/strong&gt;, &lt;strong&gt;operators&lt;/strong&gt; and &lt;strong&gt;expressions&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Control flow&lt;/strong&gt; and &lt;strong&gt;routines&lt;/strong&gt; (functions, procedures, methods)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reference data types&lt;/strong&gt; and &lt;strong&gt;collections&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;(Stream based) &lt;strong&gt;I/O programming&lt;/strong&gt; and &lt;strong&gt;serialization&lt;/strong&gt; of objects&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Recursive programming&lt;/strong&gt; and &lt;strong&gt;recursive datastructures&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Functional programming&lt;/strong&gt; using &lt;strong&gt;lambda functions&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Exception handling&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Introduction to &lt;strong&gt;object oriented programming&lt;/strong&gt; and &lt;strong&gt;UML&lt;/strong&gt; introducing fundamental concepts like &lt;strong&gt;abstraction&lt;/strong&gt;, &lt;strong&gt;encapsulation&lt;/strong&gt;, &lt;strong&gt;polymorphism&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Course Material (german only)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Lecture Unit 1: &lt;a href=&quot;/assets/ws2016/progI/Unit01.pdf&quot;&gt;Core concepts of programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lecture Unit 2: &lt;a href=&quot;/assets/ws2016/progI/Unit02.pdf&quot;&gt;Fundamentals of imperative programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lecture Unit 3: &lt;a href=&quot;/assets/ws2016/progI/Unit03.pdf&quot;&gt;Reference data types and collections&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lecture Unit 4: &lt;a href=&quot;/assets/ws2016/progI/Unit04.pdf&quot;&gt;I/O programming, serialization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lecture Unit 5: &lt;a href=&quot;/assets/ws2016/progI/Unit05.pdf&quot;&gt;Recursive and functional programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lecture Unit 6: &lt;a href=&quot;/assets/ws2016/progI/Unit06.pdf&quot;&gt;OO and UML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Exercises: &lt;a href=&quot;/assets/ws2016/progI/excercises.pdf&quot;&gt;Catalogue of excercises&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Youtube Playlist: &lt;a href=&quot;https://www.youtube.com/playlist?list=PL06-G-mnBYTJ2QffB3jgjZH-1TVIwMDr8&quot;&gt;Excercises of WS2015/16 explained&lt;/a&gt; (thanks to &lt;strong&gt;Marco Torge Gabrecht&lt;/strong&gt; for providing this tremendous work)&lt;/li&gt;
&lt;/ul&gt;

      </description>
      <pubDate>Mon, 10 Oct 2016 00:00:00 +0200</pubDate>
      <link>http://www.nkode.io//lecture/2016/10/10/lecture-programming-i.html</link>
      <guid isPermaLink="true">http://www.nkode.io//lecture/2016/10/10/lecture-programming-i.html</guid>
    </item>
    
    <item>
      <title>Fundamentals of Programming (Winter 2016)</title>
      <description>
        
        &lt;img src=&quot;/img/posts/java-code.jpg&quot;&gt;
        
        &lt;p&gt;The lecture is about fundamentals of programming
for freshman students.&lt;/p&gt;

&lt;p&gt;The lecture covers aspects like primitive and reference data types, operators, expressions,
control flow, routine (method) definitions
recursive and object oriented programming.
JAVA is used as teaching language, nevertheless the principles are applicable to every (imperative or class based object oriented) programming language.&lt;/p&gt;

&lt;p&gt;Lecture is given for &lt;em&gt;information technology and design&lt;/em&gt; students at Lübeck University of Applied Sciences.&lt;/p&gt;

&lt;p&gt;Lecture will cover following aspects:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Fundamental concepts&lt;/strong&gt; of programming including &lt;strong&gt;programming paradigms&lt;/strong&gt; and &lt;strong&gt;runtime models&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Variables&lt;/strong&gt;, &lt;strong&gt;data types&lt;/strong&gt;, &lt;strong&gt;operators&lt;/strong&gt; and &lt;strong&gt;expressions&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Control flow&lt;/strong&gt; and &lt;strong&gt;routines&lt;/strong&gt; (functions, procedures, methods)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reference data types&lt;/strong&gt; and &lt;strong&gt;collections&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;(Stream based) &lt;strong&gt;I/O programming&lt;/strong&gt; and &lt;strong&gt;serialization&lt;/strong&gt; of objects&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Recursive programming&lt;/strong&gt; and &lt;strong&gt;datastructures&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Course Material (german only)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Lecture Unit 1: &lt;a href=&quot;/assets/ws2016/progI/Unit01.pdf&quot;&gt;Core concepts of programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lecture Unit 2: &lt;a href=&quot;/assets/ws2016/progI/Unit02.pdf&quot;&gt;Fundamentals of imperative programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lecture Unit 3: &lt;a href=&quot;/assets/ws2016/progI/Unit03.pdf&quot;&gt;Reference data types and collections&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lecture Unit 4: &lt;a href=&quot;/assets/ws2016/progI/Unit04.pdf&quot;&gt;I/O programming, serialization&lt;/a&gt; (skipped, just for self study)&lt;/li&gt;
&lt;li&gt;Lecture Unit 5: &lt;a href=&quot;/assets/ws2016/progI/Unit05.pdf&quot;&gt;Recursive programming&lt;/a&gt; (functional programming skipped, just for self study)&lt;/li&gt;
&lt;li&gt;Exercises: &lt;a href=&quot;/assets/ws2016/progI/excercises.pdf&quot;&gt;Catalogue of excercises&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Youtube Playlist: &lt;a href=&quot;https://www.youtube.com/playlist?list=PL06-G-mnBYTJ2QffB3jgjZH-1TVIwMDr8&quot;&gt;Excercises of WS2015/16 explained&lt;/a&gt; (thanks to &lt;strong&gt;Marco Torge Gabrecht&lt;/strong&gt; for providing this tremendous work)&lt;/li&gt;
&lt;/ul&gt;

      </description>
      <pubDate>Mon, 10 Oct 2016 00:00:00 +0200</pubDate>
      <link>http://www.nkode.io//lecture/2016/10/10/lecture-fundamentals-of-programming.html</link>
      <guid isPermaLink="true">http://www.nkode.io//lecture/2016/10/10/lecture-fundamentals-of-programming.html</guid>
    </item>
    
    <item>
      <title>Analyse und Integration von Storage-Clustern in elastische Container Plattformen</title>
      <description>
        
        &lt;img src=&quot;/img/posts/storage.jpg&quot;&gt;
        
        &lt;p&gt;Cloud Computing ist häufig durch nicht-standardisierte, herstellerspezifische Schnittstellen 
und Vendor Lock-in gekennzeichnet. Der Einsatz von elastischen Container Plattformen 
(wie Kubernetes, Apache Mesos, Docker Swarm, Nomad, etc.) kann Vendor Lock-In reduzieren. 
Elastische Container Plattformen können auf Maschinen von verschiedenen Cloud Service Providern 
(z.B. AWS, GCE, Azure) ausgebracht werden und ermöglichen eine Migration von Workloads zwischen Cloud-Anbietern. 
Eine Realisierung dieses Ansatzes wurde bereits teilweise durch die Entwicklung eines Cluster-Deployers 
für Kubernetes auf Amazon AWS und OpenStack umgesetzt. Aktuell können zustandslose Applikationen 
providerunabhängig bereitgestellt werden. Mit einem ergänzenden Storage-Cluster sollen 
nun auch zustandsbehaftete Applikationen unterstützt werden.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In dieser Masterarbeit sollen dafür existierende Open Source Storage-Cluster Lösungen 
analysiert, integriert und hinsichtlich Migrierbarkeit evaluiert werden. 
&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Hierzu müssen im Detail folgende Teilaufgaben bearbeitet und dokumentiert (Masterarbeit) werden:&lt;/p&gt;

&lt;h3&gt;Teilaufgaben&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Hinweis:
Sollten sich während der Bearbeitung dieser Arbeit einzelne Aspekte als schwer realisierbar erweisen, kann die Aufgabenstellung - nach plausiblem Nachweis der Schwierigkeit - angepasst werden.
&lt;/em&gt;&lt;/p&gt;

&lt;h4&gt;Analyse von bestehenden Storage-Cluster Lösungen&lt;/h4&gt;

&lt;p&gt;Aktuell gibt es mehre Storage-Cluster-Produkte die potenziell geeignet sind 
(eine entsprechende Liste wird zur Verfügung gestellt und bildet den Ausgangspunkt der Analyse).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Diese sollen auf ihre speziellen Besonderheiten untersucht, vergleichend analysiert und hinsichtlich ihrer Integrationseignung für elastische Container Plattformen beurteilt werden. &lt;/li&gt;
&lt;li&gt;Die Kriterien bei der vergleichenden Analyse sollen in Absprache selbstständig erarbeitet werden.&lt;/li&gt;
&lt;li&gt;Bei der vergleichenden Analyse sollen mindestens die drei geeignetsten Storage-Cluster-Lösungen sowie die Cluster-Software Kubernetes und Docker’s SwarmMode berücksichtigt werden. Die vergleichende Analyse sollen mögliche Umsetzungsmöglichkeiten betrachten, insbesondere die 

&lt;ul&gt;
&lt;li&gt;containerisierte Bereitstellung des Storage-Clusters innerhalb eines Clusters, &lt;/li&gt;
&lt;li&gt;die separate, &amp;quot;native&amp;quot; Storage-Software-Installation in Kombination mit Container-Cluster-Plug-Ins (2.1) oder Docker-Plug-Ins (2.2)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Automatisches Bereitstellen von Storage-Cluster Lösungen (Integration)&lt;/h4&gt;

&lt;p&gt;Aktuell ist ein Deployer für ein Kubernetes Cluster vorhanden und für andere Plattformen, 
wie beispielweise Apache Mesos und Docker Swarm, geplant. 
Der bestehende Deployer soll um eine Storage-Komponente ergänzt werden. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Zunächst soll GlusterFS in einer containerisierten Version auf dem vorhandenen Kubernetes Cluster installiert werden.&lt;/li&gt;
&lt;li&gt;Das System muss skalierbar sein.&lt;/li&gt;
&lt;li&gt;Es soll ein Storage-Cluster-Deployer für drei Storage-Cluster (wie bspw. GlusterFS, Ceph oder Flocker) prototypisch implementiert werden. Die Storage-Cluster sind entsprechend der vorhergegangen Analyse auszuwählen.&lt;/li&gt;
&lt;li&gt;Die Architektur des Storage-Cluster-Deployer soll so gestaltet und dokumentiert werden, dass andere Storage-Systeme nachträglich ergänzt werden können.&lt;/li&gt;
&lt;li&gt;Um den Storage-Cluster zu beschreiben soll das JSON-Format verwendet werden. Eine starke Anlehnung an die vorhandene Deployer-Umsetzung ist gewünscht.&lt;/li&gt;
&lt;li&gt;Als Programmiersprache ist idealerweise Ruby zu verwenden. Wird sich gegen Ruby entschieden, ist die Sprachwahl gesondert zu begründen und die Vorteile entsprechend nachvollziehbar aufzuführen.&lt;/li&gt;
&lt;li&gt;Der Storage-Deployer ist so zu entwickeln, dass er den Gem­-Konventionen entspricht, da die Software auf RubyGems.org bereit gestellt werden soll.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Evaluierung der Migrierbarkeit von Storage-Clustern&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Der Storage-Cluster-Deployer muss auf Maschinen von Amazon AWS, GCE und OpenStack deployed werden können.&lt;/li&gt;
&lt;li&gt;Die Provider-Migration zwischen Cloud-Service Infrastrukturen soll getestet werden. Dazu gehört die Migration von AWS zu OpenStack und umgekehrt sowie die Migration von AWS zu GCE und umgekehrt.&lt;/li&gt;
&lt;li&gt;Hierzu sind sinnvolle Testfälle mit Applikationen sinnvoller Komplexität zu definieren und durchzuführen. Auftretende Einschränkungen insbesondere hinsichtlich Datenvollständigkeit und –konsistenz sind aufzuführen.&lt;/li&gt;
&lt;li&gt;Geeignete Test-Tools müssen selbstständig gefunden oder entwickelt werden.&lt;/li&gt;
&lt;/ul&gt;

      </description>
      <pubDate>Tue, 04 Oct 2016 00:00:00 +0200</pubDate>
      <link>http://www.nkode.io//thesis/2016/10/04/thesis-storage-cluster-deployer.html</link>
      <guid isPermaLink="true">http://www.nkode.io//thesis/2016/10/04/thesis-storage-cluster-deployer.html</guid>
    </item>
    
    <item>
      <title>What to do if your cloud is burning</title>
      <description>
        
        &lt;img src=&quot;/img/posts/firefighter.jpg&quot;&gt;
        
        &lt;p&gt;Cloud native applications can create enormous business growth and value in a very short amount of time. Take Instagram as an example company. It took only two years to get a net asset value of 1 billion USD. However, cloud-native applications are often characterized by a highly implicit technological dependency on hosting cloud infrastructures. What happens if you are forced to leave your cloud service provider? What happens if your cloud is burning? The project Cloud TRANSIT investigates how to design cloud-native applications and services to reduce technological dependencies on underlying cloud infrastructures. &lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;iframe src=&quot;http://www.slideshare.net/slideshow/embed_code/key/e8ZeyNIZXn1NQC&quot;
        width=&quot;90%&quot;
        height=&quot;500px&quot;
        frameborder=&quot;0&quot;
        marginwidth=&quot;0&quot;
        marginheight=&quot;0&quot;
        scrolling=&quot;no&quot;
        style=&quot;border: 1px solid white; max-width: 100%; background-color: white;&quot;&gt;&lt;/iframe&gt;
&lt;/center&gt;&lt;/p&gt;

      </description>
      <pubDate>Wed, 21 Sep 2016 00:00:00 +0200</pubDate>
      <link>http://www.nkode.io//2016/09/21/burning-cloud.html</link>
      <guid isPermaLink="true">http://www.nkode.io//2016/09/21/burning-cloud.html</guid>
    </item>
    
    <item>
      <title>ClouNS - A Cloud-native Application Reference Model for Enterprise Architects</title>
      <description>
        
        &lt;img src=&quot;https://c2.staticflickr.com/4/3202/2849637988_35fbe3b2db_b.jpg&quot;&gt;
        
        &lt;p&gt;I am going to present this paper at the 8th Workshop on Service-oriented Enterprise Architecture for Enterprise Engineering (&lt;a href=&quot;http://www.soea4ee.org/&quot;&gt;SoEA4EE 2016&lt;/a&gt;).
This workshop is being held in conjunction with &lt;a href=&quot;http://edoc2016.univie.ac.at/&quot;&gt;EDOC 2016 conference&lt;/a&gt; in Vienna, Austria.&lt;/p&gt;

&lt;p&gt;I will present a reference model for cloud-native applications for enterprise architects.
A full text version of the paper is provided via &lt;span class=&quot;researchgate&quot;&gt;&lt;a href=&quot;https://www.researchgate.net/publication/304024156&quot;&gt;Research&lt;em&gt;Gate&lt;/em&gt;&lt;/a&gt;&lt;/span&gt;.
Informations how to cite the paper can be found &lt;a href=&quot;/bibliography/KP2016.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Abstract&lt;/h3&gt;

&lt;p&gt;The capability to operate cloud-native applications can create enormous business growth and value. But enterprise architects should be aware that cloud-native applications are vulnerable to vendor lock-in. We investigated cloud-native application design principles, public cloud service providers, and industrial cloud standards. All results indicate that most cloud service categories seem to foster vendor lock-in situations which might be especially problematic for enterprise architectures. This might sound disillusioning at first. However, we present a reference model for cloud-native applications that relies only on a small subset of well standardized IaaS services. The reference model can be used for codifying cloud technologies. It can guide technology identification, classification, adoption, research and development processes for cloud-native application and for vendor lock-in aware enterprise architecture engineering methodologies.&lt;/p&gt;

&lt;h3&gt;Definition of a Cloud-native Application&lt;/h3&gt;

&lt;blockquote&gt;
A &lt;strong&gt;cloud-native application&lt;/strong&gt; is a distributed, elastic and
horizontal scalable system composed of (micro)services which
isolates state in a  minimum of stateful components. The 
application and each self-contained deployment unit of that
application is designed according to cloud-focused design patterns
and operated on a self-service elastic platform.
&lt;/blockquote&gt;

&lt;h3&gt;Reference Model&lt;/h3&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&quot;/img/posts/cloud-native-stack.png&quot; class='nogrey' width=100%&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Details are explained in the &lt;a href=&quot;/bibliography/KP2016.html&quot;&gt;paper&lt;/a&gt; (provided via Research Gate). The motivating background is presented in the following slides.&lt;/p&gt;

&lt;h3&gt;Slides&lt;/h3&gt;

&lt;p&gt;&lt;center&gt;
&lt;iframe src=&quot;http://www.slideshare.net/slideshow/embed_code/key/3X2o4jhktf2Itq&quot;
        width=&quot;100%&quot;
        height=&quot;500px&quot;
        frameborder=&quot;0&quot;
        marginwidth=&quot;0&quot;
        marginheight=&quot;0&quot;
        scrolling=&quot;no&quot;
        style=&quot;border: 1px solid white; max-width: 100%; background-color: white;&quot;&gt;&lt;/iframe&gt;
&lt;/center&gt;&lt;/p&gt;

      </description>
      <pubDate>Sun, 04 Sep 2016 00:00:00 +0200</pubDate>
      <link>http://www.nkode.io//2016/09/04/edoc2016.html</link>
      <guid isPermaLink="true">http://www.nkode.io//2016/09/04/edoc2016.html</guid>
    </item>
    
    <item>
      <title>And the winner is ... NAMCAP</title>
      <description>
        
        &lt;img src=&quot;/assets/webtech-hall-of-fame/background.jpg&quot;&gt;
        
        &lt;p&gt;We had some fun this summer semester &lt;a href=&quot;/lecture/2016/04/11/lecture-webtech.html&quot;&gt;webtechnology course&lt;/a&gt;. 
My students implemented several classical games as &lt;a href=&quot;https://www.dartlang.org/&quot;&gt;Dart&lt;/a&gt; single page HTML &amp;#39;apps&amp;#39;.&lt;/p&gt;

&lt;p&gt;Three games (of 13 game submissions) entered the &lt;a href=&quot;/assets/webtech-hall-of-fame/index.html&quot;&gt;Webtech Hall of Fame&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;#1: &lt;a href=&quot;/assets/ss2016/webtech/games/09-pacman/web/index.html&quot;&gt;Namcap&lt;/a&gt; by Sheraz Azad, Malte Grebe, Niklas Klatt &lt;/li&gt;
&lt;li&gt;#2: &lt;a href=&quot;/assets/ss2016/webtech/games/07-kistenschieben/web/KistenschiebenView.html&quot;&gt;Kisten Schieben&lt;/a&gt; by Tim Cedric Korinth, Johann Michaelis, Felix Richter, Malte Schreiber&lt;/li&gt;
&lt;li&gt;#3: &lt;a href=&quot;/assets/ss2016/webtech/games/03-tankgame/web/index.html&quot;&gt;Tank Game&lt;/a&gt; by Sönke Gonschorowski, Jannik Kühnemundt&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Congratulations.&lt;/p&gt;

&lt;p&gt;&lt;iframe width='90%' height='2048px' src=&quot;/assets/webtech-hall-of-fame/index.html&quot;&gt;Uupps, your browser does not support iframes.&lt;iframe&gt;&lt;/p&gt;

      </description>
      <pubDate>Mon, 11 Jul 2016 00:00:00 +0200</pubDate>
      <link>http://www.nkode.io//2016/07/11/And-the-winner-is-namcap.html</link>
      <guid isPermaLink="true">http://www.nkode.io//2016/07/11/And-the-winner-is-namcap.html</guid>
    </item>
    
    <item>
      <title>Open4ssh</title>
      <description>
        
        &lt;p&gt;&lt;a href=&quot;https://github.com/nkratzke/open4ssh&quot;&gt;Open4ssh&lt;/a&gt; is a small convenience wrapper for &lt;a href=&quot;https://rubygems.org/gems/net-ssh&quot;&gt;net-ssh&lt;/a&gt;. 
Its intended and primary purpose is to provide pragmatic
execution of shell commands on a remote host via SSH.&lt;/p&gt;

&lt;p&gt;It is mainly inspired by &lt;a href=&quot;http://ruby-doc.org/stdlib-2.3.1/libdoc/open3/rdoc/Open3.html&quot;&gt;Open3&lt;/a&gt; standard library 
which provides access to exit codes, 
standard output and standard error messages of executed commands on local host.
Open4ssh does the same but in a SSH remote context. 
Astonishingly, there seems no pragmatic way to figure out exit codes or standard error messages of executed commands 
with the net-ssh library.
Additionally, Open4ssh is able to execute a 
sequence of commands and returns their exit codes, standard out and standard error messages in a command related list.&lt;/p&gt;

&lt;p&gt;Open4ssh is most useful in remote automation scenarios which are triggered from Ruby environments.&lt;/p&gt;

&lt;h2&gt;Installation&lt;/h2&gt;

&lt;p&gt;Add this line to your application&amp;#39;s Gemfile:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;open4ssh&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And then execute:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ bundle
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or install it yourself as:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ gem install open4ssh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Usage&lt;/h2&gt;

&lt;h3&gt;Remote execution of a single command via SSH&lt;/h3&gt;

&lt;p&gt;The following snippets explain how to use Open4ssh. 
To execute simply one single command on a remote host, we can do the following:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;open4ssh&amp;#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Open4ssh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;capture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
     &lt;span class=&quot;ss&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;remote.host.io&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;ss&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;nane&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;ss&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;secret&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;ss&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;ls -la&amp;#39;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will execute the bash command &amp;#39;ls -la&amp;#39; on host &lt;em&gt;remote.host.io&lt;/em&gt; as user &lt;em&gt;nane&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;For a lot of cloud scenarios it is more appropriate to support a keybased login. This can be done like that 
(simply use the key parameter instead of the pwd parameter):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;open4ssh&amp;#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Open4ssh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;capture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
     &lt;span class=&quot;ss&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;remote.host.io&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;ss&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;nane&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;ss&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/path/to/your/sshkey.pem&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;ss&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;ls -la&amp;#39;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Remote execution of a sequence of commands via SSH&lt;/h3&gt;

&lt;p&gt;The following snippets will explain how to use Open4ssh to execute a (sequence) of commands.
This snippet here will execute five shell commands sequentially&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;open4ssh&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;pp&amp;#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;returns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Open4ssh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;capture4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
     &lt;span class=&quot;ss&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;remote.host.io&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;ss&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;nane&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;ss&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/path/to/your/sshkey.pem&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;ss&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
       &lt;span class=&quot;s2&quot;&gt;&amp;quot;touch helloworld.txt&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
       &lt;span class=&quot;s2&quot;&gt;&amp;quot;cat helloworld.txt&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
       &lt;span class=&quot;s2&quot;&gt;&amp;quot;echo &amp;#39;Hello World&amp;#39; &amp;gt;&amp;gt; helloworld.txt&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
       &lt;span class=&quot;s2&quot;&gt;&amp;quot;cat helloworld.txt&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
       &lt;span class=&quot;s2&quot;&gt;&amp;quot;rm helloworld.txt&amp;quot;&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;returns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and will generate this output.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[[0, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;touch helloworld.txt&amp;quot;],
 [0, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;cat helloworld.txt&amp;quot;],
 [0, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;echo &amp;#39;Hello World&amp;#39; &amp;gt;&amp;gt; helloworld.txt&amp;quot;],
 [0, &amp;quot;Hello World\n&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;cat helloworld.txt&amp;quot;],
 [0, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;rm helloworld.txt&amp;quot;]]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So, for each command a list of return values is returned.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;exit code of the executed command&lt;/li&gt;
&lt;li&gt;standard out message (might be empty)&lt;/li&gt;
&lt;li&gt;standard error message (might be empty)&lt;/li&gt;
&lt;li&gt;executed command (as passed by the &lt;em&gt;cmd&lt;/em&gt; parameter in &lt;em&gt;exec4&lt;/em&gt; call.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;However, if we launch a sequence of commands exiting with exit codes not equal 0, this sequence is only executed as long as 
each command could be successfully processed (exit code 0). So this snippet here&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;open4ssh&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;pp&amp;#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;returns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Open4ssh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;capture4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
     &lt;span class=&quot;ss&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;remote.host.io&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;ss&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;nane&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;ss&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/path/to/your/sshkey.pem&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;ss&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
       &lt;span class=&quot;s2&quot;&gt;&amp;quot;touch helloworld.txt&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
       &lt;span class=&quot;s2&quot;&gt;&amp;quot;cat helloworld.txt&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
       &lt;span class=&quot;s2&quot;&gt;&amp;quot;this will not work&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
       &lt;span class=&quot;s2&quot;&gt;&amp;quot;cat helloworld.txt&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
       &lt;span class=&quot;s2&quot;&gt;&amp;quot;rm helloworld.txt&amp;quot;&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;returns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;would produce the following output&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[[0, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;touch helloworld.txt&amp;quot;],
 [0, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;cat helloworld.txt&amp;quot;],
 [127, &amp;quot;&amp;quot;, &amp;quot;bash: this: command not found\n&amp;quot;, &amp;quot;this will not work&amp;quot;]]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and the last two commands would not been executed on the remote host, because the third command failed.&lt;/p&gt;

&lt;h3&gt;How to check whether a sequence of commands was successful?&lt;/h3&gt;

&lt;p&gt;Because Open4ssh only executes commands as long as they are returning a exit code of 0, we can check 
pragmatically whether all commands of a sequence have been executed successfully:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;exit_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stderr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Open4ssh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;capture4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
     &lt;span class=&quot;ss&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;remote.host.io&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;ss&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;nane&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;ss&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/path/to/your/sshkey.pem&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;ss&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
       &lt;span class=&quot;s2&quot;&gt;&amp;quot;touch helloworld.txt&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
       &lt;span class=&quot;s2&quot;&gt;&amp;quot;cat helloworld.txt&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
       &lt;span class=&quot;s2&quot;&gt;&amp;quot;echo &amp;#39;Hello World&amp;#39; &amp;gt;&amp;gt; helloworld.txt&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
       &lt;span class=&quot;s2&quot;&gt;&amp;quot;cat helloworld.txt&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
       &lt;span class=&quot;s2&quot;&gt;&amp;quot;rm helloworld.txt&amp;quot;&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exit_code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;rm helloworld.txt&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Everything worked fine&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;What is this good for?&lt;/h3&gt;

&lt;p&gt;Just a small example. Assuming your remote host is a Ubuntu 14.04 system we could do something like that:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;exit_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stderr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Open4ssh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;capture4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
     &lt;span class=&quot;ss&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;remote.host.io&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;ss&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;nane&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;ss&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/path/to/your/sshkey.pem&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;ss&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
       &lt;span class=&quot;s2&quot;&gt;&amp;quot;curl -fsSL https://test.docker.com/ | sh&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
       &lt;span class=&quot;s2&quot;&gt;&amp;quot;sudo docker swarm init&amp;quot;&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;sudo docker swarm init&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exit_code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;You started successfully a new Docker Swarm cluster.&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This would fire up an initial master for a &lt;a href=&quot;https://docs.docker.com/engine/swarm/&quot;&gt;Docker Swarm cluster&lt;/a&gt; 
in a few lines of Ruby code. Be patient. This can take several minutes. 
Of course, you can do any other tasks as well. This was only one example ;-)&lt;/p&gt;

&lt;h3&gt;Verbose mode&lt;/h3&gt;

&lt;p&gt;If you want to know what is happening there you can turn on the verbose mode (mostly useful for debugging).&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;exit_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stderr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Open4ssh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;capture4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
     &lt;span class=&quot;ss&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;remote.host.io&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;ss&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;nane&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;ss&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/path/to/your/sshkey.pem&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;ss&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
       &lt;span class=&quot;s2&quot;&gt;&amp;quot;curl -fsSL https://test.docker.com/ | sh&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
       &lt;span class=&quot;s2&quot;&gt;&amp;quot;sudo docker swarm init&amp;quot;&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;ss&quot;&gt;verbose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;sudo docker swarm init&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exit_code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;You started successfully a new Docker Swarm cluster.&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will perform the same install like above but will print all messages of the Docker install script on your console.&lt;/p&gt;

&lt;h2&gt;Contributing&lt;/h2&gt;

&lt;p&gt;Bug reports and pull requests are welcome on Github at &lt;a href=&quot;https://github.com/nkratzke/open4ssh&quot;&gt;https://github.com/nkratzke/open4ssh&lt;/a&gt;.&lt;/p&gt;

      </description>
      <pubDate>Fri, 01 Jul 2016 00:00:00 +0200</pubDate>
      <link>http://www.nkode.io//2016/07/01/open4ssh.html</link>
      <guid isPermaLink="true">http://www.nkode.io//2016/07/01/open4ssh.html</guid>
    </item>
    
    <item>
      <title>Container- and Cluster Technologies for Microservices</title>
      <description>
        
        &lt;p&gt;This poster presents a high-level overlook across microservices, container and container clustering technologies
which are intensively discussed in enterprise IT and cloud-native application software engineering.&lt;/p&gt;

&lt;p&gt;Feel free to &lt;a href=&quot;/assets/content/poster-container-cluster.pdf&quot;&gt;download&lt;/a&gt; 
a DIN A1 printable PDF version (german only) for your office.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/content/poster-container-cluster.pdf&quot; mimetype=&quot;application/pdf&quot;&gt;
    &lt;img src=&quot;/img/posts/poster-container-cluster.png&quot; class='nogrey' width=90%&gt;
&lt;/a&gt;&lt;/p&gt;

      </description>
      <pubDate>Thu, 28 Apr 2016 00:00:00 +0200</pubDate>
      <link>http://www.nkode.io//2016/04/28/container-and-container-cluster.html</link>
      <guid isPermaLink="true">http://www.nkode.io//2016/04/28/container-and-container-cluster.html</guid>
    </item>
    
    <item>
      <title>Web Technologies (Summer 2016)</title>
      <description>
        
        &lt;img src=&quot;/img/posts/webtech.jpg&quot;&gt;
        
        &lt;p&gt;This project is about common technologies used to build (part) of web information systems.
The project course is given for students
at Lübeck University of Applied Sciences (in german language).
The course covers following aspects:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;descriptional languages&lt;/strong&gt; for web content like &lt;a href=&quot;http://www.w3.org/html/&quot;&gt;HTML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;presentational languages&lt;/strong&gt; for web content like &lt;a href=&quot;http://www.w3.org/Style/CSS/&quot;&gt;CSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Document Object Model&lt;/strong&gt; (DOM)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;client and server side programming&lt;/strong&gt; with &lt;a href=&quot;https://www.dartlang.org&quot;&gt;Dart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;security aspects&lt;/strong&gt; like &lt;em&gt;HTML/SQL injections&lt;/em&gt; or &lt;em&gt;session hijacking&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;REST&lt;/strong&gt;-based APIs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Students apply their intensified web programming skills by developing
a small one person, DOM-tree based (that means not canvas based)
online game like &lt;em&gt;Tetris&lt;/em&gt; or &lt;em&gt;Boulder Dash&lt;/em&gt;.&lt;/p&gt;

&lt;h3&gt;Course Material (german only)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;HTML Unit: &lt;a href=&quot;/assets/ss2016/webtech/webtech-html-css.pdf&quot;&gt;HTML and CSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Dart Unit: &lt;a href=&quot;/assets/ss2016/webtech/webtech-dart-i.pdf&quot;&gt;Part 1&lt;/a&gt;, &lt;a href=&quot;/assets/ss2016/webtech/webtech-dart-ii.pdf&quot;&gt;Part 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;REST and HTTP Unit: &lt;a href=&quot;/assets/ss2016/webtech/webtech-http-rest.pdf&quot;&gt;REST&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;An exemplary reference game: &lt;a href=&quot;https://github.com/nkratzke/dartsnake&quot;&gt;SnakeDart&lt;/a&gt; (another game has to be developped using Dart)&lt;/li&gt;
&lt;li&gt;An exemplary REST-based Key-Value Store: &lt;a href=&quot;https://bitbucket.org/nanekratzke/gamekey&quot;&gt;Gamekey&lt;/a&gt; (has to be reimplemented in Dart)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Game outcomes&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Team 1: &lt;a href=&quot;/assets/ss2016/webtech/games/01-breakout/web/index.html&quot;&gt;Breakout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Team 2: &lt;a href=&quot;/assets/ss2016/webtech/games/02-cubedash/web/index.html&quot;&gt;Cube Dash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Team 3: &lt;a href=&quot;/assets/ss2016/webtech/games/03-tankgame/web/index.html&quot;&gt;Tank Game&lt;/a&gt; entered &lt;a href=&quot;/assets/webtech-hall-of-fame/index.html&quot;&gt;Hall-of-Fame&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Team 4: &lt;a href=&quot;/assets/ss2016/webtech/games/04-legendhref/web/index.html&quot;&gt;Legend of Href&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Team 5: Shovel Knight - not deployable to a static web server (not following Dart pub conventions, arrrgh)&lt;/li&gt;
&lt;li&gt;Team 6: &lt;a href=&quot;/assets/ss2016/webtech/games/06-tilldeath/web/index.html&quot;&gt;Till Death&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Team 7: &lt;a href=&quot;/assets/ss2016/webtech/games/07-kistenschieben/web/KistenschiebenView.html&quot;&gt;Kisten Schieben&lt;/a&gt; entered &lt;a href=&quot;/assets/webtech-hall-of-fame/index.html&quot;&gt;Hall-of-Fame&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Team 8: &lt;a href=&quot;/assets/ss2016/webtech/games/08-brickgame/web/index.html&quot;&gt;Brick Game&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Team 9: &lt;a href=&quot;/assets/ss2016/webtech/games/09-pacman/web/index.html&quot;&gt;Namcap (aka Pacman)&lt;/a&gt; entered &lt;a href=&quot;/assets/webtech-hall-of-fame/index.html&quot;&gt;Hall-of-Fame&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Team 10: surrendered&lt;/li&gt;
&lt;li&gt;Team 11: NomNom (aka Pacman) - not deployable to a static web server (because game data has been referenced absolutely to localhost, arrrgh)&lt;/li&gt;
&lt;li&gt;Team 12: &lt;a href=&quot;/assets/ss2016/webtech/games/12-brickcrash/web/index.html&quot;&gt;Brick Crash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Team 13: Space Peons - not deployable to a static web server (due to wrong relative paths, arrrgh)&lt;/li&gt;
&lt;li&gt;Team 14: Pint - not released for public&lt;/li&gt;
&lt;/ul&gt;

      </description>
      <pubDate>Mon, 11 Apr 2016 00:00:00 +0200</pubDate>
      <link>http://www.nkode.io//lecture/2016/04/11/lecture-webtech.html</link>
      <guid isPermaLink="true">http://www.nkode.io//lecture/2016/04/11/lecture-webtech.html</guid>
    </item>
    
    <item>
      <title>Programming II (Summer 2016)</title>
      <description>
        
        &lt;img src=&quot;/img/posts/java-code.jpg&quot;&gt;
        
        &lt;p&gt;The lecture &lt;strong&gt;Programming II&lt;/strong&gt; continues &lt;strong&gt;Programming I&lt;/strong&gt; by introducing
more sophistacted programming aspects
for freshman students (second semester).&lt;/p&gt;

&lt;p&gt;JAVA is used as teaching language. Nevertheless, the principles are applicable to every (class based) object oriented programming language.&lt;/p&gt;

&lt;p&gt;Lecture is given for students of the &lt;a href=&quot;https://www.fh-luebeck.de/hochschule/fachbereich-elektrotechnik-und-informatik/studiengaenge/informatik-softwaretechnik-bsc/uebersicht/&quot;&gt;Computer Science/Software Engineering&lt;/a&gt; study programme
at Lübeck University of Applied Sciences and will cover following aspects:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Object oriented concepts&lt;/strong&gt; and programming techniques&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Testing&lt;/strong&gt; of software including introduction to &lt;strong&gt;contracts&lt;/strong&gt;, &lt;strong&gt;unit testing&lt;/strong&gt; and &lt;strong&gt;code coverage&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Generics&lt;/strong&gt; introducing concepts like generic classes and methodes as well as concepts like type erasure, bounds&lt;/li&gt;
&lt;li&gt;Introduction to &lt;strong&gt;OOAD&lt;/strong&gt; (object oriented analysis and design) by example of Tic Tac Toe&lt;/li&gt;
&lt;li&gt;Graphical user interfaces (&lt;strong&gt;GUI&lt;/strong&gt;) using Swing introducing &lt;strong&gt;MVC&lt;/strong&gt; (model view controler) paradigma&lt;/li&gt;
&lt;li&gt;Concurrent programming using &lt;strong&gt;threads&lt;/strong&gt; introducing accompanying &lt;strong&gt;thread safeness&lt;/strong&gt; problems like race conditions, producer-consumer problem, deadlocks.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Course Material (german only)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Lecture Unit 6: &lt;a href=&quot;/assets/ss2016/progII/prog-unit06.pdf&quot;&gt;Introduction to object oriented programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Self Study Unit 7: &lt;a href=&quot;/assets/ss2016/progII/prog-unit07.pdf&quot;&gt;Further aspects of object oriented programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lecture Unit 8: &lt;a href=&quot;/assets/ss2016/progII/prog-unit08.pdf&quot;&gt;Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lecture Unit 9: &lt;a href=&quot;/assets/ss2016/progII/prog-unit09.pdf&quot;&gt;Generics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lecture Unit 10: &lt;a href=&quot;/assets/ss2016/progII/prog-unit10.pdf&quot;&gt;OOAD by example of Tic Tac Toe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lecture Unit 11: &lt;a href=&quot;/assets/ss2016/progII/prog-unit11.pdf&quot;&gt;GUI and MVC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lecture Unit 12: &lt;a href=&quot;/assets/ss2016/progII/prog-unit12.pdf&quot;&gt;Concurrent programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Exercises: &lt;a href=&quot;/assets/ss2016/progII/prog-exercises.pdf&quot;&gt;Catalogue of exercises&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
      <pubDate>Mon, 11 Apr 2016 00:00:00 +0200</pubDate>
      <link>http://www.nkode.io//lecture/2016/04/11/lecture-programming-ii.html</link>
      <guid isPermaLink="true">http://www.nkode.io//lecture/2016/04/11/lecture-programming-ii.html</guid>
    </item>
    
    <item>
      <title>Advanced Programming (Summer 2016)</title>
      <description>
        
        &lt;img src=&quot;/img/posts/java-code.jpg&quot;&gt;
        
        &lt;p&gt;The lecture &lt;strong&gt;Advanced Programming&lt;/strong&gt; continues &lt;strong&gt;Fundaments of Programming&lt;/strong&gt; by introducing
more sophistacted programming aspects
for freshman students (second semester).&lt;/p&gt;

&lt;p&gt;JAVA is used as teaching language. Nevertheless, the principles are applicable to every (class based) object oriented programming language.&lt;/p&gt;

&lt;p&gt;Lecture is given for students of the &lt;a href=&quot;https://www.fh-luebeck.de/hochschule/fachbereich-elektrotechnik-und-informatik/studiengaenge/informationstechnologie-und-design-bsc/uebersicht/&quot;&gt;Information Technology and Design&lt;/a&gt; study program at Lübeck University of Applied Sciences
and will cover following aspects:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Object oriented concepts and programming techniques&lt;/li&gt;
&lt;li&gt;Introduction to &lt;strong&gt;OOAD&lt;/strong&gt; (object oriented analysis and design) by example of Tic Tac Toe&lt;/li&gt;
&lt;li&gt;Graphical user interfaces (&lt;strong&gt;GUI&lt;/strong&gt;) using Swing introducing &lt;strong&gt;MVC&lt;/strong&gt; (model view controler) paradigma&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Course Material (german only)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Lecture Unit 6: &lt;a href=&quot;/assets/ss2016/progII/prog-unit06.pdf&quot;&gt;Introduction to object oriented programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Self Study Unit 7: &lt;a href=&quot;/assets/ss2016/progII/prog-unit07.pdf&quot;&gt;Further aspects of object oriented programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lecture Unit 10: &lt;a href=&quot;/assets/ss2016/progII/prog-unit10.pdf&quot;&gt;OOAD by example of Tic Tac Toe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lecture Unit 11: &lt;a href=&quot;/assets/ss2016/progII/prog-unit11.pdf&quot;&gt;GUI and MVC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Exercises: &lt;a href=&quot;/assets/ss2016/progII/prog-exercises.pdf&quot;&gt;Catalogue of exercises&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
      <pubDate>Mon, 11 Apr 2016 00:00:00 +0200</pubDate>
      <link>http://www.nkode.io//lecture/2016/04/11/lecture-advanced-programming.html</link>
      <guid isPermaLink="true">http://www.nkode.io//lecture/2016/04/11/lecture-advanced-programming.html</guid>
    </item>
    
    <item>
      <title>ppbench - A Visualizing Network Benchmark for Microservices</title>
      <description>
        
        &lt;img src=&quot;/img/posts/Rome-Closer-2016.jpg&quot;&gt;
        
        &lt;p&gt;I am going to present this paper on the &lt;a href=&quot;http://closer.scitevents.org/Home.aspx&quot;&gt;6th International Conference on Cloud Computing and Services Science&lt;/a&gt;
(CLOSER 2016, &lt;a href=&quot;http://closer.scitevents.org/TechnicalProgram/View/TechnicalProgram.aspx&quot;&gt;Session 5, Cloud Computing Enabling Technology&lt;/a&gt;) in Rome, Italy.&lt;/p&gt;

&lt;p&gt;I will present the ppbench benchmark, as well as some insights we got throughout our research. A full text version of the paper is provided via &lt;span class=&quot;researchgate&quot;&gt;&lt;a href=&quot;https://www.researchgate.net/publication/292657431&quot;&gt;Research&lt;em&gt;Gate&lt;/em&gt;&lt;/a&gt;&lt;/span&gt;.
Informations how to cite the paper can be found &lt;a href=&quot;/bibliography/KQ2016.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Abstract&lt;/h3&gt;

&lt;p&gt;Companies like Netflix, Google, Amazon, Twitter successfully exemplified elastic and scalable microservice architectures for very large systems. Microservice architectures are often realized in a way to deploy services as containers on container clusters. Containerized microservices often use lightweight and REST-based mechanisms. However, this lightweight communication is often routed by container clusters through heavyweight software defined networks (SDN). Services are often implemented in different programming languages adding additional complexity to a system, which might end in decreased performance. Astonishingly it is quite complex to figure out these impacts in the upfront of a microservice design process due to missing and specialized benchmarks. This contribution proposes a benchmark intentionally designed for this microservice setting. We advocate that it is more useful to reflect fundamental design decisions and their performance impacts in the upfront of a microservice architecture development and not in the aftermath. We present some findings regarding performance impacts of some TIOBE TOP 50 programming languages (Go, Java, Ruby, Dart), containers (Docker as type representative) and SDN solutions (Weave as type representative).&lt;/p&gt;

&lt;h3&gt;Slides&lt;/h3&gt;

&lt;p&gt;&lt;center&gt;
&lt;iframe src=&quot;http://www.slideshare.net/slideshow/embed_code/key/snJfo9gefHD6aF&quot;
        width=&quot;100%&quot;
        height=&quot;500px&quot;
        frameborder=&quot;0&quot;
        marginwidth=&quot;0&quot;
        marginheight=&quot;0&quot;
        scrolling=&quot;no&quot;
        style=&quot;border: 1px solid white; max-width: 100%; background-color: white;&quot;&gt;&lt;/iframe&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;h3&gt;Tool&lt;/h3&gt;

&lt;p&gt;The presented &lt;a href=&quot;https://github.com/nkratzke/pingpong&quot;&gt;ppbench&lt;/a&gt; benchmark is provided via GitHub. We provide &lt;code&gt;ppbench&lt;/code&gt; via RubyGems.org. So, installing &lt;code&gt;ppbench&lt;/code&gt; 
on your system (we assume that this is your personal laptop or workstation) is very easy.
Assuming you have &lt;strong&gt;Ruby 2.2 (or higher installed)&lt;/strong&gt; installed, simply run&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;gem install ppbench
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to install &lt;code&gt;ppbench&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ppbench&lt;/code&gt; provides several commands and parameters to run and analyze your experiments.
&lt;code&gt;ppbench&lt;/code&gt; comes with an online help included. Simply run&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;ppbench help
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to get some online help about available commands &lt;code&gt;ppbench&lt;/code&gt; is providing.&lt;/p&gt;

&lt;p&gt;A benchmark run is started like that: &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;ppbench run --host http://&amp;lt;pinghostip&amp;gt;:8080 \
            --experiment experiment_tag \
            --machine machine_tag \
            log.csv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All benchmark results are written into a log (csv format). These csv based log files can be processed by &lt;code&gt;ppbench&lt;/code&gt;. 
&lt;code&gt;Ppbench&lt;/code&gt; is able to do some summary analysis on a set of collected benchmark files for a quick analysis. Simply run&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;ppbench summary *.csv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to get a tabluar summary.&lt;/p&gt;

&lt;p&gt;But much more interesting and helpful (summary data is intended to be used for completenes and plausability checking of data but not for detailed analysis), 
&lt;code&gt;ppbench&lt;/code&gt; is able to generate R scripts for analysis and visualization of benchmark data.&lt;/p&gt;

&lt;p&gt;The plot commands of ppbench have several flags to tune your plotting. By using the following additions flags
it is possible to plot 75% confidence bands without showing all measured detail data points (omitting the &lt;code&gt;--nopoints&lt;/code&gt; would show both,
confidence bands and all data points).&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;ppbench transfer-plot --machines m3.xlarge \
                      --experiments bare-dart,bare-go,bare-java \
                      --withbands \
                      --confidence 75 \
                      --nopoints \
                      --pdf graphic.pdf \
                      *.csv | Rscript -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This would produce a much clearer picture with additional descriptive statistical information.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&quot;/img/posts/transferplot-withbands.png&quot; class='nogrey' width=75%&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;h2&gt;Further Information&lt;/h2&gt;

&lt;p&gt;For further information please read the informations provided with the
&lt;a href=&quot;https://github.com/nkratzke/pingpong&quot;&gt;Ping Pong github repository&lt;/a&gt;.&lt;/p&gt;

      </description>
      <pubDate>Wed, 06 Apr 2016 00:00:00 +0200</pubDate>
      <link>http://www.nkode.io//2016/04/06/closer2016.html</link>
      <guid isPermaLink="true">http://www.nkode.io//2016/04/06/closer2016.html</guid>
    </item>
    
    <item>
      <title>Erstellung und Umsetzung eines Konzepts zur Verbesserung von automatischen Tests</title>
      <description>
        
        &lt;img src=&quot;/img/posts/source-code.jpg&quot;&gt;
        
        &lt;p&gt;Die Qualität der Workflow-Software Prinect für Druckereien von der Heidelberger
Druckmaschinen AG wird im Entwicklungsprozess durch automatische Tests abgesichert. &lt;/p&gt;

&lt;p&gt;Der Inhalt der Arbeit ist die Analyse des Testsystems. Es sind Konzepte zur Optimierung in 
den Bereichen Laufzeit, Testerstellung und Integration in den Buildprozess (Continous 
Integration) bzw. die automatische Systeminstallation (Continuous Delivery) zu erstellen und 
umzusetzen.&lt;/p&gt;

&lt;p&gt;Im Rahmen der Integeration ist ergänzend zu untersuchen, wie der Buildprozess (Continuous Integration) 
und die automatische Systeminstallation (Continuous Delivery)
durch Container Technologien - wie bspw. Docker - sinnnvoll unterstützt werden können.&lt;/p&gt;

&lt;h3&gt;Teilaufgaben&lt;/h3&gt;

&lt;p&gt;Hierzu müssen im Detail folgende Teilaufgaben bearbeitet und dokumentiert (Masterarbeit) werden:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Durchführen und Dokumentation des &lt;strong&gt;Ist-Standes&lt;/strong&gt; des Testsystems. Dies beinhaltet die Dokumentation der Architektur des Test-Systems.&lt;/li&gt;
&lt;li&gt;Erhebung und Dokumentation von &lt;strong&gt;Optimierungspotenzialen&lt;/strong&gt; auf Basis des dokumentierten Ist-Standes.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fortentwicklung der Continuous Integration&lt;/strong&gt; Lösung auf Basis der identifizierten Optimierungspotenziale. Dies beinhaltet auch die Dokumentation des weiterentwickelten Testsystems. Die Weiterentwicklungen des Testsystems sind nachvollziehbar auszuweisen und zu dokumentieren.&lt;/li&gt;
&lt;li&gt;Der &lt;strong&gt;Nachweis der Realisierbarkeit&lt;/strong&gt; der erarbeitenden Konzepte soll mindestens durch prototypische Implementierungen und Ergänzungen der Continuous Integgration Lösung erfolgen.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Begleitende Dokumentation&lt;/strong&gt; der oben angegebenen Schritte, Designentscheidungen und Ergebnisse (Masterarbeit). Insbesondere ist auf den sinnvollen/nicht sinnvollen Einsatz von Container Technologien einzugehen.&lt;/li&gt;
&lt;/ul&gt;

      </description>
      <pubDate>Tue, 15 Mar 2016 00:00:00 +0100</pubDate>
      <link>http://www.nkode.io//thesis/2016/03/15/thesis-analyse-und-optimierung-von-automatisierten-tests.html</link>
      <guid isPermaLink="true">http://www.nkode.io//thesis/2016/03/15/thesis-analyse-und-optimierung-von-automatisierten-tests.html</guid>
    </item>
    
    <item>
      <title>Automatisierte Auswertung von Programmier-Praktika</title>
      <description>
        
        &lt;img src=&quot;/img/posts/source-code.jpg&quot;&gt;
        
        &lt;p&gt;Der Einsatz von Continuous Integeration Lösungen gehört mittlerweile zum bewährten Vorgehen in der Softwareentwicklung.
Diese Arbeit soll den Einsatz von Continuous Integration Lösungen im Rahmen der Hochschullehre (Programmierausbildung) untersuchen.
Zur Unterstützung von Programmierlehrveranstaltung - insbesondere von Programmierpraktika - soll hierzu
eine Lösung zur automatisierten Auswertung von wöchentlichen Abgabeaufgaben auf Basis von existierenden 
Continuous Integration Lösungen geschaffen werden. Auf diese Weise sollen Praktikumsbetreuer/innen 
in Zeiten stetig größer werdender Programmierkurse zeitlich entlastet werden
und Studierenden eine ergänzende Möglichkeit des Feedback-gesteuerten Selbststudiums gegeben werden.&lt;/p&gt;

&lt;h3&gt;Automatische Auswertung von Abgaben&lt;/h3&gt;

&lt;p&gt;Die automatische Auswertung von Abgaben soll folgende Aspekte umfassen:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Korrektheit&lt;/strong&gt; der Abgabe mittels Unit-Tests (eine geeignete Struktur für Unit-Tests zu finden ist Gegenstand der Arbeit)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Code Coverage&lt;/strong&gt; (zur Ermittlung unnötigen Codes für die Aufgabenstellung, hierfür sind geeignete und frei verfügbare Code Coverage Lösungen zu ermitteln)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Komplexität&lt;/strong&gt; der Abgabe mittels Komplexitätsmetriken (geeignete und einfach zu erhebende Metriken zu finden, ist Gegenstand der Arbeit)&lt;/li&gt;
&lt;li&gt;Einhaltung von &lt;strong&gt;Programmierkonventionen&lt;/strong&gt; (z.B. mittels Checkstyle, geeignete Frameworks zu finden ist Gegenstand der Arbeit)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Studierende sollen die automatisierte Auswertung von Abgaben idealerweise aus der Eclipse Entwicklungsplattform heraus anstoßen können. 
Entsprechend geeignete Plugins sind zu analysieren und deren Eignung zu demonstrieren.&lt;/p&gt;

&lt;h3&gt;Automatisiertes Feedback für Studierende&lt;/h3&gt;

&lt;p&gt;Studierende sollen auf Basis dieser Aspekte ein automatisiertes Feedback pro Abgabe &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;in Relation zur Musterlösung&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;aber auch &lt;strong&gt;in Relation zur Peergroup&lt;/strong&gt; der anderen Studierenden &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;erhalten. Details sind im Verlaufe der Arbeit zu klären.&lt;/p&gt;

&lt;h3&gt;Leistungsübersicht für Studierende und Lehrende&lt;/h3&gt;

&lt;p&gt;Lehrende und Studierende sollen auf Basis einer solchen Auswertung schneller einen Überblick über den Leistungsstand erhalten. 
Die Auswertung soll &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;für eine Abgabe eines Studierenden (Detailansicht einer Abgabe: für den Studierenden und Lehrende),&lt;/li&gt;
&lt;li&gt;für eine Abgabe über alle Studierenden (Leistungsübersicht einer Abgabe: nur für Lehrende),&lt;/li&gt;
&lt;li&gt;über alle Abgaben eines Studierenden (Leistungsübersicht eines Studierenden: für den Studierenden und Lehrende),&lt;/li&gt;
&lt;li&gt;über alle Abgaben aller Studierenden (Leistungsübersicht eines Semesters: nur für Lehrende)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;möglich sein. Details sind im Verlaufe der Arbeit zu klären.&lt;/p&gt;

&lt;h3&gt;Teilaufgaben&lt;/h3&gt;

&lt;p&gt;Hierzu müssen im Detail folgende Teilaufgaben bearbeitet und dokumentiert (Bachelorarbeit) werden:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Durchführen einer &lt;strong&gt;Anforderungsanalyse&lt;/strong&gt;.

&lt;ul&gt;
&lt;li&gt;Dies beinhaltet die &lt;strong&gt;Analyse des bestehenden Aufgabenkatalogs&lt;/strong&gt; der Programmierveranstaltung Prog I (Inf).&lt;/li&gt;
&lt;li&gt;Ferner sind insbesondere bestehende Continuous Integration Lösungen hinsichtlich Eignung für den dargestellten Einsatzzweck zu analysieren.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Aufbau einer Continuous Integration&lt;/strong&gt; Lösung zur automatisierten Evaluation von Abgaben im Rahmen von Programmier-Praktika. 

&lt;ul&gt;
&lt;li&gt;Die Lösung soll in einer containerisierten Form mittels Docker ausgebracht werden können.&lt;/li&gt;
&lt;li&gt;Die Lösung muss Accounts für eine Vielzahl von Studierenden schnell und einfach erzeugen können.&lt;/li&gt;
&lt;li&gt;Die Lösung muss die oben genannten Auswertungs-Aspekte abdecken.&lt;/li&gt;
&lt;li&gt;Die Lösung muss sowohl ein Feedback bezogen auf die Musterlösung als auch auf die Peergroup generieren können.&lt;/li&gt;
&lt;li&gt;Die Lösung muss eine Leistungsübersicht für Studierende und Lehrende darstellen können.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Der &lt;strong&gt;Nachweis der Realisierbarkeit&lt;/strong&gt; soll anhand mindestens 8 Aufgaben des Aufgabenkatalogs Prog I erfolgen.

&lt;ul&gt;
&lt;li&gt;Die zu betrachtenden Aufgaben sollen dabei aus dem ersten, dem zweiten, dem dritten und dem vierten Viertel des ersten Semesters stammen.&lt;/li&gt;
&lt;li&gt;Ergänzend sollen drei Aufgaben aus dem ersten, zweiten und dritten Drittel des zweiten Semesters betrachtet werden, um abzuleiten inwiefern das Konzept auf freiere und komplexere Aufgabenstellungen übertragbar ist.&lt;/li&gt;
&lt;li&gt;Auf Basis dieser Aufgaben soll ein &amp;quot;Kochrezept&amp;quot; abgeleitet und dokumentiert werden, wie beliebige Aufgaben des Aufgabenkatalogs umgewandelt/umgeschrieben werden müssen, damit sie einer automatisierten Evaluierung unterworfen werden können.&lt;/li&gt;
&lt;li&gt;Es sind entsprechende Empfehlung zur Umgestaltung des Aufgabenkatalogs abzuleiten und zu dokumentieren.&lt;/li&gt;
&lt;li&gt;Es ist ein Template zu erstellen, nach dem neue Aufgaben für den Aufgabenkatalog erstellt werden können.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Begleitende Dokumentation&lt;/strong&gt; der oben angegebenen Schritte, Designentscheidungen und Ergebnisse (Bachelorarbeit)

&lt;ul&gt;
&lt;li&gt;Die Dokumentation muss zusätzlich zu den üblichen Anforderungen an eine Bachelorarbeit, die folgenden Punkte umfassen:&lt;/li&gt;
&lt;li&gt;Die Dokumentation muss insbesondere einen Anhang beinhalten, wie die Lösung betrieben und konfiguriert werden kann.&lt;/li&gt;
&lt;li&gt;Die Dokumentation muss ein Kochrezept beinhalten, wie Aufgaben formuliert und gestaltet sein müssen, um diese einer automatisierten Auswertung unterwerfen zu können.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sollten sich während der Bearbeitung dieser Arbeit einzelne Aspekte als schwer realisierbar erweisen, 
kann die Aufgabenstellung - nach plausiblem Nachweis der Schwierigkeit - angepasst werden.&lt;/p&gt;

      </description>
      <pubDate>Tue, 01 Mar 2016 00:00:00 +0100</pubDate>
      <link>http://www.nkode.io//thesis/2016/03/01/thesis-automatisierte-bewertung-von-prog-praktika.html</link>
      <guid isPermaLink="true">http://www.nkode.io//thesis/2016/03/01/thesis-automatisierte-bewertung-von-prog-praktika.html</guid>
    </item>
    
    <item>
      <title>New Paper: How to Operate Container Clusters more Efficiently?</title>
      <description>
        
        &lt;img src=&quot;/img/posts/sdn.jpg&quot;&gt;
        
        &lt;p&gt;&lt;strong&gt;Abstract.&lt;/strong&gt; In previous work, we concluded that container technologies and overlay networks typically have negative performance impacts, 
mainly due to an additional layer to networking. This is what everybody would expect, only the degree of impact might be questionable. 
These negative performance impacts can be accepted (if they stay moderate), 
due to a better flexibility and manageability of the resulting systems. 
However, we draw our conclusion only on data covering small core machine types. 
This extended work additionally analyzed the impact of various (high core) machine 
types of different public cloud service providers (Amazon Web Services, AWS and Google Compute Engine, GCE) 
and comes to a more differentiated view and some astonishing results for high core machine types. 
Our findings stand to reason that a simple and cost effective strategy is to 
operate container cluster with highly similar high core machine types 
(even across different cloud service providers). 
This strategy should cover major relevant and complex data transfer rate 
reducing effects of containers, container clusters and software-defined-networks appropriately.&lt;/p&gt;

&lt;h3&gt;TL;DR;&lt;/h3&gt;

&lt;p&gt;We present some insights concerning containers, overlay networks (especially weave), 
and their sometimes counterintuitive impact on network performance.&lt;/p&gt;

&lt;p&gt;In short: From a performance point of view, &lt;strong&gt;it  seems  to  be  a  simple  strategy  to operate  container  clusters and overlay network solutions like weave
with most  similar  high  core machine  types across different providers.&lt;/strong&gt; We were  pleased  to  see, that the most similar
machine types across AWS and GCE are far away from being the most expensive machine types provided by both  providers. 
Thus, our similarity-based  virtual machine type selection strategy seems to be a cost effective strategy as well. &lt;/p&gt;

&lt;p&gt;If you want to know more. The paper is has been published in &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.iariajournals.org/networks_and_services/&quot;&gt;International Journal on Advances in Networks and Services&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;You may want to check the paper on &lt;a href=&quot;https://www.researchgate.net/publication/284501557&quot;&gt;ResearchGate&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;You will find informations how to cite the paper &lt;a href=&quot;/bibliography/KQ2015a.html&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Summary of details concerning container impact (Docker)&lt;/h3&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align: left&quot;&gt;Machine type&lt;/th&gt;
&lt;th style=&quot;text-align: center&quot;&gt;cores&lt;/th&gt;
&lt;th style=&quot;text-align: center&quot;&gt;small messages&lt;/th&gt;
&lt;th style=&quot;text-align: center&quot;&gt; big messages&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;AWS m3.large&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;90% - 100%&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;100% - 110%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;GCE n1-stanard-2&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;95%&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;95% - 100%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;AWS m3.xlarge&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;4&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;90%&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;120% - 130%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;GCE n1-stanard-4&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;4&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;95%&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;120% - 130%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;AWS m3.2xlarge&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;8&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;90%&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;110% - 130%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;GCE n1-stanard-8&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;8&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;90%&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;110% - 120%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;&lt;caption&gt;Performance impacts of an additional container layer (Docker)&lt;/caption&gt;&lt;/p&gt;

&lt;h3&gt;Summary of details concerning overlay network impact (Weave)&lt;/h3&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align: left&quot;&gt;Machine type&lt;/th&gt;
&lt;th style=&quot;text-align: center&quot;&gt;cores&lt;/th&gt;
&lt;th style=&quot;text-align: center&quot;&gt;small messages&lt;/th&gt;
&lt;th style=&quot;text-align: center&quot;&gt; big messages&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;AWS m3.large&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;45%&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;60%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;GCE n1-stanard-2&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;25% - 80%&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;25%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;AWS m3.xlarge&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;4&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;60%&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;90% - 100%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;GCE n1-stanard-4&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;4&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;40% - 100%&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;60%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;AWS m3.2xlarge&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;8&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;70% - 80%&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;90% - 100%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;GCE n1-stanard-8&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;8&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;55% - 80%&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;70%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;&lt;caption&gt;Performance impacts of an additional SDN layer (Weave)&lt;/caption&gt;&lt;/p&gt;

&lt;h3&gt;Absolute data transfer rates of bare (grey), containerized (red) and overlay network connected (blue) services&lt;/h3&gt;

&lt;p&gt;&lt;img class='nogrey' src=&quot;/img/posts/absolute-container-sdn.png&quot; width=100%&gt;
&lt;strong&gt;Median transfer rates with 90% confidence bands (5% and 95% percentile) 
and TCP standard receive window of 83780 bytes (dotted lines)&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;Relative impact of containers (red) and overlay network (blue) compared with a bare (grey) deployment&lt;/h3&gt;

&lt;p&gt;&lt;img class='nogrey' src=&quot;/img/posts/relative-container-sdn.png&quot; width=100%&gt;
&lt;strong&gt;Relative transfer rates and TCP standard receive window of 83780 bytes (dotted lines)&lt;/strong&gt;&lt;/p&gt;

      </description>
      <pubDate>Tue, 24 Nov 2015 00:00:00 +0100</pubDate>
      <link>http://www.nkode.io//2015/11/24/how-to-operate-container-clusters-more-efficiently.html</link>
      <guid isPermaLink="true">http://www.nkode.io//2015/11/24/how-to-operate-container-clusters-more-efficiently.html</guid>
    </item>
    
    <item>
      <title>Programming I (Winter 2015)</title>
      <description>
        
        &lt;img src=&quot;/img/posts/java-code.jpg&quot;&gt;
        
        &lt;p&gt;The lecture &lt;strong&gt;Programming I&lt;/strong&gt; is about fundamentals of programming
for freshman students.&lt;/p&gt;

&lt;p&gt;The lecture covers aspects like primitive and reference data types, operators, expressions,
control flow, routine (method) definitions, I/O programming,
recursive and object oriented programming.
JAVA is used as teaching language, nevertheless the principles are applicable to every (imperative or class based object oriented) programming language.&lt;/p&gt;

&lt;p&gt;Lecture is given for computer science students at Lübeck University of Applied Sciences.&lt;/p&gt;

&lt;p&gt;Lecture will cover following aspects:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Fundamental concepts&lt;/strong&gt; of programming including &lt;strong&gt;programming paradigms&lt;/strong&gt; and &lt;strong&gt;runtime models&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Variables&lt;/strong&gt;, &lt;strong&gt;data types&lt;/strong&gt;, &lt;strong&gt;operators&lt;/strong&gt; and &lt;strong&gt;expressions&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Control flow&lt;/strong&gt; and &lt;strong&gt;routines&lt;/strong&gt; (functions, procedures, methods)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reference data types&lt;/strong&gt; and &lt;strong&gt;collections&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;(Stream based) &lt;strong&gt;I/O programming&lt;/strong&gt; and &lt;strong&gt;serialization&lt;/strong&gt; of objects&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Recursive programming&lt;/strong&gt; and &lt;strong&gt;recursive datastructures&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Functional programming&lt;/strong&gt; using &lt;strong&gt;lambda functions&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Exception handling&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Introduction to &lt;strong&gt;object oriented programming&lt;/strong&gt; and &lt;strong&gt;UML&lt;/strong&gt; introducing fundamental concepts like &lt;strong&gt;abstraction&lt;/strong&gt;, &lt;strong&gt;encapsulation&lt;/strong&gt;, &lt;strong&gt;polymorphism&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Course Material (german only)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Lecture Unit 1: &lt;a href=&quot;/assets/ws2015/progI/Unit01.pdf&quot;&gt;Core concepts of programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lecture Unit 2: &lt;a href=&quot;/assets/ws2015/progI/Unit02.pdf&quot;&gt;Fundamentals of imperative programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lecture Unit 3: &lt;a href=&quot;/assets/ws2015/progI/Unit03.pdf&quot;&gt;Reference data types and collections&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lecture Unit 4: &lt;a href=&quot;/assets/ws2015/progI/Unit04.pdf&quot;&gt;I/O programming, serialization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lecture Unit 5: &lt;a href=&quot;/assets/ws2015/progI/Unit05.pdf&quot;&gt;Recursive and functional programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lecture Unit 6: &lt;a href=&quot;/assets/ws2015/progI/Unit06.pdf&quot;&gt;OO and UML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Exercises: &lt;a href=&quot;/assets/ws2015/progI/excercises.pdf&quot;&gt;Catalogue of excercises&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Youtube Playlist: &lt;a href=&quot;https://www.youtube.com/playlist?list=PL06-G-mnBYTJ2QffB3jgjZH-1TVIwMDr8&quot;&gt;Excercises of WS2015/16 explained&lt;/a&gt; (thanks to &lt;strong&gt;Marco Torge Gabrecht&lt;/strong&gt; for providing this tremendous work)&lt;/li&gt;
&lt;/ul&gt;

      </description>
      <pubDate>Wed, 16 Sep 2015 00:00:00 +0200</pubDate>
      <link>http://www.nkode.io//lecture/2015/09/16/lecture-programming-i.html</link>
      <guid isPermaLink="true">http://www.nkode.io//lecture/2015/09/16/lecture-programming-i.html</guid>
    </item>
    
    <item>
      <title>Fundamentals of Programming (Winter 2015)</title>
      <description>
        
        &lt;img src=&quot;/img/posts/java-code.jpg&quot;&gt;
        
        &lt;p&gt;The lecture is about fundamentals of programming
for freshman students.&lt;/p&gt;

&lt;p&gt;The lecture covers aspects like primitive and reference data types, operators, expressions,
control flow, routine (method) definitions
recursive and object oriented programming.
JAVA is used as teaching language, nevertheless the principles are applicable to every (imperative or class based object oriented) programming language.&lt;/p&gt;

&lt;p&gt;Lecture is given for &lt;em&gt;information technology and design&lt;/em&gt; students at Lübeck University of Applied Sciences.&lt;/p&gt;

&lt;p&gt;Lecture will cover following aspects:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Fundamental concepts&lt;/strong&gt; of programming including &lt;strong&gt;programming paradigms&lt;/strong&gt; and &lt;strong&gt;runtime models&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Variables&lt;/strong&gt;, &lt;strong&gt;data types&lt;/strong&gt;, &lt;strong&gt;operators&lt;/strong&gt; and &lt;strong&gt;expressions&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Control flow&lt;/strong&gt; and &lt;strong&gt;routines&lt;/strong&gt; (functions, procedures, methods)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reference data types&lt;/strong&gt; and &lt;strong&gt;collections&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;(Stream based) &lt;strong&gt;I/O programming&lt;/strong&gt; and &lt;strong&gt;serialization&lt;/strong&gt; of objects&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Recursive programming&lt;/strong&gt; and &lt;strong&gt;datastructures&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Course Material (german only)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Lecture Unit 1: &lt;a href=&quot;/assets/ws2015/progI/Unit01.pdf&quot;&gt;Core concepts of programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lecture Unit 2: &lt;a href=&quot;/assets/ws2015/progI/Unit02.pdf&quot;&gt;Fundamentals of imperative programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lecture Unit 3: &lt;a href=&quot;/assets/ws2015/progI/Unit03.pdf&quot;&gt;Reference data types and collections&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lecture Unit 4: &lt;a href=&quot;/assets/ws2015/progI/Unit04.pdf&quot;&gt;I/O programming, serialization&lt;/a&gt; (skipped, just for self study)&lt;/li&gt;
&lt;li&gt;Lecture Unit 5: &lt;a href=&quot;/assets/ws2015/progI/Unit05.pdf&quot;&gt;Recursive programming&lt;/a&gt; (functional programming skipped, just for self study)&lt;/li&gt;
&lt;li&gt;Exercises: &lt;a href=&quot;/assets/ws2015/progI/excercises.pdf&quot;&gt;Catalogue of excercises&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Youtube Playlist: &lt;a href=&quot;https://www.youtube.com/playlist?list=PL06-G-mnBYTJ2QffB3jgjZH-1TVIwMDr8&quot;&gt;Excercises of WS2015/16 explained&lt;/a&gt; (thanks to &lt;strong&gt;Marco Torge Gabrecht&lt;/strong&gt; for providing this tremendous work)&lt;/li&gt;
&lt;/ul&gt;

      </description>
      <pubDate>Wed, 16 Sep 2015 00:00:00 +0200</pubDate>
      <link>http://www.nkode.io//lecture/2015/09/16/lecture-fundamentals-of-programming.html</link>
      <guid isPermaLink="true">http://www.nkode.io//lecture/2015/09/16/lecture-fundamentals-of-programming.html</guid>
    </item>
    
    <item>
      <title>And the winner is ... TETRIS</title>
      <description>
        
        &lt;img src=&quot;/assets/webtech-hall-of-fame/background.jpg&quot;&gt;
        
        &lt;p&gt;We had some fun this summer semester &lt;a href=&quot;/lecture/2015/03/01/lecture-webtech.html&quot;&gt;webtechnology course&lt;/a&gt;. 
My students implemented several classical games as &lt;a href=&quot;https://www.dartlang.org/&quot;&gt;Dart&lt;/a&gt; single page HTML &amp;#39;apps&amp;#39;.&lt;/p&gt;

&lt;p&gt;Three games entered the &lt;a href=&quot;/assets/webtech-hall-of-fame/index.html&quot;&gt;Webtech Hall of Fame&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;#1: &lt;a href=&quot;/assets/ss2015/webtech/games/tetris/index.html&quot;&gt;Tetris&lt;/a&gt; by Antonia Berg, Berengar Doege, and Max Golubew&lt;/li&gt;
&lt;li&gt;#2: &lt;a href=&quot;/assets/ss2015/webtech/games/spaceinvaders/space.html&quot;&gt;Space Invaders&lt;/a&gt; by Viktor Gies, Marius Rosenbaum, and Axel Wallow&lt;/li&gt;
&lt;li&gt;#3: &lt;a href=&quot;/assets/ss2015/webtech/games/unblockit/index.html&quot;&gt;UnBlock It&lt;/a&gt; by Marco Buchholz, Timo Hamann, and Florian Richter&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Congratulations.&lt;/p&gt;

&lt;p&gt;&lt;iframe width='90%' height='2048px' src=&quot;/assets/webtech-hall-of-fame/index.html&quot;&gt;Uupps, your browser does not support iframes.&lt;iframe&gt;&lt;/p&gt;

      </description>
      <pubDate>Wed, 15 Jul 2015 00:00:00 +0200</pubDate>
      <link>http://www.nkode.io//2015/07/15/And-the-winner-is-tetris.html</link>
      <guid isPermaLink="true">http://www.nkode.io//2015/07/15/And-the-winner-is-tetris.html</guid>
    </item>
    
    <item>
      <title>New Paper: About Automatic Benchmarking of IaaS Cloud Service Providers for a World of Container Clusters</title>
      <description>
        
        &lt;img src=&quot;/img/posts/paper.jpg&quot;&gt;
        
        &lt;p&gt;&lt;strong&gt;Abstract.&lt;/strong&gt; Cloud service selection can be a complex and challenging task for a cloud engineer. 
Most current approaches try to identify a best cloud service provider by evaluating several relevant criteria like prices, processing, memory, disk, network performance, quality of service and so on. 
Nevertheless, the decision making problem involves so many variables, that it is hard to model it appropriately. 
We present an approach that is not about selecting a best cloud service provider. 
It is about selecting most similar resources provided by different cloud service providers. 
This fits much better practical needs of cloud service engineers. 
Especially, if container clusters are involved.
EasyCompare, an automated benchmarking tool suite to compare cloud service providers, is able to benchmark and compare virtual machine types of different cloud service providers using an Euclidian distance measure. 
It turned out, that only 1% of theoretical possible machine pairs have to be considered in practice. 
These relevant machine types can be identified by systematic benchmark runs in less than three hours. 
We present some expectable but also astonishing evaluation results of EasyCompare used to evaluate two major and representative public cloud service providers: Amazon Web Services and Google Compute Engine.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You may want to check the paper in open access &lt;a href=&quot;http://jccr.uscip.us/PublishedIssues.aspx&quot;&gt;Journal of Cloud Computing Research&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;or via &lt;a href=&quot;https://www.researchgate.net/publication/278242891&quot;&gt;ResearchGate&lt;/a&gt; to dig into all the details.&lt;/li&gt;
&lt;li&gt;You will find informations how to cite the paper &lt;a href=&quot;/bibliography/KQ2015.html&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You will find some benchmark excerpts comparing Amazon Web Services and Google Compute Engine from the paper below:&lt;/p&gt;

&lt;h3&gt;Similarities of Provided Instance/Machine Types&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/iaas-similarities.png&quot; width=&quot;100%&quot;&gt;&lt;/p&gt;

&lt;h3&gt;Comparing Processing Performance&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/gce-aws-processing.png&quot; width=&quot;100%&quot;&gt;&lt;/p&gt;

&lt;h3&gt;Comparing Memory Transfer&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/gce-aws-memory.png&quot; width=&quot;100%&quot;&gt;&lt;/p&gt;

&lt;h3&gt;Comparing Disk I/O Transfer&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/gce-aws-disk.png&quot; width=&quot;100%&quot;&gt;&lt;/p&gt;

&lt;h3&gt;Comparing Network Transfer&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/gce-aws-network.png&quot; width=&quot;100%&quot;&gt;&lt;/p&gt;

&lt;h3&gt;All measured Instance Types&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/gce-aws-types.png&quot; width=&quot;100%&quot;&gt;&lt;/p&gt;

      </description>
      <pubDate>Mon, 15 Jun 2015 00:00:00 +0200</pubDate>
      <link>http://www.nkode.io//2015/06/15/paper-automatic-benchmark-iaas.html</link>
      <guid isPermaLink="true">http://www.nkode.io//2015/06/15/paper-automatic-benchmark-iaas.html</guid>
    </item>
    
    <item>
      <title>Sperrvermerke bei Abschlussarbeiten</title>
      <description>
        
        &lt;img src=&quot;/img/posts/top-secret.jpg&quot;&gt;
        
        &lt;p&gt;&lt;small&gt;
&lt;strong&gt;Hinweis:&lt;/strong&gt; Dies ist die self-archive Version eines Artikels, der 2015 im &lt;a href=&quot;http://www.springer.com/computer/journal/287&quot;&gt;Informatik Spektrum&lt;/a&gt; der
&lt;a href=&quot;http://www.gi.de/&quot;&gt;Gesellschaft für Informatik&lt;/a&gt; veröffentlicht wurde (&lt;a href=&quot;http://link.springer.com&quot;&gt;Springer Verlag&lt;/a&gt;). Der Original Artikel findet sich &lt;a href=&quot;http://link.springer.com/article/10.1007/s00287-015-0888-7&quot;&gt;hier&lt;/a&gt;.
&lt;/small&gt;&lt;/p&gt;

&lt;h3&gt;Zusammenfassung&lt;/h3&gt;

&lt;p&gt;Werden Bachelor- oder Masterarbeiten in Unternehmen geschrieben, werden diese häufig mit Sperrvermerken versehen, um die Interessen der Unternehmen zu schützen. Solche Abschlussarbeiten bearbeiten häufig interessante und äußerst praxisrelevante Fragestellungen. Erkenntnisse und Lösungsansätze gelangen jedoch kaum an das Licht der Öffentlichkeit. Insbesondere an Fachhochschulen wird das Schreiben von Abschlussarbeiten in Unternehmen gefördert und gerne gesehen. Praxisrelevante Fragestellungen finden sich nun mal häufig in Unternehmen. Sperrvermerke werden dabei von den meisten Hochschullehrern mittlerweile als normal hingenommen, ganz selten nur hinterfragt. Sperrvermerke fördern aber eine alles andere als akademische Art des Umgangs mit Wissen. Mit Sperrvermerken erziehen wir unsere Studierenden dazu, ihr Wissen und ihre Erkenntnisse nicht mehr zu teilen, sondern es als Alleinstellungsmerkmal zu begreifen. Sollte ein Studium aber letztendlich nicht den Drang vermitteln, sein Wissen mit anderen zu teilen (und dadurch zu mehren), als das Bedürfnis, es wegzuschließen? Die Praxis der Sperrvermerke sieht anders aus.&lt;/p&gt;

&lt;h3&gt;Download&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;/assets/self-archive/Sperrvermerke-2015-03-16.pdf&quot;&gt;Self archive Version des Artikels.&lt;/a&gt;&lt;/p&gt;

      </description>
      <pubDate>Mon, 13 Apr 2015 00:00:00 +0200</pubDate>
      <link>http://www.nkode.io//2015/04/13/sperrvermerk.html</link>
      <guid isPermaLink="true">http://www.nkode.io//2015/04/13/sperrvermerk.html</guid>
    </item>
    
    <item>
      <title>About Microservices, Containers and their Underestimated Impact on Network Performance</title>
      <description>
        
        &lt;img src=&quot;/img/posts/nice-cloud-computing-2015.jpg&quot;&gt;
        
        &lt;p&gt;I am going to present this paper on the &lt;a href=&quot;http://www.iaria.org/conferences2015/CLOUDCOMPUTING15.html&quot;&gt;6th International Conference on Cloud Computing&lt;/a&gt; (CLOUD COMPUTING 2015, &lt;a href=&quot;http://www.iaria.org/conferences2015/ProgramCLOUDCOMPUTING15.html&quot;&gt;Cloud Computing 7, Challenging Features Track&lt;/a&gt;) in Nice, France.&lt;/p&gt;

&lt;p&gt;A full text version of the paper is provided via &lt;span class=&quot;researchgate&quot;&gt;&lt;a href=&quot;https://www.researchgate.net/publication/273456042&quot;&gt;Research&lt;em&gt;Gate&lt;/em&gt;&lt;/a&gt;&lt;/span&gt;.
Informations how to cite the paper can be found &lt;a href=&quot;/bibliography/Kra2015b.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Abstract&lt;/h3&gt;

&lt;p&gt;Microservices are used to build complex applications composed of small, independent and highly decoupled processes. Recently, microservices are often mentioned in one breath with container technologies like Docker. That is why operating system virtualization experiences a renaissance in cloud computing. These approaches shall provide horizontally scalable, easily deployable systems and a high-performance alternative to hypervisors. Nevertheless, performance impacts of containers on top of hypervisors are hardly investigated. Furthermore, microservice frameworks often come along with software defined networks. This contribution presents benchmark results to quantify the impacts of container, software defined networking and encryption on network performance. Even containers, although postulated to be lightweight, show a noteworthy impact to network performance. These impacts can be minimized on several system layers. Some design recommendations for cloud deployed systems following the microservice architecture pattern are derived.&lt;/p&gt;

&lt;h3&gt;Slides&lt;/h3&gt;

&lt;p&gt;&lt;center&gt;
&lt;iframe src=&quot;http://www.slideshare.net/slideshow/embed_code/45853143&quot;
        width=&quot;100%&quot;
        height=&quot;500px&quot;
        frameborder=&quot;0&quot;
        marginwidth=&quot;0&quot;
        marginheight=&quot;0&quot;
        scrolling=&quot;no&quot;
        style=&quot;border: 1px solid white; max-width: 100%; background-color: white;&quot;&gt;&lt;/iframe&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;h3&gt;Data&lt;/h3&gt;

&lt;p&gt;A Docker container providing a MySQL database containing measurement data
and analytical views of presented experiments is provided as well as a
&lt;a href=&quot;https://github.com/nkratzke/sdvn-impact-database&quot;&gt;github repository&lt;/a&gt;.
Run it by installing Docker and launch the following commands:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker build -t sdvn github.com/nkratzke/sdvn-impact-database
docker run -d -p 3306:3306 sdvn&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;How to access this database is described &lt;a href=&quot;https://github.com/nkratzke/sdvn-impact-database&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Tools&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/nkratzke/pingpong&quot;&gt;Ping Pong&lt;/a&gt; system was used to collect the benchmark data. You can
easily install the system on any Linux system.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git clone https://github.com/nkratzke/pingpong.git
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;pingpong
sudo sh ./install.sh&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This will install &lt;em&gt;Dart&lt;/em&gt; runtime and development environment, apachebench,
&lt;em&gt;Docker&lt;/em&gt; as well as the docker overlay network &lt;em&gt;weave&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;It is possible to run the ping and pong service as a docker container.
Therefore, you have to build a pingpong image on your ping and pong hosts, like that:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker build -t pingpong github.com/nkratzke/pingpong&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;For further information please read the informations provided with the
&lt;a href=&quot;https://github.com/nkratzke/pingpong&quot;&gt;Ping Pong github repository&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Conference Impressions&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/Nice_2015.jpg&quot; width=&quot;32%&quot;&gt;
&lt;img src=&quot;/img/posts/Nice-2015-2.jpg&quot; width=&quot;32%&quot;&gt;
&lt;img src=&quot;/img/posts/Nice-2015-3.jpg&quot; width=&quot;32%&quot;&gt;&lt;/p&gt;

      </description>
      <pubDate>Mon, 16 Mar 2015 00:00:00 +0100</pubDate>
      <link>http://www.nkode.io//2015/03/16/cloudcomputing2015.html</link>
      <guid isPermaLink="true">http://www.nkode.io//2015/03/16/cloudcomputing2015.html</guid>
    </item>
    
    <item>
      <title>Web Technologies (Summer 2015)</title>
      <description>
        
        &lt;img src=&quot;/img/posts/webtech.jpg&quot;&gt;
        
        &lt;p&gt;This project is about common technologies used to build (part) of web information systems.
The project course is given for students
at Lübeck University of Applied Sciences (in german language).
The course covers following aspects:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;IaaS Cloud Computing&lt;/strong&gt; to host (distributed and scalable) web applications&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;descriptional languages&lt;/strong&gt; for web content like &lt;a href=&quot;http://www.w3.org/html/&quot;&gt;HTML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;presentational languages&lt;/strong&gt; for web content like &lt;a href=&quot;http://www.w3.org/Style/CSS/&quot;&gt;CSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Document Object Model&lt;/strong&gt; (DOM)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;client and server side programming&lt;/strong&gt; with &lt;a href=&quot;https://www.dartlang.org&quot;&gt;Dart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;security aspects&lt;/strong&gt; like &lt;em&gt;HTML/SQL injections&lt;/em&gt; or &lt;em&gt;session hijacking&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Students apply their intensified web programming skills by developing
a small one person, DOM-tree based (that means not canvas based)
online game like &lt;em&gt;Tetris&lt;/em&gt; or &lt;em&gt;Boulder Dash&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;IaaS Cloud Computing is introduced to provide a convenient form
to host even complex and distributed web based systems.&lt;/p&gt;

&lt;h3&gt;Course Material (german only)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Crash course: &lt;a href=&quot;/assets/ss2015/webtech/webtech-cloud.pdf&quot;&gt;IaaS Cloud Computing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;HTML Units: &lt;a href=&quot;/assets/ss2015/webtech/webtech-html-css.pdf&quot;&gt;HTML and CSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Dart Units: &lt;a href=&quot;/assets/ss2015/webtech/webtech-dart-i.pdf&quot;&gt;Part 1&lt;/a&gt;, &lt;a href=&quot;/assets/ss2015/webtech/webtech-dart-ii.pdf&quot;&gt;Part 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Exercises: &lt;a href=&quot;/assets/ss2015/webtech/webtech-ex1.pdf&quot;&gt;Excercise 1&lt;/a&gt;, &lt;a href=&quot;/assets/ss2015/webtech/webtech-ex2.pdf&quot;&gt;Excercise 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Game outcomes&lt;/h3&gt;

&lt;p&gt;Webtech course (summer 2015) game outcomes developped by students.
Feel free to play around some classical arcade games as single page html &amp;quot;apps&amp;quot;.
All games are only using HTML, CSS and &lt;a href=&quot;https://www.dartlang.org&quot;&gt;Dart&lt;/a&gt;.
Canvas was not allowed to solve the problem.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/assets/ss2015/webtech/games/breakout/game.html&quot;&gt;Break Out&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/assets/ss2015/webtech/games/caveescape/index.html&quot;&gt;Cave Escape&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/assets/ss2015/webtech/games/dicewars/index.html&quot;&gt;Dice Wars&lt;/a&gt;, implementation also available on &lt;a href=&quot;https://github.com/Hex-3-En/DartyDiceWars&quot;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/assets/ss2015/webtech/games/pacman/index.html&quot;&gt;Pac Man&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/assets/ss2015/webtech/games/rennspiel/index.html&quot;&gt;Rennspiel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/assets/ss2015/webtech/games/stackattack/index.html&quot;&gt;Stack Attack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/assets/ss2015/webtech/games/spaceinvaders/space.html&quot;&gt;Space Invaders, Variant 1&lt;/a&gt; entered &lt;a href=&quot;/assets/webtech-hall-of-fame/index.html&quot;&gt;Hall of Fame&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/assets/ss2015/webtech/games/spaceinvaders2/index.html&quot;&gt;Space Invaders, Variant 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/assets/ss2015/webtech/games/tetris/index.html&quot;&gt;Tetris&lt;/a&gt; entered &lt;a href=&quot;/assets/webtech-hall-of-fame/index.html&quot;&gt;Hall of Fame&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/assets/ss2015/webtech/games/unblockit/index.html&quot;&gt;UnBlock It&lt;/a&gt; entered &lt;a href=&quot;/assets/webtech-hall-of-fame/index.html&quot;&gt;Hall of Fame&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;funded&quot;&gt;
&lt;center&gt;
&lt;p&gt;
Course is supported by educational grants from:
&lt;/p&gt;
&lt;a href=&quot;https://aws.amazon.com/&quot;&gt;
  &lt;img src=&quot;/img/posts/amazon-web-services.png&quot; height=&quot;50px&quot;&gt;
&lt;/a&gt;
&lt;/center&gt;
&lt;/div&gt;

      </description>
      <pubDate>Sun, 01 Mar 2015 00:00:00 +0100</pubDate>
      <link>http://www.nkode.io//lecture/2015/03/01/lecture-webtech.html</link>
      <guid isPermaLink="true">http://www.nkode.io//lecture/2015/03/01/lecture-webtech.html</guid>
    </item>
    
    <item>
      <title>Programming II (Summer 2015)</title>
      <description>
        
        &lt;img src=&quot;/img/posts/java-code.jpg&quot;&gt;
        
        &lt;p&gt;The lecture &lt;strong&gt;Programming II&lt;/strong&gt; continues &lt;strong&gt;Programming I&lt;/strong&gt; by introducing
more sophistacted programming aspects
for freshman students (second semester).&lt;/p&gt;

&lt;p&gt;JAVA is used as teaching language. Nevertheless, the principles are applicable to every (class based) object oriented programming language.&lt;/p&gt;

&lt;p&gt;Lecture is given for students of the &lt;a href=&quot;http://www.fh-luebeck.de/Inhalt/03_Hochschulangehoerige_Ch031/04_FB_Elektrotechnik/03_Studiengaenge/04_Q_Informatik_BSc13/index.html&quot;&gt;Computer Science/Software Engineering&lt;/a&gt; study programme
at Lübeck University of Applied Sciences and will cover following aspects:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Object oriented concepts&lt;/strong&gt; and programming techniques&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Testing&lt;/strong&gt; of software including introduction to &lt;strong&gt;contracts&lt;/strong&gt;, &lt;strong&gt;unit testing&lt;/strong&gt; and &lt;strong&gt;code coverage&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Generics&lt;/strong&gt; introducing concepts like generic classes and methodes as well as concepts like type erasure, bounds&lt;/li&gt;
&lt;li&gt;Introduction to &lt;strong&gt;OOAD&lt;/strong&gt; (object oriented analysis and design) by example of Tic Tac Toe&lt;/li&gt;
&lt;li&gt;Graphical user interfaces (&lt;strong&gt;GUI&lt;/strong&gt;) using Swing introducing &lt;strong&gt;MVC&lt;/strong&gt; (model view controler) paradigma&lt;/li&gt;
&lt;li&gt;Concurrent programming using &lt;strong&gt;threads&lt;/strong&gt; introducing accompanying &lt;strong&gt;thread safeness&lt;/strong&gt; problems like race conditions, producer-consumer problem, deadlocks.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Course Material (german only)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Lecture Unit 6: &lt;a href=&quot;/assets/ss2015/progII/prog-unit06.pdf&quot;&gt;Introduction to object oriented programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Self Study Unit 7: &lt;a href=&quot;/assets/ss2015/progII/prog-unit07.pdf&quot;&gt;Further aspects of object oriented programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lecture Unit 8: &lt;a href=&quot;/assets/ss2015/progII/prog-unit08.pdf&quot;&gt;Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lecture Unit 9: &lt;a href=&quot;/assets/ss2015/progII/prog-unit09.pdf&quot;&gt;Generics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lecture Unit 10: &lt;a href=&quot;/assets/ss2015/progII/prog-unit10.pdf&quot;&gt;OOAD by example of Tic Tac Toe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lecture Unit 11: &lt;a href=&quot;/assets/ss2015/progII/prog-unit11.pdf&quot;&gt;GUI and MVC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lecture Unit 12: &lt;a href=&quot;/assets/ss2015/progII/prog-unit12.pdf&quot;&gt;Concurrent programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Exercises: &lt;a href=&quot;/assets/ss2015/progII/prog-excercises.pdf&quot;&gt;Catalogue of excercises&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
      <pubDate>Sun, 01 Mar 2015 00:00:00 +0100</pubDate>
      <link>http://www.nkode.io//lecture/2015/03/01/lecture-programming-ii.html</link>
      <guid isPermaLink="true">http://www.nkode.io//lecture/2015/03/01/lecture-programming-ii.html</guid>
    </item>
    
    <item>
      <title>Advanced Programming (Summer 2015)</title>
      <description>
        
        &lt;img src=&quot;/img/posts/java-code.jpg&quot;&gt;
        
        &lt;p&gt;The lecture &lt;strong&gt;Advanced Programming&lt;/strong&gt; continues &lt;strong&gt;Fundaments of Programming&lt;/strong&gt; by introducing
more sophistacted programming aspects
for freshman students (second semester).&lt;/p&gt;

&lt;p&gt;JAVA is used as teaching language. Nevertheless, the principles are applicable to every (class based) object oriented programming language.&lt;/p&gt;

&lt;p&gt;Lecture is given for students of the &lt;a href=&quot;http://www.fh-luebeck.de/Inhalt/03_Hochschulangehoerige_Ch031/04_FB_Elektrotechnik/03_Studiengaenge/01_Q_ITD_BSc/index.html&quot;&gt;Information Technology and Design&lt;/a&gt; study program at Lübeck University of Applied Sciences
and will cover following aspects:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Object oriented concepts and programming techniques&lt;/li&gt;
&lt;li&gt;Introduction to &lt;strong&gt;OOAD&lt;/strong&gt; (object oriented analysis and design) by example of Tic Tac Toe&lt;/li&gt;
&lt;li&gt;Graphical user interfaces (&lt;strong&gt;GUI&lt;/strong&gt;) using Swing introducing &lt;strong&gt;MVC&lt;/strong&gt; (model view controler) paradigma&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Course Material (german only)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Lecture Unit 6: &lt;a href=&quot;/assets/ss2015/progII/prog-unit06.pdf&quot;&gt;Introduction to object oriented programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Self Study Unit 7: &lt;a href=&quot;/assets/ss2015/progII/prog-unit07.pdf&quot;&gt;Further aspects of object oriented programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lecture Unit 10: &lt;a href=&quot;/assets/ss2015/progII/prog-unit10.pdf&quot;&gt;OOAD by example of Tic Tac Toe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lecture Unit 11: &lt;a href=&quot;/assets/ss2015/progII/prog-unit11.pdf&quot;&gt;GUI and MVC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Exercises: &lt;a href=&quot;/assets/ss2015/progII/prog-excercises.pdf&quot;&gt;Catalogue of excercises&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
      <pubDate>Sun, 01 Mar 2015 00:00:00 +0100</pubDate>
      <link>http://www.nkode.io//lecture/2015/03/01/lecture-advanced-programming.html</link>
      <guid isPermaLink="true">http://www.nkode.io//lecture/2015/03/01/lecture-advanced-programming.html</guid>
    </item>
    
    <item>
      <title>Some Links to Consider when Writing a Paper</title>
      <description>
        
        &lt;img src=&quot;/img/posts/writing-a-paper.jpg&quot;&gt;
        
        &lt;h3&gt;or &amp;quot;Mastering the first 10 minutes of a review&amp;quot;&lt;/h3&gt;

&lt;p&gt;Doing a good review can take several hours.
So reviewers will check whether a submitted paper is worth their time and effort.
According to a checklist (by Electronical Journal
  of Knowlegde Management, &lt;a href=&quot;http://www.ejkm.com/main.html&quot;&gt;EJKM&lt;/a&gt;), a reviewer should spend &lt;strong&gt;10 to 20 minutes to decide whether
  a paper is worth&lt;/strong&gt; the effort of a detailed review or not. Other journals have similar guidelines for their reviewers. So every reviewer
will likely do this judgement by doing the following steps
(whether this is done consciously or unconsciously).&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A reviewer will examine the &lt;strong&gt;title&lt;/strong&gt; whether it is understandable&lt;/li&gt;
&lt;li&gt;A reviewer will read the &lt;strong&gt;abstract&lt;/strong&gt; to figure out whether it is a clear and understandable summary&lt;/li&gt;
&lt;li&gt;A reviewer will skim-read the &lt;strong&gt;introduction&lt;/strong&gt; to figure our whether the paper promises interesting aspects&lt;/li&gt;
&lt;li&gt;A reviewer will skip to the &lt;strong&gt;conclusion&lt;/strong&gt; and &lt;strong&gt;summary&lt;/strong&gt; to see what is the benefit of this paper&lt;/li&gt;
&lt;li&gt;A reviewer will scan the &lt;strong&gt;references&lt;/strong&gt; to see that there is a reasonable amount of work behind the research&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There exist several online sources helping you to outline convincing papers. E.g. the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://writing.wisc.edu/Handbook/PlanResearchPaper.html&quot;&gt;Writing a research paper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.colby.edu/biology/BI17x/writing_papers.html&quot;&gt;A guide to writing scientific papers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ncbi.nlm.nih.gov/pmc/articles/PMC3178846/&quot;&gt;How to write your research papers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.thewritesource.com/apa/apa.pdf&quot;&gt;Sample APA research paper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://conferences.sigcomm.org/co-next/2006/files/pres/10tipsforwritingapaper.pdf&quot;&gt;Top-10 tips for writing a paper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But I try to summarize some key findings and more detailed online sources how to convince a reviewer in his or her first 10 minutes reviewing your paper by paying special attention to a papers &lt;em&gt;title&lt;/em&gt;, &lt;em&gt;abstract&lt;/em&gt;, &lt;em&gt;introduction&lt;/em&gt; and &lt;em&gt;conclusion and summary&lt;/em&gt;.&lt;/p&gt;

&lt;h3&gt;How to write a convincing title&lt;/h3&gt;

&lt;p&gt;A title is a super summary of your paper. Although intended audience are undergraduate students, I find &lt;a href=&quot;http://www.lsa.umich.edu/UMICH/sweetland/Home/Undergraduate/Writing%20Guides/HowDoIWriteaGreatTitle.pdf&quot;&gt;Howto write a Great Title&lt;/a&gt; useful to create interesting titles for paper submission.&lt;/p&gt;

&lt;p&gt;I try to figure out some essential points. A good title should be composed of a &lt;em&gt;hook&lt;/em&gt;, a set of &lt;em&gt;key terms&lt;/em&gt; and a &lt;em&gt;source&lt;/em&gt; (or location, domain).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;The hook&lt;/strong&gt; is   often a catchy, readable phrase that    advertises  the paper’s   specific    subject.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Key terms&lt;/strong&gt; are crucial words   or phrases with a specific meaning in a particular domain.  The use ofkey   terms   in  a   paper’s   title   will    make    the paper   more searchable in research paper   databases.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The source&lt;/strong&gt; (or &amp;quot;location&amp;quot;)    is the domain   where   the concepts
under   discussion have a specific meaning (e.g. a process is something different for an operating system specialist and a product engineer).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;big&gt;
The Effects of Light    and Temperature on the Growth of Populations of the Bacterium &lt;em&gt;Escherichia coli&lt;/em&gt;
&lt;/big&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Explanation:&lt;/strong&gt; The    hook    in  a   science
paper   is  often   simply  a   highly  relevant    but exciting    and direct  introduction    of  a   new approach    or  discovery (in this case &amp;quot;The effect of ... on ...&amp;quot;).    The hook is often combined using a  catalog of  key terms   relevant to a domain. Here  we  see a   number  of  key terms:  &amp;quot;light&amp;quot;,    &amp;quot;temperature&amp;quot;,  &amp;quot;growth&amp;quot;, and   the &amp;quot;bacterium&amp;quot;.    Therefore, the  title   would   be  highly  searchable  and is  very    informative.    The final   part is the source  which   clearly identifies  the bacterium   under   discussion (&amp;quot;Escheria coli&amp;quot;).&lt;/p&gt;

&lt;p&gt;You may want to check following links as well.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.lsa.umich.edu/UMICH/sweetland/Home/Undergraduate/Writing%20Guides/HowDoIWriteaGreatTitle.pdf&quot;&gt;Howto write a great title&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://writing.markfullmer.com/academic-style-titles&quot;&gt;How to write academic style titles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://writing.umn.edu/sws/assets/pdf/quicktips/titles.pdf&quot;&gt;Writing an effective title&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://umanitoba.ca/student/academiclearning/media/Writing_a_Great_Title_NEW.pdf&quot;&gt;Writing a great title&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Howto write a convincing abstract &lt;small&gt;in six sentences&lt;/small&gt;&lt;/h3&gt;

&lt;p&gt;Because research databases contain only abstracts, it is vital to write a meaningful description of your paper to entice other researchers obtaining the full paper which could increase your citation rate.
Writing a convincing abstract is the most challenging part of a paper for me.
You should not simply copy your summary or conclusion.
Maybe you want to write your abstract in six sentences, according to this very helpfull &lt;a href=&quot;http://www.easterbrook.ca/steve/2010/01/how-to-write-a-scientific-abstract-in-six-easy-steps/&quot;&gt;howto&lt;/a&gt; (in my eyes).
It should cover &lt;em&gt;backgorund, purpose, methods used, findings, conclusion&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Hopefully, I took the essentials from it (but you may want to check all the links provided below).&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Introduce your paper in one sentence&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Simply answer the question &lt;em&gt;&amp;quot;What’s the topic?&amp;quot;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;State the problem you tackle in one sentence.&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;What’s the key research question?&lt;/li&gt;
&lt;li&gt;Remember, your first sentence introduced the overall topic, so now you can build on that.&lt;/li&gt;
&lt;li&gt;Focus on one key question within that topic.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Summarize (in one sentence) why nobody else has adequately answered the research question yet.&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The trick is to explain that there’s this one particular approach that nobody else tried yet.&lt;/li&gt;
&lt;li&gt;But here you’re phrasing it in such a way that it’s clear it’s a gap in the literature.&lt;/li&gt;
&lt;li&gt;So use a phrase such as “previous work did not address …”.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Explain, in one sentence, how you tackled the research question.&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;What’s your big new idea? What’s the new perspective you have adopted?&lt;/li&gt;
&lt;li&gt;What’s your overall view on the question you introduced in step 2?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;In one sentence, how did you go about doing the research that follows from your big idea.&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Did you run experiments? Build a piece of software? Carry out case studies?&lt;/li&gt;
&lt;li&gt;This is likely to be the longest sentence&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;As a single sentence, what’s the key impact of your research?&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Here reader is not looking for the outcome of an experiment.&lt;/li&gt;
&lt;li&gt;Reader is looking for a summary of the implications.&lt;/li&gt;
&lt;li&gt;What’s it all mean? Why should other people care? What can they do with your research.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You may want to check following links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.easterbrook.ca/steve/2010/01/how-to-write-a-scientific-abstract-in-six-easy-steps/&quot;&gt;How to write an abstract in six sentences&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.adelaide.edu.au/writingcentre/learning_guides/learningGuide_writingAnAbstract.pdf&quot;&gt;Writing an abstract&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://users.ece.cmu.edu/%7Ekoopman/essays/abstract.html&quot;&gt;How to write an abstract&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Howto write a convincing introduction &lt;small&gt;telling a story&lt;/small&gt;&lt;/h3&gt;

&lt;p&gt;According to these &lt;a href=&quot;http://conferences.sigcomm.org/co-next/2006/files/pres/10tipsforwritingapaper.pdf&quot;&gt;tips&lt;/a&gt; every paper should tell a story. So introduce the story by&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;presenting new ideas&lt;/li&gt;
&lt;li&gt;giving new insights&lt;/li&gt;
&lt;li&gt;and answer the question why is it important or interesting (universal truth, hot topic, suprises, unexpected results)?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;using the following general &lt;a href=&quot;http://conferences.sigcomm.org/co-next/2006/files/pres/10tipsforwritingapaper.pdf&quot;&gt;outline proposal&lt;/a&gt; for writing an introduction.
It is like a micro structure, you likely find in a lot of introductions.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Paragraph 1:&lt;/strong&gt; What is the problem area and why it is important?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Paragraph 2:&lt;/strong&gt; What is the specific problem in the problem area.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Paragraph 3:&lt;/strong&gt; Tell the elevator pitch.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Paragraph 4:&lt;/strong&gt; How is your story different, better, relates to other work&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Paragraph 5:&lt;/strong&gt; Explain your outline. The famous &amp;quot;The remainder of this paper is structured as follows ...&amp;quot; Normally it covers related work, research methodology, evaluation, future work and conclusion (some of these sections can be combined)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You may want to check following links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://conferences.sigcomm.org/co-next/2006/files/pres/10tipsforwritingapaper.pdf&quot;&gt;Top-10 tips for writing a paper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://explorable.com/how-to-write-an-introduction&quot;&gt;How to write an introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.gallaudet.edu/tip/english_center/writing/guide_to_writing_introductions_and_conclusions.html&quot;&gt;Guide to writing introductions and conclusions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www2.warwick.ac.uk/fac/soc/al/learning_english/leap/writing/moreinfo/&quot;&gt;Writing an introduction&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Howto write a convincing conclusion &lt;small&gt;as take aways&lt;/small&gt;&lt;/h3&gt;

&lt;p&gt;Nobody is really interested in your research outcomes, if you
are not willing to present the essential facts and outcomes in a take away form.
Maybe it is a good strategy to conclude your article according to &amp;quot;&lt;a href=&quot;http://patthomson.wordpress.com/2012/04/06/concluding-the-journal-article/&quot;&gt;Concluding the journal article&lt;/a&gt;&amp;quot;.
I tried to figure out the essentials.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Paragraph 1: Summarize your paper to remind the reader why the article was written.&lt;/strong&gt; At the beginning you will have argued that there is a space in what is known, a puzzle that needs to be solved, a debate that is continuing, or an issue that deserves discussion. The writer will have promised to fill the space, solve the puzzle, contribute to the debate or participate in the discussion. The writer should use the argument made for the need for the article to present the case that this is what they’ve done.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Paragraph 2: Reprise the argument that has been made in introduction without repeating it boringly.&lt;/strong&gt; Try to keep your conclusion a déjà vu free zone.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Paragraph 3: Deal with the &lt;em&gt;So What&lt;/em&gt;, &lt;em&gt;Now What&lt;/em&gt; and &lt;em&gt;Who cares&lt;/em&gt; questions?&lt;/strong&gt; You should not leave the answers to these questions to chance, assuming that any sensible reader will be able to work them out for themselves. The conclusion must tell the reader how and why the presented is significant for practice, policy or further research. It should be made obvious for the reader how the article provides a contribution to knowledge and what implications for further research or action can be derived.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Paragraph 4: Conclude but avoid clichés.&lt;/strong&gt; It’s pretty easy to round off an article with a few pious sentiments. While some tired phrases won’t cause your article to be rejected, it will leave the reader with almost no lasting impression. As the conclusion is the last thing that the reader will encounter, its important that they finish with the things that you want them to remember.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You may want to check following links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://patthomson.wordpress.com/2012/04/06/concluding-the-journal-article/&quot;&gt;Concluding the journal article&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.wikihow.com/Write-a-Conclusion-for-a-Research-Paper&quot;&gt;How to write a conclusion for a research paper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.gallaudet.edu/tip/english_center/writing/guide_to_writing_introductions_and_conclusions.html&quot;&gt;Guide to writing introductions and conclusions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.questia.com/2011/11/how-to-write-a-conclusion-for-a-research-paper/&quot;&gt;How to write a conclusion for a research paper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://leo.stcloudstate.edu/acadwrite/conclude.html&quot;&gt;Strategies for writing a conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
      <pubDate>Thu, 22 Jan 2015 00:00:00 +0100</pubDate>
      <link>http://www.nkode.io//2015/01/22/how-to-write-a-paper.html</link>
      <guid isPermaLink="true">http://www.nkode.io//2015/01/22/how-to-write-a-paper.html</guid>
    </item>
    
    <item>
      <title>Ping Pong</title>
      <description>
        
        &lt;img src=&quot;/img/posts/pingpong-experiment.png&quot;&gt;
        
        &lt;h3&gt;A distributed HTTP-based and REST-like ping-pong system for test and benchmarking purposes.&lt;/h3&gt;

&lt;p&gt;The intended usage of this &lt;a href=&quot;https://github.com/nkratzke/pingpong&quot;&gt;tool suite&lt;/a&gt; (check it out on &lt;a href=&quot;https://github.com/nkratzke/pingpong&quot;&gt;github&lt;/a&gt;) is to run two hosts which are queried (benchmarked) by a third host (the &lt;em&gt;siege&lt;/em&gt;). Host 1 runs a &lt;em&gt;ping&lt;/em&gt; service querying a &lt;em&gt;pong&lt;/em&gt; service (on host 2) for the answer. &lt;em&gt;Ping&lt;/em&gt; and &lt;em&gt;pong&lt;/em&gt; build a very simple distributed system.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/pingpong-experiment.png&quot; width=90%&gt;&lt;/p&gt;

&lt;p&gt;From a benchmark host (this is called the &lt;em&gt;siege&lt;/em&gt; host) a benchmark (e.g. apachebench) is run againt host 1. &lt;em&gt;Ping&lt;/em&gt; host 1 has to interact with &lt;em&gt;pong&lt;/em&gt; host 2 to answer the request. The interaction between both hosts is very simple. Whenever host 1 (&lt;em&gt;ping&lt;/em&gt;) is asked to deliver a document for &amp;#39;/ping/&lt;nr&gt;&amp;#39; this request is passed forward to host 2 (&lt;em&gt;pong&lt;/em&gt;). Host 2 (&lt;em&gt;pong&lt;/em&gt;) returns the answer which is formed of a message &amp;quot;pooooong&amp;quot; where the message is as long in bytes as the number &amp;#39;&lt;nr&gt;&amp;#39; provided with the query (so the answer message length can be specified by the &lt;em&gt;siege&lt;/em&gt; host to benchmark network performance of message sizes of varying length).&lt;/p&gt;

&lt;p&gt;So the following answers would be generated for following requests by host 2:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GET /pong/4 returns &amp;quot;pong&amp;quot;&lt;/li&gt;
&lt;li&gt;GET /pong/5 returns &amp;quot;poong&amp;quot;&lt;/li&gt;
&lt;li&gt;GET /pong/6 returns &amp;quot;pooong&amp;quot;&lt;/li&gt;
&lt;li&gt;and so on&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So we can vary the message size (and therefore the network load) between &lt;em&gt;ping&lt;/em&gt; (host 1) and &lt;em&gt;pong&lt;/em&gt; (host 2).&lt;/p&gt;

&lt;p&gt;This setting shall be used to analyse the impact of infrastructures where &lt;em&gt;ping&lt;/em&gt; and &lt;em&gt;pong&lt;/em&gt; services are running on. The deployment above stays the same for every experiment. Just the underlying infrastructure of &lt;em&gt;ping&lt;/em&gt; and &lt;em&gt;pong&lt;/em&gt; changes. Therefore variations of benchmark results can be assigned to changing infrastructures.&lt;/p&gt;

&lt;h3&gt;Set up a benchmark experiment&lt;/h3&gt;

&lt;p&gt;To do a benchmark you have to set up a &lt;em&gt;siege&lt;/em&gt;, a &lt;em&gt;ping&lt;/em&gt; and a &lt;em&gt;pong&lt;/em&gt; host. We assume these are Linux hosts with git, apt-get, wget and curl installed. Install this package on all of this three hosts by running following commands.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;git clone https://github.com/nkratzke/pingpong.git
cd pingpong
sudo sh ./install.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will install dart runtime and development environment, apachebench, docker as well as the docker overlay network weave.&lt;/p&gt;

&lt;p&gt;It is possible to run the &lt;em&gt;ping&lt;/em&gt; and &lt;em&gt;pong&lt;/em&gt; service as a docker container. Therefore you have to build a pingpong image on your &lt;em&gt;ping&lt;/em&gt; and &lt;em&gt;pong&lt;/em&gt; hosts, like that:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;docker build -t pingpong github.com/nkratzke/pingpong
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Please be aware, that the dockerized ping-pong system will not show the same performance like a &amp;quot;naked&amp;quot; run ping-pong system.&lt;/p&gt;

&lt;h3&gt;On the pong host: Set up the &lt;em&gt;pong service&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;First step is to start the &lt;em&gt;pong&lt;/em&gt; service on the &lt;em&gt;pong&lt;/em&gt; host. This will start the &lt;em&gt;pong&lt;/em&gt; service on the host on port 8080.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;pong:$ sudo dart bin/pong.dart --port=8080
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It is although possible to run the pong server as docker container (you will have performance impacts of about 10% to 20%):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;pong:$ docker build -t pingpong github.com/nkratzke/pingpong
pong:$ docker run -d -p 8080:8080 pingpong --asPong --port=8080
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You want to check wether the &lt;em&gt;pong&lt;/em&gt; service is working correctly by checking that&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;pong:$ curl http://localhost:8080/pong/5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;answers with &amp;#39;poong&amp;#39;.&lt;/p&gt;

&lt;p&gt;Please figure out the IP adress or DNS name the your pong host. We will refer to it as &lt;code&gt;&amp;lt;pongip&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;On the ping host: Set up the &lt;em&gt;ping service&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;Second step is to start the &lt;em&gt;ping&lt;/em&gt; service on the &lt;em&gt;ping&lt;/em&gt; host. This will start the &lt;em&gt;ping&lt;/em&gt; service on the host on port 8080.
You will have to provide the &lt;em&gt;ping&lt;/em&gt; service where it will find its &lt;em&gt;pong&lt;/em&gt; service by providing &lt;code&gt;&amp;lt;pongip&amp;gt;&lt;/code&gt; and port number you have assigned to the &lt;em&gt;pong&lt;/em&gt; service above.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;ping:$ sudo dart bin/ping.dart --port=8080 --url=http://&amp;lt;pongip&amp;gt;:8080
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It is although possible to run the ping server as docker container (you will have performance impacts of about 10% to 20%):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;pong:$ docker build -t pingpong github.com/nkratzke/pingpong
pong:$ docker run -d -p 8080:8080 pingpong --asPing --port=8080 --url=http://&amp;lt;pongip&amp;gt;:8080
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You want to check wether the &lt;em&gt;ping&lt;/em&gt; service is started and able to communicate with the &lt;em&gt;pong&lt;/em&gt; service by checking that&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;ping:$ curl http://localhost:8080/ping/5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;answers with &amp;#39;poong&amp;#39;.&lt;/p&gt;

&lt;p&gt;Please figure out the IP adress or DNS name the your ping host. We will refer to it as &lt;code&gt;&amp;lt;pingip&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;On the siege host: set up apachebench&lt;/h3&gt;

&lt;p&gt;Third step you should run the benchmark to figure out the answer performance of your ping-pong system. On your &lt;em&gt;siege&lt;/em&gt; host you will find a &lt;code&gt;run.sh&lt;/code&gt; script to start your benchmark. You should replace &lt;code&gt;http://my.host.com/ping&lt;/code&gt; with &lt;code&gt;http://&amp;lt;pingip&amp;gt;:8080/ping&lt;/code&gt; to provide the script the correct ping service uri.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# Run the experiment against
# You have to specify your ping host here!
URL=http://my.host.com/ping
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;run.sh&lt;/code&gt; script provides more parameters to vary your experiments. You can change&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the amount of concurrent messages,&lt;/li&gt;
&lt;li&gt;the message sizes,&lt;/li&gt;
&lt;li&gt;and how often each benchmark run per message size should be executed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All benchmark results are written into a file &lt;code&gt;apachebench.log&lt;/code&gt;. This log file can be processed by &lt;code&gt;bin/analyze.dart&lt;/code&gt; to generate a csv file which is better suited to be imported into databases or statistical tools like R.&lt;/p&gt;

&lt;p&gt;The following line converts experiment data (apachebench log format), tag it with a name (here &amp;#39;Reference&amp;#39;) and convert it into a csv file. You can use tags to distinguish different experiments for analysis.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;dart bin/analze.dart --tag=Reference apachebench.log &amp;gt; reference.csv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
      <pubDate>Sun, 16 Nov 2014 00:00:00 +0100</pubDate>
      <link>http://www.nkode.io//2014/11/16/pingpong.html</link>
      <guid isPermaLink="true">http://www.nkode.io//2014/11/16/pingpong.html</guid>
    </item>
    
    <item>
      <title>Betriebssystemunabhängiger Touchscreen Aufbau auf Basis kostengünstiger Consumerprodukte</title>
      <description>
        
        &lt;img src=&quot;/img/posts/interactive_table.jpg&quot;&gt;
        
        &lt;p&gt;Sogenannte Touchscreen- oder Multitouchtische werden bspw. auf Messen eingesetzt, um
Kunden beeindruckende Interaktionsmöglichkeiten zu geben.
Kommerzielle Systeme kosten dabei schnell mehrere tausend Euro (z.B. &lt;a href=&quot;https://de.wikipedia.org/wiki/Microsoft_PixelSense&quot;&gt;MicroSoft Pixelsense&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Bei projektorgestützten Systemen wird mittels unterschiedlichen
Sensoren dabei eine Art &amp;quot;virtueller&amp;quot; Touchscreen über einen Tisch gelegt,
mittels dessen Nutzer unter zu Hilfenahme von Gesten interagieren können.&lt;/p&gt;

&lt;p&gt;Low Cost Ansätze wie &lt;a href=&quot;http://techcrunch.com/2014/07/28/the-touchpico-projector-turns-any-surface-into-a-giant-android-touchscreen/&quot;&gt;TouchPico&lt;/a&gt;
sind entweder noch nicht auf dem Markt oder benötigen Spezialsoftware wie bspw.
&lt;a href=&quot;https://www.ubi-interactive.com/&quot;&gt;Ubi Interactive&lt;/a&gt;, die aufgrund der Nutzung des
&lt;a href=&quot;http://www.microsoft.com/en-us/kinectforwindows/&quot;&gt;Kinect-Systems&lt;/a&gt; häufig auf das Windows-Betriebssystem
festgelegt sind.&lt;/p&gt;

&lt;p&gt;Aufgabe dieser Arbeit ist es zu untersuchen, wie ein Touchscreen Tisch Aufbau
mittels kostengünstiger Consumerkomponenten möglichst &lt;strong&gt;betriebssystemunabhängig&lt;/strong&gt;
realisiert werden kann.&lt;/p&gt;

&lt;p&gt;Eine Benutzerinteraktion soll mit üblichen Touchgesten ausgelöst werden können.
Die Steuerung soll eine &lt;strong&gt;plattformunabhängige Software&lt;/strong&gt; übernehmen, die Nutzerinteraktionen
erkennt und in übliche Gesten übersetzt (Klicks, Wischen, Blättern, etc.). Die Software
soll es ermöglichen, beliebige Desktopanwendungen auf unterschiedlichen Betriebssystemen bedienen zu können.&lt;/p&gt;

&lt;p&gt;Im Rahmen der Arbeit soll ferner die Genauigkeit des Aufbaus analysiert werden,
um Einsatzgrenzen des Systems (bspw. anhand erforderlicher Größen von User Interface Elementen)
zu ermitteln.&lt;/p&gt;

&lt;p&gt;Der Aufbau des Tisches soll es ermöglichen, Klicks und Scrollbewegungen
in beliebigen Programmen mittels Klick und Wischgesten durchführen zu können.
Dies ist im Rahmen der Arbeit geeignet nachzuweisen.  Als Zielsysteme sind hierbei
Windows, Mac OS X sowie Linux zu berücksichtigen. Technische Möglichkeiten aber auch
Grenzen des Aufbaus sind aufzuzeigen.&lt;/p&gt;

&lt;p&gt;Hierzu müssen im Detail folgende Teilaufgaben bearbeitet und dokumentiert (Bachelorarbeit) werden:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Analyse des Problemraums und durchführen einer &lt;strong&gt;Anforderungsanalyse&lt;/strong&gt;. Dabei sind insbesondere bestehende Ansätze zu recherchieren und geeignet für die Augabenstellung zu reflektieren und zu berücksichtigen.&lt;/li&gt;
&lt;li&gt;Entwicklung eines geeigneten Beameraufbaus sowie geeigneten System-/Softwarearchitektur zur Erkennung von Nutzerinteraktionen mittels Touchgesten&lt;/li&gt;
&lt;li&gt;Entwicklung einer geeigneten &lt;strong&gt;Evaluations- und Nachweisstrategie (QS)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Realisierung eines &lt;strong&gt;Beameraufbaus&lt;/strong&gt; sowie &lt;strong&gt;Implementierung&lt;/strong&gt; inkl. Test/Nachweis der Software zur Steuerung beliebiger Software&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Begleitende Dokumentation&lt;/strong&gt; der oben angegebenen Schritte, Designentscheidungen und Ergebnisse (Bachelorarbeit)&lt;/li&gt;
&lt;/ul&gt;

      </description>
      <pubDate>Tue, 21 Oct 2014 00:00:00 +0200</pubDate>
      <link>http://www.nkode.io//thesis/2014/10/21/thesis-low-cost-touch-projector.html</link>
      <guid isPermaLink="true">http://www.nkode.io//thesis/2014/10/21/thesis-low-cost-touch-projector.html</guid>
    </item>
    
    <item>
      <title>Reactive Bluetooth Low Energy Framework for iOS</title>
      <description>
        
        &lt;img src=&quot;/img/posts/bluetooth_smart.png&quot;&gt;
        
        &lt;p&gt;&lt;a href=&quot;https://de.wikipedia.org/wiki/Bluetooth_Low_Energy&quot;&gt;Bluetooth Low Energy&lt;/a&gt; wurde
bereits vor mehreren Jahren vorgestellt und standardisiert, findet aber erst allmählich eine breitere
Aufmerksamkeit.
Apples &lt;a href=&quot;https://de.wikipedia.org/wiki/IBeacon&quot;&gt;iBeacons&lt;/a&gt; Technologie trägt dazu
sicherlich ihren
Teil bei. Ebenso wie ein verstärkt festzustellendes Interesse an Themenfeldern wie dem
&lt;a href=&quot;https://de.wikipedia.org/wiki/Internet_der_Dinge&quot;&gt;Internet der Dinge&lt;/a&gt; oder bspw.
&lt;a href=&quot;https://de.wikipedia.org/wiki/Smart_Home&quot;&gt;Smart Home&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Technologien wie iBeacon beschränken sich aber primär noch auf die Indoor Standortbestimmung.
Um die Bluetooth Low Energy Technologie darüber hinausgehend sinnvoll innerhalb des
iOS Systems ausschöpfen zu können,
wäre ein Framework sinnvoll, dass wiederkehrende Bluetooth Problemstellungen (wie bspw.
  Verbindungsmanagement und Datenübertragung) löst und mittels einer komfortablen
  API zugreifbar machen würde.&lt;/p&gt;

&lt;p&gt;Ziel dieser Arbeit ist ein solches Framework zu entwickeln, dass die beiden
Bluetooth LE Betriebsarten (Central und Periphal Modul) unterstützt. Das Framework
soll &lt;a href=&quot;https://en.wikipedia.org/wiki/Event-driven_programming&quot;&gt;ereignisbasiert&lt;/a&gt;
sein und wenn möglich dem &lt;a href=&quot;http://en.wikipedia.org/wiki/Functional_reactive_programming&quot;&gt;Funktional-Reaktiven-Programmierparadigma&lt;/a&gt; entsprechen. Sinnvolle Ereignisse (bspw. Statusänderungen,
  Entfernungsänderungen, Vorhandensein von &lt;a href=&quot;https://de.wikipedia.org/wiki/Universally_Unique_Identifier&quot;&gt;UUIDs&lt;/a&gt;)
sollen im Rahmen einer Anforderungsanalyse abgeleitet und definiert werden.&lt;/p&gt;

&lt;p&gt;Die Arbeit beinhaltet einen Nachweis der Machbarkeit anhand zweier Beispielimplementierungen
für den Einsatz als Central und als Peripheral Modul.&lt;/p&gt;

&lt;p&gt;Hierzu müssen im Detail folgende Teilaufgaben bearbeitet und dokumentiert (Bachelorarbeit) werden:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Analyse des Problemraums und durchführen einer &lt;strong&gt;Anforderungsanalyse&lt;/strong&gt; zur Ableitung sinnvoller Ereignisarten, Datenaustauscharten und -formaten, Interaktionsprotokollen für möglichst vielseitige ereignisbasierte Anwendungsfälle&lt;/li&gt;
&lt;li&gt;Entwicklung einer &lt;strong&gt;Architektur&lt;/strong&gt; für ein ereignisbasiertes Framework&lt;/li&gt;
&lt;li&gt;Entwicklung einer geeigneten &lt;strong&gt;Evaluations- und Nachweisstrategie (QS)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Implementierung&lt;/strong&gt; inkl. Test/Nachweis des Frameworks anhand zweier Anwendungsfälle

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Einsatz als Central Modul:&lt;/strong&gt; Erstellung einer Mobile Applikation, die mittels des Frameworks auf Ereignisse (z.B. einem Feueralarm) von einem Bluetooth Sender (z.B. einen Feuermelder) reagiert (z.B. eine Notruf SMS an die Feuerwehr vorschlägt).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Einsatz als Peripheral Modul:&lt;/strong&gt; Erstellung einer Applikation, die mittels des Frameworks Ereignisse (z.B. einen Feueralarm) und ergänzende Daten (bspw. einen Fluchtplan) versenden kann.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Begleitende Dokumentation&lt;/strong&gt; der oben angegebenen Schritte, Designentscheidungen und Ergebnisse (Bachelorarbeit)&lt;/li&gt;
&lt;/ul&gt;

      </description>
      <pubDate>Mon, 13 Oct 2014 00:00:00 +0200</pubDate>
      <link>http://www.nkode.io//thesis/2014/10/13/thesis-bluetooth-low-energy.html</link>
      <guid isPermaLink="true">http://www.nkode.io//thesis/2014/10/13/thesis-bluetooth-low-energy.html</guid>
    </item>
    
    <item>
      <title>New Paper: Lightweight Virtualization Cluster</title>
      <description>
        
        &lt;img src=&quot;/img/posts/paper.jpg&quot;&gt;
        
        &lt;p&gt;&lt;strong&gt;Abstract.&lt;/strong&gt; To overcome vendor lock-in obstacles in public cloud computing the capability
to define transferable cloud-based services is crucial but not yet solved
satisfactory. This is especially true for small and medium sized enterprises
being typically not able to operate a vast staff of cloud service and IT experts.
Current state of the art cloud service design does not deal systematically
how to define, deploy and operate cross-plattform capable cloud services.
This is mainly due to inherent complexity of the field and differences
in details between a plenty of existing public and private cloud infrastructures.
One way to handle this complexity is to restrict cloud service design
to a common subset of commodity features provided by existing public and
private cloud infrastructures. Nevertheless these restrictions raise
new service design questions and have to be answered in ongoing research
in a pragmatic manner regarding the limited IT-operation capabilities
of small and medium sized enterprises. By simplifying and harmonizing
the use of cloud infrastructures using lightweight virtualization
approaches the transfer of cloud deployments between a variety of
cloud service providers will become possible. This article will discuss
several aspects like high availability, secure communication, elastic
service design, transferability of services and formal descriptions of
service deployments which have to be addressed and are investigated by our
ongoing research.&lt;/p&gt;

&lt;p&gt;&lt;small&gt;
&lt;ul&gt;
&lt;li&gt;You may want to check the paper in open access
&lt;a href=&quot;http://www.scirp.org/journal/PaperInformation.aspx?PaperID=50326#.VDTYLCl_vu8&quot;&gt;Journal of Computer Science and Communications&lt;/a&gt;
or via &lt;a href=&quot;https://www.researchgate.net/publication/265416477_Lightweight_Virtualization_Cluster_-_Howto_Overcome_Cloud_Vendor_Lock-In&quot;&gt;ResearchGate&lt;/a&gt;.
&lt;li&gt;You will find informations how to cite the paper &lt;a href=&quot;/bibliography/Kra2014a.html&quot;&gt;here&lt;/a&gt;.
&lt;/ul&gt;
&lt;/small&gt;&lt;/p&gt;

      </description>
      <pubDate>Wed, 08 Oct 2014 00:00:00 +0200</pubDate>
      <link>http://www.nkode.io//2014/10/08/paper-lvc.html</link>
      <guid isPermaLink="true">http://www.nkode.io//2014/10/08/paper-lvc.html</guid>
    </item>
    
    <item>
      <title>Easy MySQL with Docker</title>
      <description>
        
        &lt;img src=&quot;/img/posts/docker.png&quot;&gt;
        
        &lt;p&gt;&lt;strong&gt;A docker container to provide MySQL databases on the fly.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;docker&quot;&gt;Docker&lt;/a&gt; is an open-source engine that automates the deployment of applications
as portable and self-contained containers that will run virtually anywhere.
Dockerized applications reduce configuration efforts and obstacles
for administrators. Applications (e.g. databases) can be provided in a configured,
self-contained and frictionless way.&lt;/p&gt;

&lt;h2&gt;Intended usage&lt;/h2&gt;

&lt;p&gt;This &lt;a href=&quot;http://github.com/nkratzke/EasyMySQL&quot;&gt;Dockerfile (check github)&lt;/a&gt; is
used to provide MySQL databases in a frictionless
but flexible way. The requirement was to provide different
MySQL based relational databases for computer science students
for educational purposes (database/webtechnology lectures).
Nevertheless, the approach can be used
for similar purposes in complete different domains.&lt;/p&gt;

&lt;p&gt;Whenever you have to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;provide data as a relational database via MySQL&lt;/li&gt;
&lt;li&gt;with user based access requirement&lt;/li&gt;
&lt;li&gt;for demonstrational purposes (throw-away database)&lt;/li&gt;
&lt;li&gt;in an ad hoc way&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;this container might be of interest to you.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Warning: You should not use this container for production purposes.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;First, you have to install &lt;a href=&quot;docker&quot;&gt;Docker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you are using Linux, you are fine. Docker installation on Linux is less
complicated than for other operating systems. Docker is a
operating system virtualization tool chain for Linux. Therefore installation
gets only complicated if you are leaving the Linux ecosystem.&lt;/p&gt;

&lt;p&gt;You will find Docker installation instructions
for a lot of Linux distributions &lt;a href=&quot;http://docs.docker.com/installation/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But no worries. If you are using &lt;strong&gt;Windows&lt;/strong&gt; (why ever) or &lt;strong&gt;Mac OS X&lt;/strong&gt; (like me) simply
follow the &lt;a href=&quot;http://boot2docker.io&quot;&gt;boot2docker&lt;/a&gt; installation instructions
for&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/boot2docker/windows-installer/releases&quot;&gt;Windows&lt;/a&gt; or&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/boot2docker/osx-installer/releases&quot;&gt;Mac OS X&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Usage&lt;/h2&gt;

&lt;p&gt;Start Boot2Docker according to your operating system. You can skip this step, if
you are working on a Linux system.&lt;/p&gt;

&lt;p&gt;First you have to build a image. This image provides a self-contained MySQL
server. You can clone this repository or tell docker to do the repository handling
behind the scenes for you (which is my preferred way in case of github provided
  Dockerfiles):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker build -t mysqldb github.com/nkratzke/easymysql&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now you have an image named &lt;em&gt;mysqldb&lt;/em&gt; on your system, capable to
provide MySQL databases. The simplest way to do start a database is like that:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker run -d -p 3306:3306 mysqldb&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It will create a running container on your system providing a MySQL server.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Container will provide a standard database (I use for demonstration purposes in some of my lectures).&lt;/li&gt;
&lt;li&gt;MySQL server has a user called &lt;em&gt;student&lt;/em&gt; with a password called &lt;em&gt;secret&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;The database is reachable on port 3306 (standard MySQL Port)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to run your database on a different port than 3306 just do the following:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker run -d -p 4407:3306 mysqldb&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;to run it on port 4407 (for instance). You can figure out that the container is running&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker ps&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and docker returns an output like that.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;CONTAINERID  IMAGE    COMMAND       CREATED       STATUS       PORTS
85fbad3eb5c  mysqldb  &lt;span class=&quot;s2&quot;&gt;&amp;quot;/bin/start&amp;quot;&lt;/span&gt;   &lt;span class=&quot;m&quot;&gt;56&lt;/span&gt; min. ago   Up &lt;span class=&quot;m&quot;&gt;55&lt;/span&gt; min.   0.0.0.0:3306-&amp;gt;3306&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To check whether the database is working, you can connect to it.
Figure out what address your docker host has. If you are working with Boot2Docker
you con do this&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;boot2docker ip&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and you will get an answer like that:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;The VM&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;s Host only interface IP address is: 192.168.59.104&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now you have all to connect to your MySQL database. To check that everything is fine
just start &lt;a href=&quot;https://dev.mysql.com/downloads/workbench/&quot;&gt;MySQLWorkbench&lt;/a&gt; and
enter the following parameters when creating a new database connection:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Hostname:&lt;/strong&gt; IP address or DNS name of your docker host (when you are working with boot2docker its the ip you get via &lt;code&gt;boot2docker ip&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Username:&lt;/strong&gt; &lt;em&gt;student&lt;/em&gt; (you can change this, we will come to this later)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Password:&lt;/strong&gt; &lt;em&gt;secret&lt;/em&gt; (you can change this, we will come to this later)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Default Schema:&lt;/strong&gt; &lt;em&gt;LVBsp&lt;/em&gt; (you can change the database as well, we will come to this later)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To stop a container simply figure out its CONTAINER ID (via &lt;code&gt;docker ps&lt;/code&gt; as shown above)
and stop it like that:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker stop 85fbad3eb5ce&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The above mentioned standard database is a read only default database. Not very helpful
(except for me and my lectures).
But the container is capable to do more by providing a set of parameters.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;user&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt; to define your own user&lt;/li&gt;
&lt;li&gt;&lt;code&gt;right&lt;/code&gt; to define whether you want to provide just read or full access rights&lt;/li&gt;
&lt;li&gt;&lt;code&gt;url&lt;/code&gt; to provide an arbitrary sql file (UTF8 encoded) to deliver your own database&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So let&amp;#39;s figure out some details.&lt;/p&gt;

&lt;h3&gt;Use your own database(s) with &lt;code&gt;url&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;You can provide your own database via a sql file when you start your container.
Just use the &lt;code&gt;url&lt;/code&gt; parameter to point to a valid sql file.
This file can be hosted anywhere (accessible from your docker host).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Attention!&lt;/strong&gt; SQL file is assumed to be encoded as UTF8 and has to valid as well as non interactively processable by mysql.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker run -d -p 3306:3306 -e &lt;span class=&quot;nv&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;http://www.example.org/my/database.sql&amp;quot;&lt;/span&gt; mysqldb&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3&gt;Define user with &lt;code&gt;user&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;You can create your own user with own password by using the &lt;code&gt;user&lt;/code&gt; and
&lt;code&gt;password&lt;/code&gt; parameter.
By default the created MySQL user will get read access to all databases hosted by this container.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker run -d -p 3306:3306 -e &lt;span class=&quot;nv&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Nane&amp;quot;&lt;/span&gt; -e &lt;span class=&quot;nv&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;meins&amp;quot;&lt;/span&gt; mysqldb&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3&gt;Change access rights with &lt;code&gt;right&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;You can change the access rights of your database.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;READ&lt;/code&gt; (which is mapped to GRANT SELECT on all databases) &lt;strong&gt;[DEFAULT]&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WRITE&lt;/code&gt; (GRANT ALL PRIVILEGES WITH OPTIONS on all databases, so this is power user is able to do everything)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Hint! Access rights have to be written completely in uppercase.
So &lt;code&gt;Write&lt;/code&gt; is not recognized as &lt;code&gt;WRITE&lt;/code&gt;!!!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Be aware! If you are granting write access to the user, the user be able to do everything
with the database including&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;create new databases&lt;/li&gt;
&lt;li&gt;drop existing databases&lt;/li&gt;
&lt;li&gt;insert and modify data&lt;/li&gt;
&lt;li&gt;create or drop users&lt;/li&gt;
&lt;li&gt;changes rights of existing users&lt;/li&gt;
&lt;li&gt;shutdown databases and so on.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The read access right is the default one. So&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker run -d -p 3306:3306 -e &lt;span class=&quot;nv&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;READ&amp;quot;&lt;/span&gt; mysqldb&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;is synonym to&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker run -d -p 3306:3306 mysqldb&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Read access is perfect for providing read-only datasets. E.g. databases for students
they should use to answer questions. By providing the database read-only
it is assured that no student can destroy the database accidentally.&lt;/p&gt;

&lt;p&gt;If you want to create a user with complete write access to your database
you can run something like that&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker run -d -p 3306:3306 -e &lt;span class=&quot;nv&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Me&amp;quot;&lt;/span&gt; -e &lt;span class=&quot;nv&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;mine&amp;quot;&lt;/span&gt; -e &lt;span class=&quot;nv&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;WRITE&amp;quot;&lt;/span&gt; mysqldb&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;which will provide &lt;strong&gt;full access&lt;/strong&gt; to the database for user &lt;em&gt;Me&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Write access is perfect to provide databases, which can be administered by the
user. E.g. for students who have to set up a data model from scratch but should not
have to deal with nitty critty MySQL server installation and configuration. Nevertheless
they have to be aware that the user can do arbitrary harm to the database.
So normally a user with write access should create users with a more restrictive
set of rights for the database. But this is up to the user.&lt;/p&gt;

&lt;h3&gt;Tips for troubleshooting&lt;/h3&gt;

&lt;p&gt;If you want to provide your own databases, you must assure that your database definition
file provided via the &lt;code&gt;url&lt;/code&gt; parameter is valid and processable by MySQL.&lt;/p&gt;

&lt;p&gt;If it works in MySQL Workbench it should work with this container.&lt;/p&gt;

&lt;p&gt;Nevertheless, if your are running into troubles you should start your container
with the &lt;code&gt;-t&lt;/code&gt; and &lt;code&gt;-i&lt;/code&gt; parameter of docker. This will forward the output of the container
to your console, which is likely to be helpful for debugging purposes.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker run -t -i -p 3306:3306 -e &lt;span class=&quot;nv&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;http://www.ex.org/my/database.sql&amp;quot;&lt;/span&gt; mysqldb&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

      </description>
      <pubDate>Fri, 12 Sep 2014 00:00:00 +0200</pubDate>
      <link>http://www.nkode.io//2014/09/12/easymysql.html</link>
      <guid isPermaLink="true">http://www.nkode.io//2014/09/12/easymysql.html</guid>
    </item>
    
    <item>
      <title>Programming I (Winter 2014)</title>
      <description>
        
        &lt;img src=&quot;/img/posts/java-code.jpg&quot;&gt;
        
        &lt;p&gt;The lecture &lt;strong&gt;Programming I&lt;/strong&gt; is about fundamentals of programming
for freshman students.&lt;/p&gt;

&lt;p&gt;The lecture covers aspects like primitive and reference data types, operators, expressions,
control flow, routine (method) definitions, I/O programming,
recursive and object oriented programming.
JAVA is used as teaching language, nevertheless the principles are applicable to every (imperative or class based object oriented) programming language.&lt;/p&gt;

&lt;p&gt;Lecture is given for computer science students at Lübeck University of Applied Sciences.&lt;/p&gt;

&lt;p&gt;Lecture will cover following aspects:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;fundamental concepts&lt;/strong&gt; of programming including &lt;strong&gt;programming paradigms&lt;/strong&gt; and &lt;strong&gt;runtime models&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;variables&lt;/strong&gt;, &lt;strong&gt;data types&lt;/strong&gt;, &lt;strong&gt;operators&lt;/strong&gt; and &lt;strong&gt;expressions&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;control flow&lt;/strong&gt; and &lt;strong&gt;routines&lt;/strong&gt; (functions, procedures, methods)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;reference data types&lt;/strong&gt; and &lt;strong&gt;collections&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;(stream based) &lt;strong&gt;I/O programming&lt;/strong&gt; and &lt;strong&gt;serialization&lt;/strong&gt; of objects&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;recursive programming&lt;/strong&gt; and &lt;strong&gt;datastructures&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;exception handling&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;object oriented programming&lt;/strong&gt; and &lt;strong&gt;UML&lt;/strong&gt; introducing fundamental concepts like &lt;strong&gt;abstraction&lt;/strong&gt;, &lt;strong&gt;encapsulation&lt;/strong&gt;, &lt;strong&gt;polymorphism&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;classes&lt;/strong&gt;, &lt;strong&gt;objects&lt;/strong&gt;, &lt;strong&gt;packages&lt;/strong&gt; (JAVA specifics)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Course Material (german only)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Lecture Unit 1: &lt;a href=&quot;/assets/ws2014/progI/unit01.pdf&quot;&gt;Core concepts of programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lecture Unit 2: &lt;a href=&quot;/assets/ws2014/progI/unit02.pdf&quot;&gt;Fundamentals of imperative programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lecture Unit 3: &lt;a href=&quot;/assets/ws2014/progI/unit03.pdf&quot;&gt;Reference data types and collections&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lecture Unit 4: &lt;a href=&quot;/assets/ws2014/progI/unit04.pdf&quot;&gt;I/O programming, serialization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lecture Unit 5: &lt;a href=&quot;/assets/ws2014/progI/unit05.pdf&quot;&gt;Recursive and functional programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lecture Unit 6: &lt;a href=&quot;/assets/ws2014/progI/unit06.pdf&quot;&gt;OO and UML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Exercises: &lt;a href=&quot;/assets/ws2014/progI/excercises.pdf&quot;&gt;Catalogue of excercises&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
      <pubDate>Mon, 01 Sep 2014 00:00:00 +0200</pubDate>
      <link>http://www.nkode.io//lecture/2014/09/01/lecture-programming-i.html</link>
      <guid isPermaLink="true">http://www.nkode.io//lecture/2014/09/01/lecture-programming-i.html</guid>
    </item>
    
    <item>
      <title>Fundamentals of Programming (Winter 2014)</title>
      <description>
        
        &lt;img src=&quot;/img/posts/java-code.jpg&quot;&gt;
        
        &lt;p&gt;The lecture is about fundamentals of programming
for freshman students.&lt;/p&gt;

&lt;p&gt;The lecture covers aspects like primitive and reference data types, operators, expressions,
control flow, routine (method) definitions
recursive and object oriented programming.
JAVA is used as teaching language, nevertheless the principles are applicable to every (imperative or class based object oriented) programming language.&lt;/p&gt;

&lt;p&gt;Lecture is given for &lt;em&gt;information technology and design&lt;/em&gt; students at Lübeck University of Applied Sciences.&lt;/p&gt;

&lt;p&gt;Lecture will cover following aspects:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;fundamental concepts&lt;/strong&gt; of programming including &lt;strong&gt;programming paradigms&lt;/strong&gt; and &lt;strong&gt;runtime models&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;variables&lt;/strong&gt;, &lt;strong&gt;data types&lt;/strong&gt;, &lt;strong&gt;operators&lt;/strong&gt; and &lt;strong&gt;expressions&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;control flow&lt;/strong&gt; and &lt;strong&gt;routines&lt;/strong&gt; (functions, procedures, methods)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;reference data types&lt;/strong&gt; and &lt;strong&gt;collections&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;(stream based) &lt;strong&gt;I/O programming&lt;/strong&gt; and &lt;strong&gt;serialization&lt;/strong&gt; of objects&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;recursive programming&lt;/strong&gt; and &lt;strong&gt;datastructures&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Course Material (german only)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Lecture Unit 1: &lt;a href=&quot;/assets/ws2014/progI/unit01.pdf&quot;&gt;Core concepts of programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lecture Unit 2: &lt;a href=&quot;/assets/ws2014/progI/unit02.pdf&quot;&gt;Fundamentals of imperative programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lecture Unit 3: &lt;a href=&quot;/assets/ws2014/progI/unit03.pdf&quot;&gt;Reference data types and collections&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lecture Unit 4: &lt;a href=&quot;/assets/ws2014/progI/unit04.pdf&quot;&gt;I/O programming, serialization&lt;/a&gt; (skipped, just for self study)&lt;/li&gt;
&lt;li&gt;Lecture Unit 5: &lt;a href=&quot;/assets/ws2014/progI/unit05.pdf&quot;&gt;Recursive programming&lt;/a&gt; (functional programming skipped, just for self study)&lt;/li&gt;
&lt;li&gt;Exercises: &lt;a href=&quot;/assets/ws2014/progI/excercises.pdf&quot;&gt;Catalogue of excercises&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
      <pubDate>Mon, 01 Sep 2014 00:00:00 +0200</pubDate>
      <link>http://www.nkode.io//lecture/2014/09/01/lecture-fundamentals-of-programming.html</link>
      <guid isPermaLink="true">http://www.nkode.io//lecture/2014/09/01/lecture-fundamentals-of-programming.html</guid>
    </item>
    
    <item>
      <title>Database and Web Programming (Winter 2014)</title>
      <description>
        
        &lt;img src=&quot;/img/posts/webtech.jpg&quot;&gt;
        
        &lt;p&gt;The lecture is about common technologies used to build (part) of web information systems. Lecture is held for students
at Lübeck University of Applied Sciences (in german language). Lecture covers following aspects:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;IaaS Cloud Computing&lt;/strong&gt; to host (distributed and scalable) web applications&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;descriptional languages&lt;/strong&gt; like &lt;a href=&quot;http://www.w3.org/html/&quot;&gt;HTML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;presentational languages&lt;/strong&gt; like &lt;a href=&quot;http://www.w3.org/Style/CSS/&quot;&gt;CSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Document Object Model&lt;/strong&gt; (DOM)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;client and server side programming&lt;/strong&gt; with &lt;a href=&quot;https://www.dartlang.org&quot;&gt;Dart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;security aspects&lt;/strong&gt; like &lt;em&gt;HTML/SQL injections&lt;/em&gt; or &lt;em&gt;session hijacking&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Course Material (german only)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Crash course: &lt;a href=&quot;/assets/ws2014/dbwp/cloud.pdf&quot;&gt;IaaS Cloud Computing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;HTML Units: &lt;a href=&quot;/assets/ws2014/dbwp/html_css.pdf&quot;&gt;HTML and CSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Database Units: &lt;a href=&quot;/assets/ws2014/dbwp/db1.pdf&quot;&gt;Part 1&lt;/a&gt;, &lt;a href=&quot;/assets/ws2014/dbwp/db2.pdf&quot;&gt;Part 2&lt;/a&gt;, &lt;a href=&quot;/assets/ws2014/dbwp/db3.pdf&quot;&gt;Part 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Dart Units: &lt;a href=&quot;/assets/ws2014/dbwp/dart1.pdf&quot;&gt;Part 1&lt;/a&gt;, &lt;a href=&quot;/assets/ws2014/dbwp/dart2.pdf&quot;&gt;Part 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Exercises: &lt;a href=&quot;/assets/ws2014/dbwp/ex1.pdf&quot;&gt;Excercise 1&lt;/a&gt;, &lt;a href=&quot;/assets/ws2014/dbwp/ex2.pdf&quot;&gt;Excercise 2&lt;/a&gt;, &lt;a href=&quot;/assets/ws2014/dbwp/ex3.pdf&quot;&gt;Excercise 3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;funded&quot;&gt;
&lt;center&gt;
&lt;p&gt;
Course is supported by educational grants from:
&lt;/p&gt;
&lt;a href=&quot;https://aws.amazon.com/&quot;&gt;
  &lt;img src=&quot;/img/posts/amazon-web-services.png&quot; height=&quot;50px&quot;&gt;
&lt;/a&gt;
&lt;/center&gt;
&lt;/div&gt;

      </description>
      <pubDate>Mon, 01 Sep 2014 00:00:00 +0200</pubDate>
      <link>http://www.nkode.io//lecture/2014/09/01/lecture-db-web-programming.html</link>
      <guid isPermaLink="true">http://www.nkode.io//lecture/2014/09/01/lecture-db-web-programming.html</guid>
    </item>
    
    <item>
      <title>Valuable Docker Links</title>
      <description>
        
        &lt;img src=&quot;/img/posts/docker.png&quot;&gt;
        
        &lt;p&gt;&lt;small&gt;
The &lt;a href=&quot;http://www.docker.io&quot;&gt;Docker&lt;/a&gt; weekly email &lt;a href=&quot;https://www.docker.com/subscribe_newsletter/&quot;&gt;newsletter&lt;/a&gt; is a great service to stay tuned
with Docker. You find great links, news, articles, howtos,
manuals, and more, and all about Docker and its evolving ecosystem.
Nevertheless, these informations are short-living. They are fading out of
focus as the weeks pass by. But there are a lot of great posts
which should be collected and presented in a more enduring way.&lt;/p&gt;

&lt;p&gt;The links on this site are reviewed and updated weekly (very subjective).&lt;/p&gt;

&lt;p&gt;Feel free to contact &lt;a href=&quot;/about.html&quot;&gt;me&lt;/a&gt; if you think there are valuable links missing
or if you know better links. You may also want to use the disqus comments at the end of this
article to propose improvements or additional or even better links.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Warning: Links are not selected by objective criteria (this collection only
  contains links I find useful from a very personal point of view).&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You may want to check similar pages like 
&lt;a href=&quot;http://getawesomeness.com/get/docker&quot;&gt;Awesome Docker&lt;/a&gt; or
&lt;a href=&quot;http://howtocookmicroservices.com/&quot;&gt;How to cook microservices&lt;/a&gt; 
to get further informations about Docker, Containerization and Microservices.
&lt;/small&gt;&lt;/p&gt;

&lt;h3&gt;What is Docker?&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.datadoghq.com/docker-adoption/&quot;&gt;Eight Surprising Facts about Real Docker Adoption&lt;/a&gt; by &lt;strong&gt;datadoghq.com&lt;/strong&gt; (added 2. Nov 2015) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://valdhaus.co/writings/docker-misconceptions&quot;&gt;Docker Misconceptions&lt;/a&gt; by &lt;strong&gt;Matt Jaynes&lt;/strong&gt; (added 14. Aug 2015) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://venturebeat.com/2015/06/30/10-myths-about-enterprise-adoption-of-docker&quot;&gt;10 myths about enterprise adoption of Docker&lt;/a&gt; by &lt;strong&gt;Bob Quillin&lt;/strong&gt; (added 9. Jul 2015)&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://linkis.com/cloudswithcarl.com/f8FdQ?mkt_tok=3RkMMJWWfF9wsRonuqTMZKXonjHpfsX57ugtX6e0lMI%2F0ER3fOvrPUfGjI4ATcBgI%2BSLDwEYGJlv6SgFQ7LMMaZq1rgMXBk%3D&quot;&gt;Top 10 takeaways the day after #DockerCon&lt;/a&gt; by &lt;strong&gt;Carl Osipov&lt;/strong&gt; (added 2. Jul 2015) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.digitalocean.com/community/tutorial_series/the-docker-ecosystem&quot;&gt;The Docker Ecosystem Tutorial Series&lt;/a&gt; by &lt;strong&gt;Justin Ellingwood&lt;/strong&gt; (added 27. Feb 2015) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@behruz/dockerizability-is-better-than-dockerized-3c08b9dbd84c&quot;&gt;&amp;quot;Dockerizability&amp;quot; is better than &amp;quot;dockerized&amp;quot;&lt;/a&gt; by &lt;strong&gt;Behrooz Nobakht&lt;/strong&gt; (added 5. Dec 2014) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://etherealmind.com/basics-docker-containers-hypervisors-coreos/&quot;&gt;Basics – Docker, Containers, Hypervisors, CoreOS&lt;/a&gt; by &lt;strong&gt;Greg Ferro&lt;/strong&gt; (added 4. Sep 2014) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.bryanbraun.com/2014/07/15/the-frontend-developers-guide-to-docker&quot;&gt;The Frontend Developer&amp;#39;s Guide to Docker&lt;/a&gt; by &lt;strong&gt;Bryan Braun&lt;/strong&gt; (added 17. Jul 2014) &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;How to use Docker &lt;small&gt;tips and tricks&lt;/small&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.atlassian.com/blog/2016/06/common-dockerfile-mistakes/&quot;&gt;Common Dockerfile Mistakes&lt;/a&gt; by &lt;strong&gt;Derek Chamorro&lt;/strong&gt; (added 31. Jul 2016) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://mercurenews.com/en/10-tips-tricks-with-docker&quot;&gt;10 Tips &amp;amp; Tricks with Docker&lt;/a&gt; by &lt;strong&gt;Dominique Haas&lt;/strong&gt; (added 17. May 2016) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.smartjava.org/content/10-practical-docker-tips-day-day-docker-usage&quot;&gt;10 Practical Docker Tips for Day to Day Docker usage (see especially Tip 3: docker inspect and jq)&lt;/a&gt; by &lt;strong&gt;Jos Dirksen&lt;/strong&gt; (added 28. Dec 2015) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.sitepoint.com/docker-and-dockerfiles-made-easy&quot;&gt;Docker and Dockerfiles Made Easy!&lt;/a&gt; by &lt;strong&gt;Younies Rafie&lt;/strong&gt; (added 22. Oct 2015) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.arungupta.me/docker-toolbox&quot;&gt;Docker Toolbox&lt;/a&gt; by &lt;strong&gt;Aron Gupta&lt;/strong&gt; (added 19. Aug 2015) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.jez.io/2015/07/12/docker-tips-and-cheatsheet&quot;&gt;Docker Tips and Cheatsheet&lt;/a&gt; by &lt;strong&gt;Jake Zimmermann&lt;/strong&gt; (added 14. Aug 2015) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.techbar.me/stopping-docker-containers-gracefully&quot;&gt;Stopping Docker containers Gracefully&lt;/a&gt; by &lt;strong&gt;Alen Komijen&lt;/strong&gt; (added 14. Aug 2015) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.zhaw.ch/icclab/process-management-in-docker-containers/&quot;&gt;Process Management in Docker&lt;/a&gt; by &lt;strong&gt;Martin Blöchinger&lt;/strong&gt; (added 11. Jun 2015) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@gchudnov/copying-data-between-docker-containers-26890935da3f&quot;&gt;Copying data between Docker containers&lt;/a&gt; by &lt;strong&gt;Grigoriy Chudnov&lt;/strong&gt; (added 5. Mar 2015) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.atlassian.com/blog/2015/02/ten-tips-for-wonderful-bash-productivity/&quot;&gt;Ten tips for wonderful bash productivity&lt;/a&gt; by &lt;strong&gt;Nicola Paolucci&lt;/strong&gt; (added 12. Feb 2015) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@calvingiles/snippets-for-troubleshooting-docker-637f510f6a92&quot;&gt;Snippets for tweaking and troubleshooting docker&lt;/a&gt; by &lt;strong&gt;Calvin Giles&lt;/strong&gt; (added 29. Jan 2015) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jpetazzo.github.io/2015/01/19/dockerfile-and-data-in-volumes/&quot;&gt;Putting Data in a Volume in a Dockerfile&lt;/a&gt; by &lt;strong&gt;Jérôme Petazzoni&lt;/strong&gt; (added 22. Jan 2015) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://csaba.palfi.me/random-docker-tips/&quot;&gt;24 random docker tips&lt;/a&gt; by &lt;strong&gt;Csaba Palfi&lt;/strong&gt; (added 22. Dec 2014) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://container-solutions.com/2014/11/6-dockerfile-tips-official-images/&quot;&gt;6 Dockerfile Tips from the Official Images&lt;/a&gt; by &lt;strong&gt;Adrian Mouat&lt;/strong&gt; (added 22. Nov 2014) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.tutum.co/2014/10/22/how-to-optimize-your-dockerfile/&quot;&gt;How to Optimize Your Dockerfile&lt;/a&gt; by &lt;strong&gt;Maxime Hekel&lt;/strong&gt; (added 23. Oct 2014) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.calazan.com/docker-cleanup-commands/&quot;&gt;Docker Cleanup Commands&lt;/a&gt; by &lt;strong&gt;Calazan&lt;/strong&gt; (added 9. Oct 2014) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.sequenceiq.com/blog/2014/09/24/edit-files-docker/&quot;&gt;Edit files in Docker containers&lt;/a&gt; by &lt;strong&gt;Lajos Papp&lt;/strong&gt; (added 3. Oct 2014) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://devo.ps/blog/docker-dos-and-donts/&quot;&gt;Docker Do&amp;#39;s And Don&amp;#39;ts&lt;/a&gt; by &lt;strong&gt;Vincent Viallet&lt;/strong&gt; (added 29. Aug 2014) &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Cool things &lt;small&gt;you can do with Docker (toolbox) easily&lt;/small&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://ropenscilabs.github.io/r-docker-tutorial&quot;&gt;A Docker tutorial for reproducible research&lt;/a&gt; by &lt;strong&gt;ropenscilabs&lt;/strong&gt; (added 6. Apr 2016) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://caseyjlaw.github.io/docker-in-astronomy.html&quot;&gt;Docker in Astronomy&lt;/a&gt; by &lt;strong&gt;Casey J. Law&lt;/strong&gt; (added 23. Mar 2016) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.datadan.io/containerized-data-science-and-engineering&quot;&gt;Containerized Data Science and Engineering - Part 1&lt;/a&gt; by &lt;strong&gt;Daniel Whitenack&lt;/strong&gt; (added 18. Feb 2016) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://cosmicmar.com/2016/02/14/boinc-server-docker-1&quot;&gt;Turbocharged Science on BOINC (with Docker)&lt;/a&gt; by &lt;strong&gt;Marius Millea&lt;/strong&gt; (added 18. Feb 2016) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://fredhutchio.github.io/containers-ci/&quot;&gt;Containers for continuous integration (in science)&lt;/a&gt; by &lt;strong&gt;Erick Matsen&lt;/strong&gt; (added 21. Jan 2016) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.codeship.com/docker-machine-compose-and-swarm-how-they-work-together&quot;&gt;Docker Machine, Compose, and Swarm: How They Work Together&lt;/a&gt; by &lt;strong&gt;Jonas Rosland&lt;/strong&gt; (added 2. Oct 2015) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.brianchristner.io/how-to-scale-a-docker-container-with-docker-compose/&quot;&gt;How to Scale Docker Containers with Docker-Compose&lt;/a&gt; by &lt;strong&gt;Brian Christner&lt;/strong&gt; (added 17. Sep 2015) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/iron-io-blog/the-easiest-way-to-develop-with-go-introducing-a-docker-based-go-tool-c456238507d6&quot;&gt;The Easiest Way to Develop with Go — Introducing a Docker Based Go Tool&lt;/a&gt; by &lt;strong&gt;Travis Reeder&lt;/strong&gt; (added 2. Sep 2015) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.jessfraz.com/post/running-a-tor-relay-with-docker&quot;&gt;Running a Tor relay with Docker&lt;/a&gt; by &lt;strong&gt;Jessie Frazelle&lt;/strong&gt; (added 27. Aug 2015) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.hypriot.com/post/run-your-own-github-like-service-with-docker&quot;&gt;Run your own GitHub-like service with the help of Docker&lt;/a&gt; by &lt;strong&gt;Mathias Renner, Andreas Eiermann, Govinda Fichtner&lt;/strong&gt; (added 9. Jul 2015) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.jessfraz.com/post/routing-traffic-through-tor-docker-container&quot;&gt;How to Route Traffic through a Tor Docker container&lt;/a&gt; by &lt;strong&gt;Jessie Frazelle&lt;/strong&gt; (added 2. Jul 2015) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.jessfraz.com/post/R-containers-for-data-science&quot;&gt;Using an R Container for Analytical Models&lt;/a&gt; by &lt;strong&gt;Jessie Frazelle&lt;/strong&gt; (added 2. Jul 2015) &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Docker &lt;small&gt;How to use (and understand) the APIs&lt;/small&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://merrigrove.blogspot.co.uk/2015/10/visualizing-docker-containers-and-images.html&quot;&gt;Visualizing Docker Containers and Images&lt;/a&gt; by &lt;strong&gt;Daniel Eklund&lt;/strong&gt; (added 2. Nov 2015) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.activestate.com/blog/2015/06/wrangling-different-docker-apis&quot;&gt;Wrangling the Different Docker APIs&lt;/a&gt; by &lt;strong&gt;Alex Hartford&lt;/strong&gt; (added 23. Jul 2015) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.centurylinklabs.com/gracefully-stopping-docker-containers/&quot;&gt;Gracefully Stopping Docker Containers&lt;/a&gt; by &lt;strong&gt;Brian DeHamer&lt;/strong&gt; (added 20. May 2015) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://cocoahunter.com/2015/01/23/docker-2/&quot;&gt;Setting up a private Docker registry&lt;/a&gt; by &lt;strong&gt;Michelangelo Chasseur&lt;/strong&gt; (added 29. Jan 2015) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.arungupta.me/2014/12/remove-docker-image-container-with-criteria-techtip60/&quot;&gt;Remove Docker image and container with a criteria&lt;/a&gt; by &lt;strong&gt;Arun Gupta&lt;/strong&gt; (added 5. Dec 2014) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://lollyrock.com/articles/execute-in-docker-sandbox/&quot;&gt;Execute commands in a Docker sandbox&lt;/a&gt; by &lt;strong&gt;Chris Rock&lt;/strong&gt; (added 9. Oct 2014) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://flux7.com/blogs/docker/docker-tutorial-series-part-9-10-docker-remote-api-commands-for-images/&quot;&gt;10 Docker Remote API Commands for Images&lt;/a&gt; by &lt;strong&gt;Flux7&lt;/strong&gt; (added 17. Jul 2014) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://flux7.com/blogs/docker/docker-tutorial-series-part-8-docker-remote-api/&quot;&gt;Docker Remote API&lt;/a&gt; by &lt;strong&gt;Flux7&lt;/strong&gt; (added 3. Jul 2014) &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Using Docker programmatically &lt;small&gt;language bindings and IDEs&lt;/small&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.zenika.com/index.php?post/2015/06/15/Docker-meets-the-IDE&quot;&gt;Docker meets the IDE&lt;/a&gt; by &lt;strong&gt;Mario Loriedo&lt;/strong&gt; (added 18. Jun 2015) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.docker.com/reference/api/remote_api_client_libraries/&quot;&gt;Docker Remote API Client Libraries&lt;/a&gt; by &lt;strong&gt;Docker&lt;/strong&gt; (added 14. May 2015) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pub.dartlang.org/packages/bwu_docker&quot;&gt;Dart client for the Docker remote API&lt;/a&gt; by &lt;strong&gt;Guenter Zoechbauer&lt;/strong&gt; (added 14. May 2015) &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;How to containerize &lt;small&gt;apps&lt;/small&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://coding.jandavid.de/2016/01/22/dockerizing-sinatra/&quot;&gt;Dockerizing Sinatra&lt;/a&gt; by &lt;strong&gt;Jan David&lt;/strong&gt; (added 4. Feb 2016) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.iron.io/blog/2016/01/microcontainers-tiny-portable-containers.html&quot;&gt;Microcontainers – Tiny, Portable Docker Containers&lt;/a&gt; by &lt;strong&gt;Travis Reeder&lt;/strong&gt; (added 28. Jan 2016) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://habd.as/simple-websites-jekyll-docker/&quot;&gt;Simple websites with Jekyll and Docker&lt;/a&gt; by &lt;strong&gt;Josh Habdas&lt;/strong&gt; (added 7. May 2015) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.inovex.de/docker-a-comparison-of-minimalistic-operating-systems/&quot;&gt;Docker: A Comparison of Minimalistic Operating Systems&lt;/a&gt; by &lt;strong&gt;Johannes Scheuermann&lt;/strong&gt; (added 7. May 2015) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.centurylinklabs.com/small-docker-images-for-go-apps/&quot;&gt;Small Docker Images For Go Apps&lt;/a&gt; by &lt;strong&gt;Brian DeHamer&lt;/strong&gt; (added 12. Feb 2015) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.kennybastani.com/2014/11/graph-analytics-docker-spark-neo4j.html&quot;&gt;A Docker Image for Graph Analytics on Neo4j woth Apache Spark GraphX&lt;/a&gt; by &lt;strong&gt;Kenny Bastani&lt;/strong&gt; (added 5. Dec 2014) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.giantswarm.io/getting-started-with-java-development-on-docker&quot;&gt;Getting Started with Java Development on Docker&lt;/a&gt; by &lt;strong&gt;Matthias Lübken&lt;/strong&gt; (added 11. Nov 2014) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://nginx.com/blog/deploying-nginx-nginx-plus-docker/&quot;&gt;Deploying NGINX and NGINX Plus with Docker&lt;/a&gt; by &lt;strong&gt;Rick Nelson&lt;/strong&gt; (added 23. Oct 2014) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jasonwilder.com/blog/2014/03/25/automated-nginx-reverse-proxy-for-docker/&quot;&gt;Automated Nginx Reverse Proxy for Docker&lt;/a&gt; &lt;strong&gt;by Jason Wilder&lt;/strong&gt; (added 16. Oct 2014) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rockyj.in/2014/09/14/jruby_docker.html&quot;&gt;Build great JRuby apps with Docker&lt;/a&gt; by &lt;strong&gt;Rocky Jaiswal&lt;/strong&gt; (added 18th September 2014)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.atlashealth.com/blog/2014/09/persistent-ruby-gems-docker-container/#.VBqMnmR_vu8&quot;&gt;How to Create a Persistent Ruby Gems Container with Docker&lt;/a&gt; by &lt;strong&gt;Phil Misiowiec&lt;/strong&gt; (added 18. Sep 2014) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.sequenceiq.com/blog/2014/09/15/hadoop-2-5-1-docker/&quot;&gt;Apache Hadoop 2.5.1 on Docker&lt;/a&gt; by &lt;strong&gt;Janos Matyas&lt;/strong&gt; (added 18. Sep 2014) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.nkode.io/2014/09/12/easymysql.html&quot;&gt;Easy MySQL - A docker container to provide MySQL databases on the fly&lt;/a&gt; by &lt;strong&gt;Nane Kratzke&lt;/strong&gt; (added 13. Sep 2014) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://tandrepires.wordpress.com/2014/08/12/docker-how-to-monitor-your-servers-with-nagios/&quot;&gt;Docker: Howto monitor your servers with Nagios&lt;/a&gt; by &lt;strong&gt;Tiago Pires&lt;/strong&gt; (added 21. Aug 2014) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://slash-dev-blog.me/docker-tor-iceweasel.html&quot;&gt;Building a Tor box&lt;/a&gt; by &lt;strong&gt;/dev/blog&lt;/strong&gt; (added 18. Aug 2014) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://humblec.com/containers-docker-glusterfs-dockit-easy-way-glusterfs-deployment-docker/&quot;&gt;An easy way of GlusterFS deployment with Docker&lt;/a&gt; by &lt;strong&gt;humblec.com&lt;/strong&gt; (added 18. Aug 2014) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://pertino.com/blog/secure-cloud-bursting-part-1/&quot;&gt;How to build a Jenkins Master&lt;/a&gt; by &lt;strong&gt;Luke Woydziak&lt;/strong&gt; (added 25. Jul 2014) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.nkode.io/2014/03/05/dockerize-dart.html&quot;&gt;Dart meets Docker, How to Dockerize Dart Apps&lt;/a&gt; by &lt;strong&gt;Nane Kratzke&lt;/strong&gt; (added 3. Jul 2014) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://loige.com/simple-echo-server-written-in-go-dockerized/?utm_source=Docker+News&amp;amp;utm_campaign=f90a032721-Docker_0_5_0_7_18_2013&amp;amp;utm_medium=email&amp;amp;utm_term=0_c0995b6e8f-f90a032721-235712605&quot;&gt;Simple echo server written in Go, dockerized&lt;/a&gt; by &lt;strong&gt;Loige.com&lt;/strong&gt;  (added 3. Jul 2014) &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Containerization &lt;small&gt;Patterns&lt;/small&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/hotcloud16/workshop-program/presentation/burns&quot;&gt;Design Patterns for Container-based Distributed Systems&lt;/a&gt; by &lt;strong&gt;Brendan Burns&lt;/strong&gt; and &lt;strong&gt;David Oppenheimer&lt;/strong&gt; (added 22. Jun 2016) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@lherrera/poor-mans-load-balancing-with-docker-2be014983e5&quot;&gt;Poor man’s load balancing with Docker&lt;/a&gt; by &lt;strong&gt;Luis Herrera Benitez&lt;/strong&gt; (added 1. Jun 2016) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://techblog.constantcontact.com/devops/a-tale-of-three-docker-anti-patterns&quot;&gt;A Tale of Three Docker Anti-Patterns&lt;/a&gt; by &lt;strong&gt;Erik Dasque&lt;/strong&gt; (added 14. Jan 2016) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@mattias.holmlund/building-the-perfect-data-container-2df6bb3528df&quot;&gt;Building the perfect data container&lt;/a&gt; by &lt;strong&gt;Mattias Holmlund&lt;/strong&gt; (added 27. Aug 2015) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://abdelrahmanhosny.com/2015/07/01/3-solutions-to-bi-directional-linking-problem-in-docker-compose&quot;&gt;Three Solutions to Bi-directional Linking Problem in Docker Compose&lt;/a&gt; by &lt;strong&gt;Abdelrahman Hosny&lt;/strong&gt; (added 9. Jul 2015) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://12factor.net/&quot;&gt;The Twelve Factor App (not just for Docker)&lt;/a&gt; by &lt;strong&gt;Adam Wiggins&lt;/strong&gt; (added 6. Apr 2015) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.tryolabs.com/2015/03/26/configurable-docker-containers-for-multiple-environments/&quot;&gt;Configurable Docker Containers for Multiple Environments&lt;/a&gt; by &lt;strong&gt;alan (Tryolabs)&lt;/strong&gt; (added 4. Apr 2015) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@allingeek/data-packed-volume-containers-distribute-configuration-c23ff80987cd&quot;&gt;Data Packed Volume Containers: Distribute Configuration&lt;/a&gt; by &lt;strong&gt;Jeff Nickoloff&lt;/strong&gt; (added 3. Jan 2015) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@allingeek/on-docker-container-composition-a98788f1aa3c&quot;&gt;On Docker Container Composition&lt;/a&gt; by &lt;strong&gt;Jeff Nickoloff&lt;/strong&gt; (added 27. Nov 2014) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://container42.com/2013/12/16/persistent-volumes-with-docker-container-as-volume-pattern/&quot;&gt;Persistent volumes with Docker - Data-only container pattern&lt;/a&gt; by &lt;strong&gt;Container 42&lt;/strong&gt; (added 27. Nov 2014) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.hokstad.com/docker/patterns&quot;&gt;Eight Docker Development Patterns&lt;/a&gt; by &lt;strong&gt;Vidar Hokstad&lt;/strong&gt; (added 23. Oct 2014) &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Docker &lt;small&gt;machine&lt;/small&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://superuser.openstack.org/articles/using-docker-machine-with-openstack&quot;&gt;Using Docker Machine with OpenStack&lt;/a&gt; by &lt;strong&gt;Scott Lowe&lt;/strong&gt; (added 8. Oct 2015) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://sreeninet.wordpress.com/2015/06/14/openstack-and-docker-part-1/&quot;&gt;OpenStack and Docker (Part I)&lt;/a&gt; and &lt;a href=&quot;https://sreeninet.wordpress.com/2015/06/14/openstack-and-docker-part-2/&quot;&gt;Part II&lt;/a&gt; by &lt;strong&gt;Sreenivas Makam&lt;/strong&gt; (added 18. Jun 2015) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://linoxide.com/linux-how-to/use-docker-machine-cloud-provider/&quot;&gt;How to Use Docker Machine with a Cloud Provider&lt;/a&gt; by &lt;strong&gt;Arun Paysi&lt;/strong&gt; (added 20. May 2015) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/aws-activate-startup-blog/running-services-using-docker-and-amazon-ec2-container-service-bde16b099cb9&quot;&gt;Running Services Using Docker and Amazon EC2 Container Service&lt;/a&gt; by &lt;strong&gt;Nate Slater&lt;/strong&gt; (added 7. May 2015) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.docker.com/installation/google/&quot;&gt;QuickStart with Container-optimized Google Compute Engine images&lt;/a&gt; by &lt;strong&gt;Docker&lt;/strong&gt; (added 27. Feb 2015) &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Docker &lt;small&gt;Swarm Mode&lt;/small&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://lostechies.com/gabrielschenker/2016/09/05/docker-and-swarm-mode-part-1/&quot;&gt;Docker and Swarm Mode Part 1&lt;/a&gt;, &lt;a href=&quot;https://lostechies.com/gabrielschenker/2016/09/11/docker-and-swarm-mode-part-2/&quot;&gt;Part 2&lt;/a&gt;, &lt;a href=&quot;https://lostechies.com/gabrielschenker/2016/10/05/docker-and-swarm-mode-part-3&quot;&gt;Part 3&lt;/a&gt; by &lt;strong&gt;Gabriel Schenker&lt;/strong&gt; (added 6. Oct 2016) &lt;span class='label label-success'&gt;New&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://collabnix.com/archives/1464&quot;&gt;Understanding Node Failure Handling under Docker 1.12 Swarm Mode&lt;/a&gt; by &lt;strong&gt;Ajeet Singh Raina&lt;/strong&gt; (added 21. Jul 2016)&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://collabnix.com/archives/1445&quot;&gt;Docker 1.12 Swarm Mode – Under the hood&lt;/a&gt; by &lt;strong&gt;Ajeet Singh Raina&lt;/strong&gt; (added 21. Jul 2016) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://collabnix.com/archives/1391&quot;&gt;Docker 1.12 Networking Model Overview&lt;/a&gt; by &lt;strong&gt;Ajeet Singh Raina&lt;/strong&gt; (added 21. Jul 2016) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://collabnix.com/archives/1317&quot;&gt;Docker Engine 1.12 comes with built-in Distribution &amp;amp; Orchestration System&lt;/a&gt; by &lt;strong&gt;Ajeet Singh Raina&lt;/strong&gt; (added 21. Jul 2016) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.couchbase.com/2016/july/labels-constraints-docker-daemon-service&quot;&gt;Labels and Constraints with Docker Daemon and Service&lt;/a&gt; by &lt;strong&gt;Arun Gupta&lt;/strong&gt; (added 21. Jul 2016) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@LachlanEvenson/5-minutes-dabbling-with-docker-distributed-application-bundles-dab-60f2dca3829#.b4irfua41&quot;&gt;5 minutes dabbling with Docker Distributed Application Bundles (DAB)&lt;/a&gt; by &lt;strong&gt;Lachlan Evenson&lt;/strong&gt; (added 28. Jun 2016) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.docker.com/2016/06/docker-1-12-built-in-orchestration/&quot;&gt;DOCKER 1.12: NOW WITH BUILT-IN ORCHESTRATION!&lt;/a&gt; by &lt;strong&gt;Docker Core Engineering&lt;/strong&gt; (added 22. Jun 2016) &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Docker &lt;small&gt;network&lt;/small&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.weave.works/&quot;&gt;Weave - the Docker network&lt;/a&gt; by &lt;strong&gt;weaveworks&lt;/strong&gt; (added 1. Jun 2016) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.arungupta.me/docker-bridge-overlay-network-compose-variable-substitution&quot;&gt;Docker Bridge and Overlay Network with Compose Variable Substitution&lt;/a&gt; by &lt;strong&gt;Arun Gupta&lt;/strong&gt; (added 16. Dec 2015) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.projectcalico.org/docker-libnetwork-is-almost-here-and-calico-is-ready&quot;&gt;Docker libnetwork is almost here, and Calico is ready!&lt;/a&gt; by &lt;strong&gt;Tom Denham&lt;/strong&gt; (added 2. Nov 2015) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@mhausenblas/docker-networking-69b4f39df051&quot;&gt;Docker Networking (simple listing of SDN solutions relevant for Docker networking)&lt;/a&gt; by &lt;strong&gt;Michael Hausenblas&lt;/strong&gt; (added 3. May 2015)&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://aucouranton.com/2015/01/16/docker-virtual-networking-with-socketplane-io/&quot;&gt;Docker Virtual Networking with Socketplane.io&lt;/a&gt; by &lt;strong&gt;Ryan Wallner&lt;/strong&gt; (added 22. Jan 2015) &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Data persistence &lt;small&gt;for statefull services&lt;/small&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.emccode.com/2015/11/03/use-docker-swarm-with-a-data-persistence-layer&quot;&gt;Use Docker Swarm with a data persistence layer&lt;/a&gt; by &lt;strong&gt;Jonas Rosland&lt;/strong&gt; (added 9. Nov 2015) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://cloud-mechanic.blogspot.de/2014/10/storage-concepts-in-docker-network-and.html&quot;&gt;Storage Concepts in Docker: Network and Cloud Storage&lt;/a&gt; by &lt;strong&gt;Mark Lamourine&lt;/strong&gt; (added 23. Oct 2014) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://cloud-mechanic.blogspot.de/2014/10/storage-concepts-in-docker-persistent.html&quot;&gt;Storage Concepts in Docker: Persistent Storage&lt;/a&gt; &lt;strong&gt;Mark Lamourine&lt;/strong&gt; (added 16. Oct 2014) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://cloud-mechanic.blogspot.de/2014/10/storage-concepts-in-docker.html&quot;&gt;Storage Concepts in Docker: Shared Storage and the VOLUME directive&lt;/a&gt; by &lt;strong&gt;Mark Lamourine&lt;/strong&gt; (added 9. Oct 2014) &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;How to log, monitor and manage docker &lt;small&gt;performance&lt;/small&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://logz.io/learn/docker-monitoring-elk-stack/&quot;&gt;Docker Monitoring with the ELK Stack: A Step-by-Step Guide&lt;/a&gt; by &lt;strong&gt;logz.io&lt;/strong&gt; (added 21. Sep 2016) &lt;span class='label label-success'&gt;New&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/uschtwill/docker_monitoring_logging_alerting&quot;&gt;Out of the box Docker Monitoring, Logging, Alerting&lt;/a&gt; by &lt;strong&gt;Wilhelm Uschtrin&lt;/strong&gt; (added 21. Sep 2016) &lt;span class='label label-success'&gt;New&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@yoanis_gil/logging-with-docker-part-1-b23ef1443aac#.16avnrf2a&quot;&gt;Docker Logging&lt;/a&gt; by &lt;strong&gt;Yoanis Gil Delgado&lt;/strong&gt; (added 4. Jan 2016) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.loggly.com/blog/what-does-the-docker-daemon-log-contain&quot;&gt;What Does the Docker Daemon Log Contain?&lt;/a&gt; by &lt;strong&gt;Andre Newmann&lt;/strong&gt; (added 17. Dec 2015) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://labs.ctl.io/monitoring-docker-services-with-prometheus&quot;&gt;Monitoring Docker Services with Prometheus&lt;/a&gt; by &lt;strong&gt;Rupak Ganguly&lt;/strong&gt; (added 23. Jul 2015) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.brianchristner.io/how-to-setup-docker-monitoring/&quot;&gt;How to Setup Docker Monitoring&lt;/a&gt; by &lt;strong&gt;Brian Christner&lt;/strong&gt; (added 28. May 2015) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rancher.com/comparing-monitoring-options-for-docker-deployments/&quot;&gt;Comparing Five Monitoring Options for Docker&lt;/a&gt; and &lt;a href=&quot;http://rancher.com/docker-monitoring-continued-prometheus-and-sysdig/&quot;&gt;Docker Monitoring Continued&lt;/a&gt; by &lt;strong&gt;Usman Ismail&lt;/strong&gt; (added 24. Apr 2015) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jam.sg/blog/mongodb-docker-part-2/&quot;&gt;MongoDB &amp;amp; Docker - Benchmarking layered FS, host directory data volumes &amp;amp; data-only containers&lt;/a&gt; by &lt;strong&gt;James Tan&lt;/strong&gt; (added 5. Feb 2015) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://goldmann.pl/blog/2014/09/11/resource-management-in-docker/&quot;&gt;Resource management in Docker&lt;/a&gt; by &lt;strong&gt;Marek Goldmann&lt;/strong&gt;  (added 18. Sep 2014) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://domino.research.ibm.com/library/cyberdig.nsf/papers/0929052195DD819C85257D2300681E7B/$File/rc25482.pdf&quot;&gt;An Updated Performance Comparison of Virtual Machines and Linux Containers&lt;/a&gt; by &lt;strong&gt;Wes Felter, Alexandre Ferreira, Ram Rajamony, Juan Rubio&lt;/strong&gt;  (added 17. Aug 2014) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.librato.com/posts/docker-container-data-with-fluentd&quot;&gt;Collecting Docker Container Data with Fluentd&lt;/a&gt; by &lt;strong&gt;kiyototamura&lt;/strong&gt; (added 17. Aug 2014) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.sflow.com/2014/06/docker-performance-monitoring.html?utm_source=Docker+News&amp;amp;utm_campaign=f90a032721-Docker_0_5_0_7_18_2013&amp;amp;utm_medium=email&amp;amp;utm_term=0_c0995b6e8f-f90a032721-235712605&quot;&gt;Docker performance monitor&lt;/a&gt; by &lt;strong&gt;sflow.com&lt;/strong&gt; (added 3. Jul 2014) &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Securing Docker&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.xebia.com/security-is-maturing-in-the-docker-ecosystem&quot;&gt;Security is Maturing in the Docker Ecosystem&lt;/a&gt; by &lt;strong&gt;Sebastiaan van Steenis&lt;/strong&gt; (added 14. Jan 2016) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://jaxenter.com/docker-and-security-how-do-they-fit-together-122333.html&quot;&gt;Docker and Security: How do they fit together?&lt;/a&gt; by &lt;strong&gt;Andreas Schmidt&lt;/strong&gt; and &lt;strong&gt;Dustin Huptas&lt;/strong&gt; (added 7. Jan 2016) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blyx.com/2015/12/01/docker-security-tools-audit-and-vulnerability-assessment&quot;&gt;Docker Security Tools: Audit and Vulnerability Assessment&lt;/a&gt; by &lt;strong&gt;Toni de la Fuente&lt;/strong&gt; (added 28. Dec 2015) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://coreos.com/blog/vulnerability-analysis-for-containers/&quot;&gt;CoreOS Introduces Clair: Open Source Vulnerability Analysis for your Containers&lt;/a&gt; by &lt;strong&gt;Quentin Mochu&lt;/strong&gt; (added 14. Nov 2015) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rudijs.github.io/2015-07/docker-restricting-container-access-with-iptables&quot;&gt;Restricting Docker Container Access with Iptables&lt;/a&gt; by &lt;strong&gt;Rudi Starcevic&lt;/strong&gt; (added 14. Aug 2015) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://container-solutions.com/docker-security-cheat-sheet/&quot;&gt;Docker Security Cheat Sheet&lt;/a&gt; by &lt;strong&gt;Adrian Mouat&lt;/strong&gt; (added 18. Jun 2015) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/docker/docker-bench-security&quot;&gt;Docker Bench for Security&lt;/a&gt; by &lt;strong&gt;Docker&lt;/strong&gt; (added 4. Jun 2015) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://zwischenzugs.wordpress.com/2015/05/21/a-field-guide-to-docker-security-measures/&quot;&gt;A Field Guide to Docker Security Measures&lt;/a&gt; by &lt;strong&gt;zwischenzugs&lt;/strong&gt; (added 28. May 2015) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://container-solutions.com/2015/04/running-secured-docker-registry-2-0/&quot;&gt;Running Secured Docker Registry 2.0&lt;/a&gt; by &lt;strong&gt;Jaroslav Holub&lt;/strong&gt; (added 1. May 2015) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://opensource.com/business/15/3/docker-security-tuning&quot;&gt;Tuning Docker with the newest security enhancements&lt;/a&gt; by &lt;strong&gt;Daniel Walsh&lt;/strong&gt; (added 12. Mar 2015) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.tutum.co/2015/02/03/hardening-containers-disable-suid-programs/&quot;&gt;Hardening Docker Containers: Disable SUID Programs&lt;/a&gt; by &lt;strong&gt;allingeek&lt;/strong&gt; (added 5. Feb 2015) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://technolo-g.com/generate-ssl-for-docker-swarm/&quot;&gt;Creating SSL/TLS Certificates for Docker and Docker Swarm&lt;/a&gt; by &lt;strong&gt;Matthew Bajor&lt;/strong&gt; (added 22. Jan 2015) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/GDSSecurity/Docker-Secure-Deployment-Guidelines&quot;&gt;Docker Secure Deployment Guide&lt;/a&gt; by &lt;strong&gt;Quentin Grosperring&lt;/strong&gt; (added 15. Jan 2015) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@allingeek/safer-local-docker-networks-8ce22127f9df&quot;&gt;Safer Local Docker Networks&lt;/a&gt; by &lt;strong&gt;Jeff Nickoloff&lt;/strong&gt; (added 8. Jan 2015) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ahmetalpbalkan.com/blog/docker-http-basic-auth/&quot;&gt;Securing Docker with HTTP Basic Authentication&lt;/a&gt; by &lt;strong&gt;Ahmet Alp Balkan&lt;/strong&gt; (added 30. Oct 2014) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.informationweek.com/cloud/infrastructure-as-a-service/how-docker-changes-cloud-security/a/d-id/1316793?_mc=RSS_IWK_EDT&quot;&gt;How Docker Changes Cloud Security&lt;/a&gt; by &lt;strong&gt;Lucas Carlson&lt;/strong&gt; (added 23. Oct 2014) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://brianchristner.io/updating-your-docker-containers-for-shellshock/&quot;&gt;Updating your Docker for Shellshock&lt;/a&gt; by &lt;strong&gt;Brian Christner&lt;/strong&gt; (added 3. Oct 2014) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://opensource.com/business/14/9/security-for-docker&quot;&gt;Bringing new security features to Docker&lt;/a&gt; by &lt;strong&gt;Daniel Walsh&lt;/strong&gt; (added 4. Sep 2014) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://opensource.com/business/14/7/docker-security-selinux&quot;&gt;Docker security with SELinux&lt;/a&gt; by &lt;strong&gt;Daniel Walsh&lt;/strong&gt; (added 25. Jul 2014) &lt;/li&gt;
&lt;/ul&gt;

      </description>
      <pubDate>Sun, 24 Aug 2014 00:00:00 +0200</pubDate>
      <link>http://www.nkode.io//2014/08/24/valuable-docker-links.html</link>
      <guid isPermaLink="true">http://www.nkode.io//2014/08/24/valuable-docker-links.html</guid>
    </item>
    
    <item>
      <title>Programming II (Summer 2014)</title>
      <description>
        
        &lt;img src=&quot;/img/posts/java-code.jpg&quot;&gt;
        
        &lt;p&gt;The lecture &lt;strong&gt;Programming II&lt;/strong&gt; continues &lt;strong&gt;Programming I&lt;/strong&gt; by introducing
more sophistacted programming aspects
for freshman students (second semester).&lt;/p&gt;

&lt;p&gt;The lecture covers aspects like
unit testing and code coverage,
types and generics,
OOAD by example of Tic Tac Toe,
graphical user interfaces and the model view controller paradigm,
as well as concurrent programming using threads.&lt;/p&gt;

&lt;p&gt;JAVA is used as teaching language, nevertheless the principles are applicable to every (imperative or class based object oriented) programming language.&lt;/p&gt;

&lt;p&gt;Lecture is given for students of the following study programs at Lübeck University of Applied Sciences:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.fh-luebeck.de/Inhalt/03_Hochschulangehoerige_Ch031/04_FB_Elektrotechnik/03_Studiengaenge/04_Q_Informatik_BSc13/index.html&quot;&gt;Computer Science/Software Engineering study programme&lt;/a&gt;, B. Sc.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.fh-luebeck.de/Inhalt/03_Hochschulangehoerige_Ch031/04_FB_Elektrotechnik/03_Studiengaenge/01_Q_ITD_BSc/index.html&quot;&gt;Information Technology and Design study programme&lt;/a&gt;, B. Sc. (not all of the following aspects are coverd)&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lecture will cover following aspects:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Testing&lt;/strong&gt; of software including introduction to &lt;strong&gt;contracts&lt;/strong&gt;, &lt;strong&gt;unit testing&lt;/strong&gt; and &lt;strong&gt;code coverage&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Generics&lt;/strong&gt; introducing concepts like generic classes and methodes as well as concepts like type erasure, bounds&lt;/li&gt;
&lt;li&gt;Introduction to &lt;strong&gt;OOAD&lt;/strong&gt; (object oriented analysis and design) by example of Tic Tac Toe&lt;/li&gt;
&lt;li&gt;Graphical user interfaces (&lt;strong&gt;GUI&lt;/strong&gt;) using Swing introducing &lt;strong&gt;MVC&lt;/strong&gt; (model view controler) paradigma&lt;/li&gt;
&lt;li&gt;Concurrent programming using &lt;strong&gt;threads&lt;/strong&gt; introducing accompanying &lt;strong&gt;thread safeness&lt;/strong&gt; problems like race conditions, producer-consumer problem, deadlocks.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Course Material (german only)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Lecture Unit 8: &lt;a href=&quot;/assets/programming/prog-unit08.pdf&quot;&gt;Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lecture Unit 9: &lt;a href=&quot;/assets/programming/prog-unit09.pdf&quot;&gt;Generics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lecture Unit 10: &lt;a href=&quot;/assets/programming/prog-unit10.pdf&quot;&gt;OOAD by example of Tic Tac Toe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lecture Unit 11: &lt;a href=&quot;/assets/programming/prog-unit11.pdf&quot;&gt;GUI and MVC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lecture Unit 12: &lt;a href=&quot;/assets/programming/prog-unit12.pdf&quot;&gt;Thread based programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Exercises: &lt;a href=&quot;/assets/programming/prog-excercises.pdf&quot;&gt;Catalogue of excercises&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
      <pubDate>Sun, 13 Jul 2014 00:00:00 +0200</pubDate>
      <link>http://www.nkode.io//lecture/2014/07/13/lecture-programming-ii.html</link>
      <guid isPermaLink="true">http://www.nkode.io//lecture/2014/07/13/lecture-programming-ii.html</guid>
    </item>
    
    <item>
      <title>Cloud TRANSIT</title>
      <description>
        
        &lt;img src=&quot;/img/posts/cloud.jpg&quot;&gt;
        
        &lt;table class=&quot;project&quot;&gt;
&lt;tr&gt;
  &lt;th&gt;Project duration&lt;/th&gt;
  &lt;td&gt;1st. Nov. 2014 - 31th Oct. 2017&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Project manager&lt;/th&gt;
  &lt;td&gt;Prof. Nane Kratzke&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Project staff&lt;/th&gt;
  &lt;td&gt;Peter-Christian Quint&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;&lt;/th&gt;
  &lt;td&gt;Christian Stüben (Student Assistant)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;&lt;/th&gt;
  &lt;td&gt;Arne Salveter (Student Assistant)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Project partners&lt;/th&gt;
  &lt;td&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.itm.uni-luebeck.de/&quot;&gt;Lübeck University (Institute of Telematics)&lt;/a&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.fat-itsolutions.de/&quot;&gt;fat IT solutions GmbH (Kiel)&lt;/a&gt;
    &lt;/ul&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;h3&gt;Research context&lt;/h3&gt;

&lt;p&gt;Current cloud computing related research focuses often
&lt;a href=&quot;https://www.springer.com/business+%26+management/operations+research/book/978-1-4419-1627-3&quot;&gt;Service Science&lt;/a&gt; related problems
and therefore concentrates on aspects how to design, operate and deliver
agile cloud based services according to a broad (economical as well as technological)
understanding of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Service&quot;&gt;service&lt;/a&gt; term.&lt;/p&gt;

&lt;p&gt;Beside common security, governance and cost forecast concerns,
often technological &lt;a href=&quot;https://en.wikipedia.org/wiki/Vendor_lock-in&quot;&gt;vendor lock-in&lt;/a&gt;
worries come along with cloud computing, which is
especially true for small and medium-sized enterprises
(&lt;a href=&quot;/bibliography/Kra2011a.html&quot;&gt;Kra2011a&lt;/a&gt;, &lt;a href=&quot;/bibliography/Kra2011b.html&quot;&gt;Kra2011b&lt;/a&gt;, &lt;a href=&quot;/bibliography/Kra2012b.html&quot;&gt;Kra2012b&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;But astonishing little research activities focus a technological point of view
how to overcome technical &lt;a href=&quot;https://en.wikipedia.org/wiki/Vendor_lock-in&quot;&gt;vendor lock-in&lt;/a&gt; problems in cloud computing.&lt;/p&gt;

&lt;p&gt;Therefore, this technological point of view is addressed particularly
by this research project.&lt;/p&gt;

&lt;h3&gt;Research objective&lt;/h3&gt;

&lt;p&gt;Current state of the art cloud based software services are often
characterized by a highly implicit technological
dependency on underlying hosting cloud infrastructures.
The project &lt;strong&gt;Cloud TRANSIT&lt;/strong&gt;
investigates, how to design cloud based software services to reduce
technological dependencies on underlying cloud infrastructures.&lt;/p&gt;

&lt;p&gt;By designing and developing a generic cloud service description language, it
should be possible to define secure, transferable and elastic services of
typical complexity being deployable
to any IaaS cloud infrastructure. Furthermore, it should be possible to
migrate these services from one private or public cloud infrastructure
to another (not necessary compatible) cloud infrastructure.&lt;/p&gt;

&lt;p&gt;This kind of &lt;strong&gt;transferability&lt;/strong&gt; reduces cloud infrastructure related
technical vendor lock-in problems for small and medium sized
enterprises.&lt;/p&gt;

&lt;p&gt;Therefore, the project&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;analyzes several common public and private cloud infrastructures,&lt;/li&gt;
&lt;li&gt;derives requirements for a generic cloud service description language.&lt;/li&gt;
&lt;li&gt;For cloud services of typical complexity (distributed, load balanced, auto scaling)&lt;/li&gt;
&lt;li&gt;a prototypic implementation of the description language is implemented&lt;/li&gt;
&lt;li&gt;and a proof-of-concept is provided.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Publications&lt;/h3&gt;

&lt;ol class=&quot;bibliography&quot;&gt;&lt;li&gt;&lt;strong&gt;[KQP+2016]&lt;/strong&gt; &lt;span id=&quot;KQP+2016&quot;&gt;Kratzke, N., Quint, P.-C., Palme, D., &amp;amp; Reimers, D. (2016). Project Cloud TRANSIT - Or to Simplify Cloud-native Application Provisioning for SMEs by Integrating Already Available Container Technologies. In V. Kantere &amp;amp; B. Koch (Eds.), &lt;i&gt;European Project Space on Smart Systems, Big Data, Future Internet - Towards Serving the Grand Societal Challenges&lt;/i&gt;. SCITEPRESS.&lt;/span&gt;

&lt;span class=&quot;researchgate&quot;&gt;
    &lt;a href='https://www.researchgate.net/publication/304578995'&gt;Research&lt;em&gt;Gate&lt;/em&gt;&lt;/a&gt;
&lt;/span&gt;

&lt;a class=&quot;details&quot; href=&quot;/bibliography/KQP+2016.html&quot;&gt;more&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[KQ2016b]&lt;/strong&gt; &lt;span id=&quot;KQ2016b&quot;&gt;Kratzke, N., &amp;amp; Quint, P.-C. (2016). Investigation of Impacts on Network Performance in the Advance of a Microservice Design. In M. Helfert, D. Ferguson, V. M. Munoz, &amp;amp; J. Cardoso (Eds.), &lt;i&gt;Cloud Computing and Services Science Selected Papers&lt;/i&gt;. Springer.&lt;/span&gt;

&lt;span class=&quot;researchgate&quot;&gt;
    &lt;a href='https://www.researchgate.net/publication/308219976'&gt;Research&lt;em&gt;Gate&lt;/em&gt;&lt;/a&gt;
&lt;/span&gt;

&lt;a class=&quot;details&quot; href=&quot;/bibliography/KQ2016b.html&quot;&gt;more&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[KP2016]&lt;/strong&gt; &lt;span id=&quot;KP2016&quot;&gt;Kratzke, N., &amp;amp; Peinl, R. (2016). ClouNS - A Cloud-native Applications Reference Model for Enterprise Architects. In &lt;i&gt;8th Workshop on Service oriented Enterprise Architecture for Enterprise Engineering (SoEA4EE 2016) in conjunction with the EDOC 2016 conference&lt;/i&gt;.&lt;/span&gt;

&lt;span class=&quot;researchgate&quot;&gt;
    &lt;a href='https://www.researchgate.net/publication/304024156'&gt;Research&lt;em&gt;Gate&lt;/em&gt;&lt;/a&gt;
&lt;/span&gt;

&lt;a class=&quot;details&quot; href=&quot;/bibliography/KP2016.html&quot;&gt;more&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[Finnern2016]&lt;/strong&gt; &lt;span id=&quot;Finnern2016&quot;&gt;Finnern, T. (2016). &lt;i&gt;Evaluation einer Cloudspeicher-Loesung bei einem Telekommunikationsunternehmen&lt;/i&gt;. Retrieved from http://www.nkode.io/assets/self-archive/evaluation-cloudspeicher.pdf&lt;/span&gt;

&lt;a class=&quot;details&quot; href=&quot;/bibliography/Finnern2016.html&quot;&gt;more&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[KQ2016a]&lt;/strong&gt; &lt;span id=&quot;KQ2016a&quot;&gt;Kratzke, N., &amp;amp; Quint, P.-C. (2016). ppbench - A Visualizing Network Benchmark for Microservices. In &lt;i&gt;Proceedings of the 6th International Conference on Cloud Computing and Services Science (CLOSER 2016)&lt;/i&gt; (pp. 223–231). http://doi.org/10.5220/0005732202230231&lt;/span&gt;

&lt;span class=&quot;researchgate&quot;&gt;
    &lt;a href='https://www.researchgate.net/publication/292657431'&gt;Research&lt;em&gt;Gate&lt;/em&gt;&lt;/a&gt;
&lt;/span&gt;

&lt;a class=&quot;details&quot; href=&quot;/bibliography/KQ2016a.html&quot;&gt;more&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[QK2016a]&lt;/strong&gt; &lt;span id=&quot;QK2016a&quot;&gt;Quint, P.-C., &amp;amp; Kratzke, N. (2016). Overcome Vendor Lock-In by Integrating Already Available Container Technologies - Towards Transferability in Cloud Computing for SMEs. In &lt;i&gt;Proceedings of CLOUD COMPUTING 2016 (7th. International Conference on Cloud Computing, GRIDS and Virtualization)&lt;/i&gt;.&lt;/span&gt;

&lt;span class=&quot;researchgate&quot;&gt;
    &lt;a href='https://www.researchgate.net/publication/292980185'&gt;Research&lt;em&gt;Gate&lt;/em&gt;&lt;/a&gt;
&lt;/span&gt;

&lt;a class=&quot;details&quot; href=&quot;/bibliography/QK2016a.html&quot;&gt;more&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[KQ2015a]&lt;/strong&gt; &lt;span id=&quot;KQ2015a&quot;&gt;Kratzke, N., &amp;amp; Quint, P.-C. (2015). How to Operate Container Clusters more Efficiently? Some Insights Concerning Containers, Software-Defined-Networks, and their sometimes Counterintuitive Impact on Network Performance. &lt;i&gt;International Journal On Advances in Networks and Services&lt;/i&gt;, &lt;i&gt;8&lt;/i&gt;(3&amp;4), 203–214. Retrieved from http://www.thinkmind.org/download.php?articleid=netser_v8_n34_2015_8&lt;/span&gt;

&lt;span class=&quot;researchgate&quot;&gt;
    &lt;a href='https://www.researchgate.net/publication/284501557'&gt;Research&lt;em&gt;Gate&lt;/em&gt;&lt;/a&gt;
&lt;/span&gt;

&lt;a class=&quot;details&quot; href=&quot;/bibliography/KQ2015a.html&quot;&gt;more&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[KQ2015]&lt;/strong&gt; &lt;span id=&quot;KQ2015&quot;&gt;Kratzke, N., &amp;amp; Quint, P.-C. (2015). About Automatic Benchmarking of IaaS Cloud Service Providers for a World of Container Clusters. &lt;i&gt;Journal of Cloud Computing Research&lt;/i&gt;, &lt;i&gt;1&lt;/i&gt;(1), 16–34. Retrieved from http://jccr.uscip.us/PublishedIssues.aspx&lt;/span&gt;

&lt;span class=&quot;researchgate&quot;&gt;
    &lt;a href='https://www.researchgate.net/publication/278242891'&gt;Research&lt;em&gt;Gate&lt;/em&gt;&lt;/a&gt;
&lt;/span&gt;

&lt;a class=&quot;details&quot; href=&quot;/bibliography/KQ2015.html&quot;&gt;more&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[Kra2015b]&lt;/strong&gt; &lt;span id=&quot;Kra2015b&quot;&gt;Kratzke, N. (2015). About Microservices, Containers and their Underestimated Impact on Network Performance. In &lt;i&gt;Proceedings of CLOUD COMPUTING 2015 (6th. International Conference on Cloud Computing, GRIDS and Virtualization)&lt;/i&gt; (pp. 165–169).&lt;/span&gt;

&lt;span class=&quot;researchgate&quot;&gt;
    &lt;a href='https://www.researchgate.net/publication/273456042'&gt;Research&lt;em&gt;Gate&lt;/em&gt;&lt;/a&gt;
&lt;/span&gt;

&lt;a class=&quot;details&quot; href=&quot;/bibliography/Kra2015b.html&quot;&gt;more&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[Kra2014d]&lt;/strong&gt; &lt;span id=&quot;Kra2014d&quot;&gt;Kratzke, N. (2014). CloudTRANSIT - Sichere, plattformunabhängige und transferierbare IT-Services mittels einer generischen Cloud Service Description Language. &lt;i&gt;Impulse - Aus Forschung Und Lehre Der FH Lübeck&lt;/i&gt;, &lt;i&gt;18&lt;/i&gt;(1).&lt;/span&gt;

&lt;a class=&quot;details&quot; href=&quot;/bibliography/Kra2014d.html&quot;&gt;more&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[Kra2014a]&lt;/strong&gt; &lt;span id=&quot;Kra2014a&quot;&gt;Kratzke, N. (2014). Lightweight Virtualization Cluster - Howto overcome Cloud Vendor Lock-in. &lt;i&gt;Journal of Computer and Communication (JCC)&lt;/i&gt;, &lt;i&gt;2&lt;/i&gt;(12). http://doi.org/10.4236/jcc.2014.212001&lt;/span&gt;

&lt;span class=&quot;researchgate&quot;&gt;
    &lt;a href='https://www.researchgate.net/publication/265416477'&gt;Research&lt;em&gt;Gate&lt;/em&gt;&lt;/a&gt;
&lt;/span&gt;

&lt;a class=&quot;details&quot; href=&quot;/bibliography/Kra2014a.html&quot;&gt;more&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[Kra2014b]&lt;/strong&gt; &lt;span id=&quot;Kra2014b&quot;&gt;Kratzke, N. (2014). A Lightweight Virtualization Cluster Reference Architecture Derived from Open Source PaaS Platforms. &lt;i&gt;Open Journal of Mobile Computing and Cloud Computing (MCCC)&lt;/i&gt;, &lt;i&gt;1&lt;/i&gt;(2), 17–30.&lt;/span&gt;

&lt;span class=&quot;researchgate&quot;&gt;
    &lt;a href='https://www.researchgate.net/publication/265416428'&gt;Research&lt;em&gt;Gate&lt;/em&gt;&lt;/a&gt;
&lt;/span&gt;

&lt;a class=&quot;details&quot; href=&quot;/bibliography/Kra2014b.html&quot;&gt;more&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;

&lt;div class=&quot;funded&quot;&gt;
&lt;div&gt;
&lt;p&gt;
Research project Cloud TRANSIT (03FH021PX4) is funded by German
&lt;a href=&quot;http://www.bmbf.de/en/index.php&quot;&gt;Federal Ministry of Education and Research&lt;/a&gt;
according to the regulatories of the
&lt;a href=&quot;http://www.bmbf.de/de/1952.php&quot;&gt;FHprofUnt 2014&lt;/a&gt; framework.
&lt;/p&gt;
&lt;center&gt;
&lt;img src=&quot;/img/posts/bmbf.png&quot; style=&quot;padding-right:20px&quot;&gt;
&lt;img src=&quot;/img/posts/profunt_logo.jpg&quot; height=&quot;75px&quot; style=&quot;padding-right:20px&quot;&gt;
&lt;/center&gt;
&lt;/div&gt;

&lt;p&gt;&lt;center&gt;
&lt;hr&gt;
&lt;p&gt;
Following companies are supporting us:
&lt;/p&gt;
&lt;a href=&quot;http://www.fat-itsolutions.de/&quot;&gt;
  &lt;img src=&quot;/img/posts/fat-it-solutions.png&quot; height=&quot;30px&quot;&gt;
&lt;/a&gt;
&lt;/center&gt;
&lt;/div&gt;&lt;/p&gt;

      </description>
      <pubDate>Wed, 25 Jun 2014 00:00:00 +0200</pubDate>
      <link>http://www.nkode.io//research/project/2014/06/25/project-cloud-transit.html</link>
      <guid isPermaLink="true">http://www.nkode.io//research/project/2014/06/25/project-cloud-transit.html</guid>
    </item>
    
    <item>
      <title>Research Assistant (Cloud Computing)</title>
      <description>
        
        &lt;img src=&quot;/img/posts/cloud.jpg&quot;&gt;
        
        &lt;p&gt;&lt;small&gt;(Image: incredibleguy / flickr.com, Lizenz: CC-BY)&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;
&lt;strong&gt;Remark:&lt;/strong&gt; &lt;em&gt;This translation is just for convenience for non german speaking candidates.
Only the official &lt;a href=&quot;http://www.fh-luebeck.de/Inhalt/05_Presse_und_BesucherInnen_Ch051/30_Jobs/8_521-wissensch-MA-CoSA.pdf&quot;&gt;job advertisement&lt;/a&gt; fulfills necessary regulatory framework.
You may also want to check the job posting on &lt;a href=&quot;https://www.academics.de/jobs/wissenschaftliche_r_mitarbeiter_in_102714.html&quot;&gt;academics.de&lt;/a&gt;.&lt;/em&gt;
&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;&lt;a href=&quot;http://www.fh-luebeck.de/Content/index.html&quot;&gt;Lübeck University of Applied Sciences&lt;/a&gt; is one the best third-party funded
Universities of Applied Sciences in Germany and with over 4.300 students
in four departments and over 26 study programmes biggest higher education institution
in Lübeck. For a new research project conducted by the &lt;a href=&quot;http://cosa.fh-luebeck.de/en/news&quot;&gt;Center of Excellence CoSA&lt;/a&gt;
at the Department for Electrical Engineering and Computer Science we seek a
&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;Research Assistant &lt;small&gt;Cloud Computing&lt;/small&gt;&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Application ID (Kennziffer): &lt;a href=&quot;http://www.fh-luebeck.de/Inhalt/05_Presse_und_BesucherInnen_Ch051/30_Jobs/8_521-wissensch-MA-CoSA.pdf&quot;&gt;8.521&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;We offer a temporary work contract starting on 1st September 2014 ending on 31 August 2017.&lt;/p&gt;

&lt;p&gt;Your duties will include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Contribute to definition, procurement, installation and operation of a private cloud infrastructure for research purposes&lt;/li&gt;
&lt;li&gt;Contribute to research projects&lt;/li&gt;
&lt;li&gt;Develop software for secure and transferable cloud services&lt;/li&gt;
&lt;li&gt;Present research results on international conferences and in scientific journals&lt;/li&gt;
&lt;li&gt;Maintain contact and coordinate with cooperating partners&lt;/li&gt;
&lt;li&gt;Support students in doing project or thesis work as well as to support teaching activities for courses like webtechnologies or cloud computing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;To do a doctorate (PhD) is feasible and welcomed.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Condition of employment is a diploma or masters degree preferably in computer science
and interest in doing scientific work.
Substantial knowledge of distributed systems or cloud computing (IaaS, PaaS)
is desirable.
Very good command of English is assumed.
This job advertisement addresses especially diploma or master graduates.&lt;/p&gt;

&lt;p&gt;For any further questions do not hesitate to contact
&lt;a href=&quot;http://cosa.fh-luebeck.de/en/contact/people/kratzke&quot;&gt;Prof. Dr. Nane Kratzke&lt;/a&gt; (nane.kratzke@fh-luebeck.de).&lt;/p&gt;

&lt;p&gt;Please send your written application by mail at the following address
until &lt;strong&gt;18th July 2014&lt;/strong&gt;. Do not forget to mention the
application id (Kennziffer). We can only consider applications with complete
documents.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Address:&lt;/strong&gt; &lt;br&gt;
&lt;small&gt;
Fachhochschule Lübeck&lt;br&gt;
Abteilung I Personal&lt;br&gt;
&lt;strong&gt;Kennziffer 8.521&lt;/strong&gt;&lt;br&gt;
Mönkhofer Weg 239&lt;br&gt;
23562 Lübeck&lt;br&gt;
Germany
&lt;/small&gt;&lt;/p&gt;

&lt;div class=&quot;funded&quot;&gt;
&lt;p&gt;
Corresponding research project is funded by German
&lt;a href=&quot;http://www.bmbf.de/en/index.php&quot;&gt;Federal Ministry of Education and Research&lt;/a&gt;
according to the regulatories of the
&lt;a href=&quot;http://www.bmbf.de/de/1952.php&quot;&gt;FHprofUnt 2014&lt;/a&gt; framework.
&lt;/p&gt;
&lt;img src=&quot;/img/posts/bmbf.png&quot;&gt;
&lt;/div&gt;

      </description>
      <pubDate>Wed, 25 Jun 2014 00:00:00 +0200</pubDate>
      <link>http://www.nkode.io//2014/06/25/job-posting-cloud-transit.html</link>
      <guid isPermaLink="true">http://www.nkode.io//2014/06/25/job-posting-cloud-transit.html</guid>
    </item>
    
    <item>
      <title>Action Item Ontology</title>
      <description>
        
        &lt;img src=&quot;/img/posts/todo.jpg&quot;&gt;
        
        &lt;p&gt;Ziel dieser Bachelorarbeit ist es, ein semantisches Modell für eine &lt;a href=&quot;https://de.wikipedia.org/wiki/Semantisches_Web&quot;&gt;Semantic Web&lt;/a&gt; Applikation für Maßnahmen (&lt;em&gt;Action Items&lt;/em&gt;) zu entwerfen, dass es ermöglicht&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Action Items&lt;/em&gt; aus anderen Systemen zu importieren&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Action Items&lt;/em&gt; in einer &lt;a href=&quot;https://de.wikipedia.org/wiki/Semantisches_Web&quot;&gt;Semantic Web&lt;/a&gt; konformen Datenbank zu speichern&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Action Items&lt;/em&gt; mittels Semantic Web konformen Abfragesprachen (bspw. &lt;a href=&quot;https://de.wikipedia.org/wiki/SPARQL&quot;&gt;SPARQL&lt;/a&gt;) zu analysieren&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Action Items&lt;/em&gt; anderen Systemen bereitzustellen&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Für diesen Datenaustausch soll eine geeignete Ontologie entwickelt werden, die es ermöglicht beliebig attributierte &lt;em&gt;Action Items&lt;/em&gt; aus anderen Systemen ausdrücken zu können.&lt;/p&gt;

&lt;p&gt;Hierzu müssen im Detail folgende Teilaufgaben bearbeitet werden:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Anforderungsanalyse&lt;/strong&gt; an repräsentativen Systemen die Action Items verwalten&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Modellierung&lt;/em&gt; einer Ontologie für &lt;em&gt;Action Items&lt;/em&gt; unter Berücksichtigung oben genannter Datenaustauscherfordernisse&lt;/li&gt;
&lt;li&gt;Entwicklung einer &lt;strong&gt;Architektur&lt;/strong&gt; für ein &lt;a href=&quot;https://de.wikipedia.org/wiki/Semantisches_Web&quot;&gt;Semantic Web&lt;/a&gt; basiertes &lt;em&gt;Action Item&lt;/em&gt; Applikation, die oben beschriebene Fähigkeiten aufweist.&lt;/li&gt;
&lt;li&gt;Entwicklung einer geeigneten &lt;strong&gt;Evaluations- und Nachweisstrategie (QS)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Vergleichende Betrachtung und Auswahl&lt;/strong&gt; geeigneter &lt;a href=&quot;https://de.wikipedia.org/wiki/Semantisches_Web&quot;&gt;Semantic Web&lt;/a&gt; konformer Datenformate und Datenbanken zur Ontologiemodellierung und Datenspeicherung&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Implementierung&lt;/strong&gt; inkl. Test/Nachweis der Action Item Applikation&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Begleitende Dokumentation&lt;/strong&gt; der oben angegebenen Schritte, Designentscheidungen und Ergebnisse (Bachelorarbeit)&lt;/li&gt;
&lt;/ul&gt;

      </description>
      <pubDate>Mon, 19 May 2014 00:00:00 +0200</pubDate>
      <link>http://www.nkode.io//thesis/2014/05/19/thesis-action-item-ontology.html</link>
      <guid isPermaLink="true">http://www.nkode.io//thesis/2014/05/19/thesis-action-item-ontology.html</guid>
    </item>
    
    <item>
      <title>Analysis of Legacy Code (Analyse von Legacy Code)</title>
      <description>
        
        &lt;img src=&quot;/img/posts/java-code.jpg&quot;&gt;
        
        &lt;p&gt;Unter &lt;em&gt;Legacy Code&lt;/em&gt; wird (neben anderen Definitionen) Code verstanden, der sich durch unerwünschte (jedoch in Praxis häufig anzutreffende) Eigenschaften auszeichnet: wenige bis keine Tests, kaum dokumentiert, nicht nachvollziehbar strukturiert, hohe Komplexität, schwer verständlich.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Legacy Code&lt;/em&gt; in diesem Verständnis ist dabei nicht auf Altsysteme (Legacy Systeme) beschränkt, sondern kann dabei in allen Bereichen des Software-Engineerings auftreten, z.B. in alten Anwendungen des Finanzsektors, in modernen ERP Systemen oder auch in allen Formen von Open Source Software.&lt;/p&gt;

&lt;p&gt;Trotz dieses relativ bekannten Phänomens wird die Softwarepflege und Änderung/Erweiterung von &lt;em&gt;Legacy Code&lt;/em&gt; allerdings recht selten betrachtet. Viele Werkzeuge und Analysetechniken zielen eher auf lehrbuchartigen (Non-Legacy) Code ab und offenbaren bei der Arbeit mit &lt;em&gt;Legacy Code&lt;/em&gt; schnell Grenzen ihrer Praktikabilität.&lt;/p&gt;

&lt;p&gt;Ziel vorliegender Bachelorarbeit ist es, bestehende Analyseansätze und Softwaremetriken kritisch zu beleuchten, um Grenzen der Praktikabilität bei &lt;em&gt;Legacy Code&lt;/em&gt; an praktischen Fallbeispielen aufzuzeigen. Dabei soll die Analyse besonderes Augenmerk darauf legen, wie sich Entwickler auch in Legacy Code Basen hoher Komplexität deutlich besser zurecht finden bzw. Problemstellen schnell identifizieren könnten. Die Arbeit soll sich dabei auf frei verfügbare Open Source Software und eine Programmiersprache freier Wahl beschränken. Die Wahl der Programmiersprache ist zu einem frühen Zeitpunkt der Arbeit geeignet zu begründen. Kommerzielle Produkte können ggf. in der Analyse berücksichtigt werden, sollen jedoch nicht für die Lösung herangezogen werden.&lt;/p&gt;

&lt;p&gt;Hierzu sind im Detail folgende Teilaufgaben zu bearbeiten und zu dokumentieren:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Analyse&lt;/strong&gt; bestehender und frei verfügbarer &lt;strong&gt;Metriken und Analyseverfahren&lt;/strong&gt; für Open Source Software mit &lt;em&gt;Legacy Software&lt;/em&gt; Charakter.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Aufzeigen der Grenzen&lt;/strong&gt; dieser Metriken und Analyseverfahren vor dem Hintergrund häufig anzutreffender praktischer Erfordernisse und Gegebenheiten.&lt;/li&gt;
&lt;li&gt;Geeignete &lt;strong&gt;Metriken und Analyseverfahren für &lt;em&gt;Legacy Code&lt;/em&gt; ableiten&lt;/strong&gt; bzw. (sofern nicht vorhanden) vorschlagen.&lt;/li&gt;
&lt;li&gt;Darauf aufbauend mögliche &lt;strong&gt;Visualisierungskonzepte&lt;/strong&gt; für Code Basen mit Legacy Charakter entwickeln.&lt;/li&gt;
&lt;li&gt;Es soll eine &lt;strong&gt;Architektur&lt;/strong&gt; für ein Werkzeug entstehen und &lt;strong&gt;prototypisch implementiert&lt;/strong&gt; werden, dass es erlaubt Code auf seine Komplexität zu analysieren und die Ergebnisse in geeigneter Weise dem Entwickler zu visualisieren oder auf andere Art geeignet zur Verfügung zu stellen.&lt;/li&gt;
&lt;li&gt;Die &lt;strong&gt;Funktionstüchtigkeit&lt;/strong&gt; des Analysewerkzeugs ist für einen Prototypen geeignet nachzuweisen.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Analysewerkzeug&lt;/strong&gt; soll ferner stichprobenartig an mehreren großen frei verfügbaren Open Source Codebasen (bspw. gehostet von &lt;a href=&quot;https://github.com/&quot;&gt;Github&lt;/a&gt;) &lt;strong&gt;evaluiert&lt;/strong&gt; werden, entsprechende Erkenntnisse sind geeignet aufzubereiten.&lt;/li&gt;
&lt;/ul&gt;

      </description>
      <pubDate>Wed, 19 Mar 2014 00:00:00 +0100</pubDate>
      <link>http://www.nkode.io//thesis/2014/03/19/thesis-analyse-von-legacy-software.html</link>
      <guid isPermaLink="true">http://www.nkode.io//thesis/2014/03/19/thesis-analyse-von-legacy-software.html</guid>
    </item>
    
    <item>
      <title>Analysis of Mouse Data (Analyse von Mausdaten)</title>
      <description>
        
        &lt;img src=&quot;/img/posts/mouse.jpg&quot;&gt;
        
        &lt;p&gt;Um eine möglichst hohe Interaktionsrate für eine Webseite zu erreichen, ist es notwendig diese zielgruppengerecht zu gestalten. Allein die besuchten Seiten und das Endergebnis durch Analysetools aufzuzeichnen reicht für die Optimierung einer Webseite meistens nicht.&lt;/p&gt;

&lt;p&gt;Im Rahmen dieser Bachelorarbeit soll ein Trackingscript entwickelt werden, welches Maus-Daten (Klick, Aufenthaltsbereiche des Mauszeigers, ggf. Bewegungsdaten und Aufenthaltsdauern des Mauszeigers) eines Benutzers registriert. Diese Daten sollen in einer Datenbank gespeichert und in einer webbasierten Anwendung geeignet visualisiert werden.&lt;/p&gt;

&lt;p&gt;Die Daten sollen in der webbasierten Anwendung nach geeigneten Kriterien (Gegenstand der Anforderungsanalyse) sortiert und dargestellt werden können, um eine Analyse der Seite zu ermöglichen.&lt;/p&gt;

&lt;p&gt;Hierzu müssen im Detail folgende Teilaufgaben bearbeitet werden:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Analyse geeigneter &lt;strong&gt;Visualisierungsmethoden&lt;/strong&gt; zur Darstellung von oben angegebenen Mausdaten&lt;/li&gt;
&lt;li&gt;Entwicklung und Dokumentation von &lt;strong&gt;Anforderungen&lt;/strong&gt; für die beschriebene Anwendung&lt;/li&gt;
&lt;li&gt;Entwicklung und Dokumentation einer &lt;strong&gt;webbasierten Architektur&lt;/strong&gt; für die beschriebene Anwendung&lt;/li&gt;
&lt;li&gt;Entwicklung und Dokumentation einer geeigneten &lt;strong&gt;Test- und Nachweisstrategie&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Gestaltung eines funktionalen, zielgruppengerechten und ansprechenden &lt;strong&gt;User-Interfaces zur Analyse&lt;/strong&gt; der Daten&lt;/li&gt;
&lt;li&gt;Implementierung und Dokumentation der &lt;strong&gt;webbasierten Anwendung&lt;/strong&gt;. Die Anwendung soll dabei &lt;strong&gt;in einer &amp;quot;self-contained&amp;quot; Form&lt;/strong&gt; bspw. mittels eines &lt;a href=&quot;https://www.docker.io/&quot;&gt;Docker&lt;/a&gt; Skripts (bevorzugt) definiert werden und aus diesem Skript ausgeprägt werden können.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Test und Evaluierung&lt;/strong&gt; der Anwendung sowie Dokumentation der Test- und Evaluierungsergebnisse&lt;/li&gt;
&lt;li&gt;Nachvollziehbare &lt;strong&gt;Dokumentation&lt;/strong&gt; der oben angegebenen Schritte, Designentscheidungen und Ergebnisse (BA Dokument)&lt;/li&gt;
&lt;/ul&gt;

      </description>
      <pubDate>Thu, 06 Mar 2014 00:00:00 +0100</pubDate>
      <link>http://www.nkode.io//thesis/2014/03/06/thesis-mouse-daten.html</link>
      <guid isPermaLink="true">http://www.nkode.io//thesis/2014/03/06/thesis-mouse-daten.html</guid>
    </item>
    
    <item>
      <title>Dart meets Docker (how to dockerize dart apps)</title>
      <description>
        
        &lt;img src=&quot;/img/posts/containerdart-teaser.png&quot;&gt;
        
        &lt;p&gt;&lt;a href=&quot;https://www.docker.io&quot;&gt;Docker&lt;/a&gt; is an open-source engine that automates the deployment of applications as portable and self-sufficient containers that will run virtually anywhere. Dockerized applications reduce configuration efforts and obstacles for administrators. Applications can be provided in a configured, self-sufficient and frictionless way.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.dartlang.org&quot;&gt;Dart&lt;/a&gt; is a web programming language mainly developed by Google with the intention to provide an alternative to JavaScript (the actual de facto standard in web client side programming). Nevertheless Dart can be used to develop server side programs (see &lt;a href=&quot;/2014/02/28/dart-part-II.html&quot;&gt;Tour de Dart Part II&lt;/a&gt; for more details concerning server side programming with Dart).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.dartlang.org&quot;&gt;Dart&lt;/a&gt; and &lt;a href=&quot;https://www.docker.io&quot;&gt;Docker&lt;/a&gt; are a great fit to provide frictionless deployable Dart apps. All you have to do is to supply an additional &lt;em&gt;Dockerfile&lt;/em&gt; to an existing Dart package. This post show how to do this.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/nkratzke/containerdart&quot;&gt;Containerdart&lt;/a&gt; is a very simple &lt;a href=&quot;https://www.dartlang.org&quot;&gt;Dart&lt;/a&gt; HTTP server using the &lt;a href=&quot;http://www.sinatrarb.com/&quot;&gt;Sinatra&lt;/a&gt; inspired web framework &lt;a href=&quot;https://github.com/lvivski/start&quot;&gt;Start&lt;/a&gt; to provide static content.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;package:start/start.dart&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;host:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;0.0.0.0&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;port:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8080&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Server&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;../build/web&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/nkratzke/containerdart&quot;&gt;Containerdart&lt;/a&gt; is provided via &lt;a href=&quot;https://github.com/nkratzke/containerdart&quot;&gt;github&lt;/a&gt; as a general blueprint how Dart applications can be seamlessly dockerized.&lt;/p&gt;

&lt;p&gt;In the next steps you will learn&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;how to install dockerized Dart applications from Github by installing Containerdart as a simple example&lt;/li&gt;
&lt;li&gt;and how Containerdart has been dockerized using an additonal &lt;em&gt;Dockerfile&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Install Containerdart using Docker&lt;/h3&gt;

&lt;p&gt;All you need is a system where docker is installed on. You can install docker following the &lt;a href=&quot;https://www.docker.io/gettingstarted/&quot;&gt;install instructions&lt;/a&gt; provided by &lt;a href=&quot;https://www.docker.io&quot;&gt;Docker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Dockerized applications hosted on Github can be installed by docker with one command. We take &lt;a href=&quot;https://github.com/nkratzke/containerdart&quot;&gt;Containerdart&lt;/a&gt; as an example.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker build -t containerdart github.com/nkratzke/containerdart&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Docker downloads specified repository from github and processes a &lt;em&gt;Dockerfile&lt;/em&gt; in it to create an image from it. If image creation is completed you can instantiate a &lt;em&gt;container&lt;/em&gt; from this image with the following command.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker run -p 8888:8080 -d containerdart&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Last command starts the container as a daemon and binds the container internal port 8080 to the host port 8888 (it is also possible to map the exposed container port 8080 to any other port number, e.g. 80). The container provided webserver should be accessible on &lt;a href=&quot;http://localhost:8888&quot;&gt;http://localhost:8888&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can run&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker ps&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;to see that a container containing our simple Dart based HTTP server is running.&lt;/p&gt;

&lt;p&gt;If it is working you should see this webpage.&lt;/p&gt;

&lt;p&gt;&lt;center class=&quot;hidden-xs&quot;&gt;
&lt;img src=&quot;/img/posts/containerdart.png&quot; width=&quot;75%&quot; class=&quot;photo&quot; /&gt;
&lt;/center&gt;
&lt;img src=&quot;/img/posts/containerdart.png&quot; width=&quot;100%&quot; class=&quot;photo visible-xs&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;How is it working&lt;/h3&gt;

&lt;p&gt;It is recommended to inspect the git repository of &lt;a href=&quot;https://github.com/nkratzke/containerdart&quot;&gt;Containerdart&lt;/a&gt; on github. You will see it is a normal Dart package except one additional file called &lt;em&gt;Dockerfile&lt;/em&gt;. Docker uses dockerfiles to automate image generation. It is a great and simple format to define deployments.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Install a dart container for demonstration purposes.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Your dart server app will be accessible via HTTP on container port 8080.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# You should adapt this Dockerfile to your needs.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# If you are new to Dockerfiles please read&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# http://docs.docker.io/en/latest/reference/builder/&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# to learn more about Dockerfiles.&lt;/span&gt;

FROM stackbrew/ubuntu:13.10
MAINTAINER Nane Kratzke &amp;lt;nane@nkode.io&amp;gt;

&lt;span class=&quot;c&quot;&gt;# Install Dart SDK. Do not touch this until you know what you are doing.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# We do not install darteditor nor dartium because this is a server container.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# See: http://askubuntu.com/questions/377233/how-to-install-google-dart-in-ubuntu&lt;/span&gt;
RUN apt-get update
RUN apt-get install -y software-properties-common python-software-properties
RUN apt-add-repository ppa:hachre/dart
RUN apt-get -y update
RUN apt-get install -y dartsdk

&lt;span class=&quot;c&quot;&gt;# Install the dart server app. Add additional directories if necessary for your app.&lt;/span&gt;
ADD pubspec.yaml /container/pubspec.yaml
ADD bin          /container/bin
ADD web          /container/web

&lt;span class=&quot;c&quot;&gt;# Build the app. Do not touch this.&lt;/span&gt;
WORKDIR /container
RUN pub build

&lt;span class=&quot;c&quot;&gt;# Expose port 8080. You should change it to the port(s) your app is serving on.&lt;/span&gt;
EXPOSE 8080

&lt;span class=&quot;c&quot;&gt;# Entrypoint.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Whenever the container is started the following command is executed in your container.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# In most cases it simply starts your app.&lt;/span&gt;
WORKDIR /container/bin
ENTRYPOINT &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;dart&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Change this to your starting dart.&lt;/span&gt;
CMD &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;httpserver.dart&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This file explains docker what to do when&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker build -t containerdart github.com/nkratzke/containerdart&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;is called. So the above shown &lt;em&gt;Dockerfile&lt;/em&gt; extends&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a barebone Ubuntu 13.10 system,&lt;/li&gt;
&lt;li&gt;installs additionally Dart SDK,&lt;/li&gt;
&lt;li&gt;copies the application files into the container (bin and web directory),&lt;/li&gt;
&lt;li&gt;starts the build process on the system,&lt;/li&gt;
&lt;li&gt;defines an entrypoint (which is being called when the container is started by docker).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It can be easily adapted to other Dart apps. Just clone the &lt;a href=&quot;https://github.com/nkratzke/containerdart&quot;&gt;Containerdart&lt;/a&gt; repository and adapt it to your needs.&lt;/p&gt;

&lt;h3&gt;A slightly more complex example (Dartchat)&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/nkratzke/dartchat&quot;&gt;Dartchat&lt;/a&gt; is another server side Dart app providing a simple websocket based chat server. It is available via &lt;a href=&quot;https://github.com/nkratzke/dartchat&quot;&gt;github&lt;/a&gt; or &lt;a href=&quot;http://pub.dartlang.org/packages/dartchat&quot;&gt;pub.dartlang.org&lt;/a&gt;. &lt;a href=&quot;https://github.com/nkratzke/dartchat&quot;&gt;Dartchat&lt;/a&gt; is an example of second part of the &lt;a href=&quot;/2014/02/28/dart-part-II.html&quot;&gt;Tour de Dart&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can install it using docker&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker build -t dartchat github.com/nkratzke/dartchat&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and run it like this&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker run -p 8080:3000 -d dartchat&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Accessing &lt;a href=&quot;http://localhost:8080&quot;&gt;http://localhost:8080&lt;/a&gt; will provide you following webpage:&lt;/p&gt;

&lt;p&gt;&lt;center class=&quot;hidden-xs&quot;&gt;
&lt;img src=&quot;/img/posts/dartchat.png&quot; width=&quot;75%&quot; class=&quot;photo&quot; /&gt;
&lt;/center&gt;
&lt;img src=&quot;/img/posts/dartchat.png&quot; width=&quot;100%&quot; class=&quot;photo visible-xs&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The responsible &lt;em&gt;Dockerfile&lt;/em&gt; of Dartchat looks like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Install a dartchat as a docker container.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Dartchat will be exposed via HTTP on port 3000.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# This file is hosted on github. Therefore you can start it in docker like this:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# &amp;gt; docker build -t dartchat github.com/nkratzke/dartchat&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# &amp;gt; docker run -p 8080:3000 -d dartchat&lt;/span&gt;

FROM stackbrew/ubuntu:13.10
MAINTAINER Nane Kratzke &amp;lt;nane@nkode.io&amp;gt;

&lt;span class=&quot;c&quot;&gt;# Install Dart SDK. Do not touch this until you know what you are doing.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# We do not install darteditor nor dartium because this is a server container.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# See: http://askubuntu.com/questions/377233/how-to-install-google-dart-in-ubuntu&lt;/span&gt;
RUN apt-get update
RUN apt-get install -y software-properties-common python-software-properties
RUN apt-add-repository ppa:hachre/dart
RUN apt-get -y update
RUN apt-get install -y dartsdk

&lt;span class=&quot;c&quot;&gt;# Install the dart server app.&lt;/span&gt;
ADD pubspec.yaml /container/pubspec.yaml
ADD lib          /container/lib
ADD bin          /container/bin
ADD web          /container/web

&lt;span class=&quot;c&quot;&gt;# Build the app. Do not touch this.&lt;/span&gt;
WORKDIR /container
RUN pub build

&lt;span class=&quot;c&quot;&gt;# Expose port 3000.&lt;/span&gt;
EXPOSE 3000

&lt;span class=&quot;c&quot;&gt;# Entrypoint.&lt;/span&gt;
WORKDIR /container/bin
ENTRYPOINT &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;dart&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Change this to your starting dart.&lt;/span&gt;
CMD &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;chartserver.dart&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3&gt;Closing remarks regarding docker (on non linux systems)&lt;/h3&gt;

&lt;p&gt;If docker is used on a non linux system like Mac OS X it is likely that docker uses &lt;a href=&quot;https://www.virtualbox.org/&quot;&gt;VirtualBox&lt;/a&gt; under the hood. In theses cases you must configure port forwarding in virtual box. So if you are exposing port 8080 in your docker container mapping it to port 8888 for the outside world you must forward host port 8888 to docker-vm port 8888 in virtualbox. How to do this is explained &lt;a href=&quot;http://www.virtualbox.org/manual/ch06.html#natforward&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

      </description>
      <pubDate>Wed, 05 Mar 2014 15:12:00 +0100</pubDate>
      <link>http://www.nkode.io//2014/03/05/dockerize-dart.html</link>
      <guid isPermaLink="true">http://www.nkode.io//2014/03/05/dockerize-dart.html</guid>
    </item>
    
    <item>
      <title>Extension of PumpScanner with an interface for Bluetooth communications with the PSCommunicator</title>
      <description>
        
        &lt;p&gt;The Android App PumpScanner by &lt;a href=&quot;http://www.lorentz.de&quot;&gt;Lorentz GmbH &amp;amp; Co. KG&lt;/a&gt; is able to communicate with the Lorentz DataModule using the smartphone’s Bluetooth module. The DataModule is placed directly on the pump and measures and stores actual data and pump settings.&lt;/p&gt;

&lt;p&gt;Additionally the customers are offered a product named PSCommunicator. This device has a Bluetooth module and a GSM module and acts like a transmitter to forward the actual data and the settings to the Lorentz server. On the server, the customers can log in and check and control their pumps. Right now, PumpScanner can only be used to communicate with pumps.&lt;/p&gt;

&lt;p&gt;The PumpScanner App has to be extended with features to supply communication with the PSCommunicator.&lt;/p&gt;

&lt;p&gt;In detail the following tasks have to be performed:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;analyze PumpScanner to add a navigation for the PSCommunicator, use existing PumpScanner parts like the Bluetooth interface and the database&lt;/li&gt;
&lt;li&gt;develop a specification sheet based on given requirements&lt;/li&gt;
&lt;li&gt;define all necessary messages based on the Lorentz Protocol&lt;/li&gt;
&lt;li&gt;display actual values like solar voltage, battery state, GSM network state, Bluetooth environment&lt;/li&gt;
&lt;li&gt;display and change settings like APN-string, whitelist/blacklist for surrounding pumps, sample rate&lt;/li&gt;
&lt;li&gt;develop a test routine for the final production test at the factory&lt;/li&gt;
&lt;li&gt;develop a setup routine for the installation at the customers site using directional antennas&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;PumpScanner is programmed in JAVA using the &lt;a href=&quot;https://developer.android.com/sdk/index.html&quot;&gt;Android Development Toolkit&lt;/a&gt; supplied by Google. All Test devices will be supplied by &lt;a href=&quot;http://www.lorentz.de&quot;&gt;Lorentz&lt;/a&gt;.&lt;/p&gt;

      </description>
      <pubDate>Tue, 04 Mar 2014 10:56:13 +0100</pubDate>
      <link>http://www.nkode.io//thesis/2014/03/04/thesis-pumpscanner.html</link>
      <guid isPermaLink="true">http://www.nkode.io//thesis/2014/03/04/thesis-pumpscanner.html</guid>
    </item>
    
    <item>
      <title>Web Technologies (Summer 2014)</title>
      <description>
        
        &lt;img src=&quot;/img/posts/webtech.jpg&quot;&gt;
        
        &lt;p&gt;The lecture is about common technologies used to build (part) of web information systems. Lecture is held for students
at Lübeck University of Applied Sciences (in german language). Lecture covers following aspects:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;IaaS Cloud Computing&lt;/strong&gt; to host (distributed and scalable) web applications&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;descriptional languages&lt;/strong&gt; like &lt;a href=&quot;http://www.w3.org/html/&quot;&gt;HTML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;presentational languages&lt;/strong&gt; like &lt;a href=&quot;http://www.w3.org/Style/CSS/&quot;&gt;CSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Document Object Model&lt;/strong&gt; (DOM)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;client and server side programming&lt;/strong&gt; with &lt;a href=&quot;https://www.dartlang.org&quot;&gt;Dart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;security aspects&lt;/strong&gt; like &lt;em&gt;HTML/SQL injections&lt;/em&gt; or &lt;em&gt;session hijacking&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Students apply their intensified web programming skills by developing
a small one person, grid based online game like &lt;em&gt;Tetris&lt;/em&gt; or &lt;em&gt;Boulder Dash&lt;/em&gt;.&lt;/p&gt;

&lt;h3&gt;Course Material (german only)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Crash course: &lt;a href=&quot;/assets/ss2014/webtech/cloud.pdf&quot;&gt;IaaS Cloud Computing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;HTML Units: &lt;a href=&quot;/assets/ss2014/webtech/html_css.pdf&quot;&gt;HTML and CSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Dart Units: &lt;a href=&quot;/assets/ss2014/webtech/dart1.pdf&quot;&gt;Part 1&lt;/a&gt;, &lt;a href=&quot;/assets/ss2014/webtech/dart2.pdf&quot;&gt;Part 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Exercises: &lt;a href=&quot;/assets/ss2014/webtech/ex1.pdf&quot;&gt;Excercise 1&lt;/a&gt;, &lt;a href=&quot;/assets/ss2014/webtech/ex2.pdf&quot;&gt;Excercise 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;funded&quot;&gt;
&lt;center&gt;
&lt;p&gt;
Course is supported by educational grants from:
&lt;/p&gt;
&lt;a href=&quot;https://aws.amazon.com/&quot;&gt;
  &lt;img src=&quot;/img/posts/amazon-web-services.png&quot; height=&quot;50px&quot;&gt;
&lt;/a&gt;
&lt;/center&gt;
&lt;/div&gt;

      </description>
      <pubDate>Sat, 01 Mar 2014 00:00:00 +0100</pubDate>
      <link>http://www.nkode.io//lecture/2014/03/01/lecture-webtech.html</link>
      <guid isPermaLink="true">http://www.nkode.io//lecture/2014/03/01/lecture-webtech.html</guid>
    </item>
    
    <item>
      <title>Tour de Dart (Part II)</title>
      <description>
        
        &lt;img src=&quot;/img/posts/dart-tour.png&quot;&gt;
        
        &lt;p&gt;This is the second part of the Tour de Dart (german). &lt;a href=&quot;/2014/02/13/dart-part-I.html&quot;&gt;Part I&lt;/a&gt; focused the language &lt;a href=&quot;https://www.dartlang.org/&quot;&gt;Dart&lt;/a&gt; itself and had a look at
&lt;em&gt;the optional type system, data types, functions, operators, object oriented concepts, and generics&lt;/em&gt; of the programming language &lt;a href=&quot;https://www.dartlang.org/&quot;&gt;Dart&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Second part will concentrate on further aspects like library system and package manager pub, asynchronous programming, file I/O, DOM tree programming including selectors and event handling, server and client side programming covering how to develop http servers, client applications and how to use websockets. Also data converting (JSON, Base64) is explained as well as HTML escaping to prevent cross site scripting. Bonus: a simple chat server example to demonstrate websockets. Example is provided via github and pub.dartlang.org for free.&lt;/p&gt;

&lt;p&gt;To get the most out of the second part of survey you should be familiar with at least one programming language, the concepts of object oriented programming and you should have first programming experience with &lt;a href=&quot;https://www.dartlang.org/&quot;&gt;Dart&lt;/a&gt; or you should have studied &lt;a href=&quot;/2014/02/13/dart-part-I.html&quot;&gt;first part&lt;/a&gt; of this survey. Basic knowledge of web programming is helpful but not mandatory.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;iframe src=&quot;http://www.slideshare.net/slideshow/embed_code/31761840&quot;
        width=&quot;600px&quot;
        height=&quot;462px&quot;
        frameborder=&quot;0&quot;
        marginwidth=&quot;0&quot;
        marginheight=&quot;0&quot;
        scrolling=&quot;no&quot;
        style=&quot;border: 1px solid rgba(0, 0, 0, 0.5); max-width: 100%;&quot;&gt;&lt;/iframe&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Second part of the survey will cover following aspects:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Library system of dart including package manager pub&lt;/li&gt;
&lt;li&gt;Asynchronous programming covering futures, streams and isolates&lt;/li&gt;
&lt;li&gt;File I/O covering files and directories&lt;/li&gt;
&lt;li&gt;HTML covering selectors, DOM-Tree access and manipulation as well as event handling&lt;/li&gt;
&lt;li&gt;Server and client side programming covering HttpServer, &lt;a href=&quot;http://www.sinatrarb.com/&quot;&gt;Sinatra&lt;/a&gt; inspired webframework &lt;a href=&quot;https://github.com/lvivski/start&quot;&gt;Start&lt;/a&gt; and websockets&lt;/li&gt;
&lt;li&gt;Data converting covering escaping HTML to prevent cross site scripting, decoding and encoding of JSON, base64 encoding and decoding, hashfunction (CryptoUtils).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For demonstration purposes there has been developed a simple chat server and client. You can access the source code of this example via the following links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/nkratzke/dartchat&quot;&gt;dartchat on github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://pub.dartlang.org/packages/dartchat&quot;&gt;dartchat on pub.dartlang.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
      <pubDate>Fri, 28 Feb 2014 15:12:00 +0100</pubDate>
      <link>http://www.nkode.io//2014/02/28/dart-part-II.html</link>
      <guid isPermaLink="true">http://www.nkode.io//2014/02/28/dart-part-II.html</guid>
    </item>
    
    <item>
      <title>Pragmatic post parameter handling in start</title>
      <description>
        
        &lt;p&gt;&lt;a href=&quot;https://github.com/lvivski/start&quot;&gt;Start&lt;/a&gt; is a &lt;a href=&quot;http://www.sinatrarb.com/&quot;&gt;Sinatra&lt;/a&gt; inspired web framework for &lt;a href=&quot;https://www.dartlang.org/&quot;&gt;Dart&lt;/a&gt;. Up to version 0.2.0 &lt;a href=&quot;https://github.com/lvivski/start&quot;&gt;Start&lt;/a&gt; provided no pragmatic post parameter handling. With &lt;a href=&quot;https://github.com/lvivski/start/issues/49&quot;&gt;issue 49&lt;/a&gt; I proposed a &lt;code&gt;getPostParams&lt;/code&gt; method for the &lt;code&gt;Request&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;That is how my &lt;a href=&quot;https://github.com/lvivski/start/issues/49&quot;&gt;proposal&lt;/a&gt; looked like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * Method to get post parameters from a [Request] object.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getPostParams&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Encoding&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;enc:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UTF8&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Completer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Completer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AsciiDecoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;postParams&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fromIterable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;amp;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kvs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kvs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;=&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;key:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decodeQueryComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;encoding:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;value:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decodeQueryComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;encoding:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;complete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;postParams&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;future&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This proposal has made it to &lt;a href=&quot;https://github.com/lvivski/start&quot;&gt;Start&lt;/a&gt; version 0.2.1 with following &lt;a href=&quot;https://github.com/lvivski/start/commit/8b68217ae8b3674429e883fc64f1a66b6f8dfcc8&quot;&gt;commit&lt;/a&gt;. So with &lt;a href=&quot;https://github.com/lvivski/start&quot;&gt;Start&lt;/a&gt; version 0.2.1 you can do now the following pragmatic form of post request parameter handling.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;package:start/start.dart&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;port:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Server&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;[...]&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/formular&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;postParams&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;first name&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ln&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;last name&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ln&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;[...]&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;https://github.com/lvivski&quot;&gt;Yehor Lvivski&lt;/a&gt; for providing the &lt;a href=&quot;http://www.sinatrarb.com/&quot;&gt;Sinatra&lt;/a&gt; inspired &lt;a href=&quot;https://github.com/lvivski/start&quot;&gt;Start&lt;/a&gt; web framework and for integrating &lt;a href=&quot;https://github.com/lvivski/start/issues/49&quot;&gt;issue 49&lt;/a&gt;. It makes post parameter handling with &lt;a href=&quot;https://github.com/lvivski/start&quot;&gt;Start&lt;/a&gt; more pragmatic.&lt;/p&gt;

&lt;h3&gt;Update&lt;/h3&gt;

&lt;p&gt;Since &lt;a href=&quot;https://github.com/lvivski/start&quot;&gt;Start&lt;/a&gt; version 0.2.2 you should use &lt;code&gt;payload()&lt;/code&gt;. By using &lt;code&gt;payload&lt;/code&gt; you can also handle parameters provided via POST, PUT, DELETE in request body. Above mentioned parameter handling changes to:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;package:start/start.dart&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;port:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Server&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;[...]&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Since version 0.2.2 ALSO put and delete is possible here&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/formular&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
      &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;first name&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ln&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;last name&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ln&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;[...]&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

      </description>
      <pubDate>Tue, 25 Feb 2014 16:39:48 +0100</pubDate>
      <link>http://www.nkode.io//2014/02/25/pragmatic-request-parameter-handling-start.html</link>
      <guid isPermaLink="true">http://www.nkode.io//2014/02/25/pragmatic-request-parameter-handling-start.html</guid>
    </item>
    
    <item>
      <title>Kinect to Touch Control Framework</title>
      <description>
        
        &lt;img src=&quot;/img/posts/kinect.png&quot;&gt;
        
        &lt;p&gt;In Zusammenarbeit mit der &lt;a href=&quot;http://www.sforit.de/&quot;&gt;Solutions For Innovative Technology GmbH&lt;/a&gt; soll die Entwicklung einer Gestensteuerungs-Umgebung erfolgen. Eine Host-Anwendung soll Handbewegungen des Nutzers über eine angeschlossene Microsoft &lt;a href=&quot;http://www.xbox.com/de-DE/Kinect&quot;&gt;Kinect&lt;/a&gt; für Windows erkennen und in Touch-Befehle umwandeln, sodass die Bedienung einer oder mehrerer Client-Applikationen mittels Gestensteuerung möglich wird. Dieses Konzept fügt sich in eine Umgebung mit weiteren Geräten wie Microsoft &lt;a href=&quot;http://www.microsoft.com/en-us/pixelsense/default.aspx&quot;&gt;PixelSense&lt;/a&gt; und Microsoft Surface ein und soll im Zusammenhang mit diesen für Präsentationsflächen z.B. auf Messen verwendet werden.&lt;/p&gt;

&lt;p&gt;Zentraler Aspekt der Aufgabenstellung ist die Entwicklung einer Schnittstelle für die Umwandlung von &lt;a href=&quot;http://www.xbox.com/de-DE/Kinect&quot;&gt;Kinect&lt;/a&gt;-Gesten-Daten in Touch-Daten und deren Übermittlung an verschiedene Touch-fähige Endgeräte. Dabei soll die Möglichkeit bestehen, gleichzeitig an mehrere Geräte zu senden. Außerdem soll die Übertragung nicht an eine bestimmte Darstellung gebunden sein, sondern die Informationen sollen möglichst universell nutzbar sein. Der prototypische Nachweis erfolgt über eine zu entwickelnde Empfänger-Software, die empfangene Daten geeignet umsetzt.&lt;/p&gt;

&lt;p&gt;Hierzu müssen im Detail folgende Teilaufgaben bearbeitet werden:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Anforderungsanalyse&lt;/strong&gt; an eine Kinect to Touch Umsetzung vor dem Hintergrund des oben beschriebenen Anwendungsrahmens&lt;/li&gt;
&lt;li&gt;Entwicklung einer geeigneten &lt;strong&gt;Evaluations- und Nachweisstrategie (QS)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Analyse und Auswahl geeigneter Protokolle und Frameworks&lt;/strong&gt; zur Übertragung von Kinect Steueranweisungen (und deren geeignete Umsetzung für Touch-fähige Endgeräte)&lt;/li&gt;
&lt;li&gt;Entwicklung einer modularen/erweiterbaren &lt;strong&gt;Architektur&lt;/strong&gt; zur Erfassung von Kinect Steueranweisungen und Übertragung dieser an Touch-fähige Endgeräte&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Implementierung&lt;/strong&gt; inkl. Test/Nachweis eines Moduls zur Erfassung, Aufbereitung und Verbreitung von Kinect Positions- und Steuerdaten&lt;/li&gt;
&lt;li&gt;Implementierung inkl. Test/Nachweis eines Moduls zur Umsetzung von übermittelten und aufbereiteten Kinect Positions- und Steuerdaten in Touch-Anweisungen&lt;/li&gt;
&lt;li&gt;Der &lt;strong&gt;prototypische Nachweis&lt;/strong&gt; der Machbarkeit erfolgt mittels einer Anwendung, die ein Verkaufsregal mit verschiedenen Produkten darstellt. Zu jedem Produkt können dann durch &amp;quot;Berühren&amp;quot; mittels Geste weitere Informationen abgerufen werden. Ggf. kann der Nachweis der Machbarkeit an einem anderen Betrachtungsgegenstand vergleichbarer Komplexität erfolgen.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Begleitende Dokumentation&lt;/strong&gt; der oben angegebenen Schritte, Designentscheidungen und Ergebnisse (Bachelorarbeit)&lt;/li&gt;
&lt;/ul&gt;

      </description>
      <pubDate>Fri, 21 Feb 2014 20:37:25 +0100</pubDate>
      <link>http://www.nkode.io//thesis/2014/02/21/thesis-kinect-control.html</link>
      <guid isPermaLink="true">http://www.nkode.io//thesis/2014/02/21/thesis-kinect-control.html</guid>
    </item>
    
    <item>
      <title>Parallel Map for Dart</title>
      <description>
        
        &lt;p&gt;&lt;a href=&quot;https://www.dartlang.org/&quot;&gt;Dart&lt;/a&gt; programs run in a single isolate by default. Although Dart provides
several comfortable asynchronous programming techniques like Futures and Streams Dart
does not use multithreading features of modern processors by default.&lt;/p&gt;

&lt;p&gt;This is a reasonable language design decision mainly due to problematic controllability of
concurrency aspects (&lt;a href=&quot;https://en.wikipedia.org/wiki/Thread_safety&quot;&gt;thread safety&lt;/a&gt;) in programming.&lt;/p&gt;

&lt;p&gt;Let us assume we want to calculate the sum of the fibonacci numbers from 40 to 45
by applying the following function &lt;code&gt;fib&lt;/code&gt; (and of course the fibonacci function is here only a
placeholder for any computational intensive function of the real world)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;we could do this in Dart like that (a very simple example of map/reduce):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;41&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;43&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;44&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;45&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;fib(40) + fib(41) + ... + fib(45) = &amp;quot;&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This would prompt the following result on console.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;fib&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;40&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; + fib&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;41&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; + ... + fib&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;45&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 2805634932&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3&gt; Parallelize map &lt;/h3&gt;

&lt;p&gt;The most computational intensive part of this operation is to apply several times the
fibonacci function &lt;code&gt;fib&lt;/code&gt; using &lt;code&gt;map&lt;/code&gt;. And although &lt;code&gt;map&lt;/code&gt; is perfectly parallelizable in the shown case
Dart would not execute it in parallel due to the fact that every Dart program runs in a single
isolate (even if a Dart program runs on a processor being capable to process
more than one thread in parallel).&lt;/p&gt;

&lt;p&gt;Nevertheless Dart is capable to run several computations in parallel using isolates. Isolates in Dart are isolated threads having no shared access to memory (so they can share no data). Isolates can only pass messages between each other. This rigid concept solves all relevant &lt;a href=&quot;https://en.wikipedia.org/wiki/Thread_safety&quot;&gt;thread safety&lt;/a&gt; problems and that is why you need no &lt;code&gt;synchronized&lt;/code&gt; statement in Dart. Nevertheless spawning isolates capable to communicate with each other is unnecessary tricky in Dart. &lt;a href=&quot;https://github.com/Dreckr&quot;&gt;Diego Rocha&lt;/a&gt; has written a &lt;a href=&quot;http://diegorochablog.wordpress.com/2014/02/18/worker-dart-concurrent-programming-does-not-have-to-be-hard/&quot;&gt;blog post&lt;/a&gt; about this complexity and states:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You have to spawn a new isolate, send it a &lt;code&gt;SendPort&lt;/code&gt; of your current isolate, listen to the &lt;code&gt;ReceivePort&lt;/code&gt; of your current isolate, then make the spawned isolate listen to its &lt;code&gt;ReceivePort&lt;/code&gt;, send messages requesting something and then responding those messages. If you try to run multiple isolates at the same time, it is even more troublesome as you don’t know from which isolate a message is coming from.&lt;/p&gt;
&lt;footer&gt;
  Diego Rocha
&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;h3&gt; Using the worker package to parallelize map &lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Dreckr&quot;&gt;Diego Rocha&lt;/a&gt; proposes to use his &lt;a href=&quot;https://pub.dartlang.org/packages/worker&quot;&gt;Worker&lt;/a&gt; package to overcome the inherent spawning complexity of isolates in Dart. I recommend to read his &lt;a href=&quot;http://diegorochablog.wordpress.com/2014/02/18/worker-dart-concurrent-programming-does-not-have-to-be-hard/&quot;&gt;blog post&lt;/a&gt; to get most out of the following paragraphs.&lt;/p&gt;

&lt;p&gt;By using Rochas Worker package the calculation of our fibonacci sum can be parallelized like that&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;package:worker/worker.dart&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;dart:async&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// We create a worker. A worker is used to assign computational tasks to&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// executing isolates without to worry about Send- and ReceivePorts and&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// all the nitty critty details.&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;worker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Worker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Our problem to compute.&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;41&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;43&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;44&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;45&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// We assign our problem to solve in parallel by using the handle method&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// of the worker.&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;futures&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;worker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FibTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)));&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// And wait until all isolates have calculated their&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// results in parallel and providing it in results&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;futures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&amp;quot;fib(40) + fib(41) + ... + fib(45) = &amp;quot;&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;worker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// We have to define a computational task class to create&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// computational objects which can be transferred by worker&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// to isolates. A computational task encapsulates our&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// computational function (in our case fib) in its #execute method.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FibTask&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FibTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and we will get the same result (but now computed in parallel).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;fib&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;40&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; + fib&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;41&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; + ... + fib&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;45&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 2805634932&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3&gt; Discussion of the worker solution &lt;/h3&gt;

&lt;p&gt;Let us have a look at the above mentioned solution. It works parallel, solves the problem, and
hides most of the spawning complexity of isolates thanks to the great work of &lt;a href=&quot;https://github.com/Dreckr&quot;&gt;Rochas&lt;/a&gt;
&lt;a href=&quot;https://pub.dartlang.org/packages/worker&quot;&gt;Worker package&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Nevertheless the solution is not like pragmatic programmers would prefer to parallelize the given problem.
We had to define another class to execute a function in parallel. OK, Java programmers are used
to create a class for everything but most programmers do not see the necessity for such things.
Me either (but actual it is not possible to do it in another way, but we will come to this later).&lt;/p&gt;

&lt;p&gt;Let us take our initial problem.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;41&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;43&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;44&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;45&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;fib(40) + fib(41) + ... + fib(45) = &amp;quot;&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In fact we want to tell Dart to execute &lt;code&gt;vs.map((n) =&amp;gt; fib(n)&lt;/code&gt;
in parallel. It would be cool, if we could write something like &lt;code&gt;vs.pmap((n) =&amp;gt; fib(n))&lt;/code&gt;
and the method &lt;code&gt;pmap&lt;/code&gt; would do all the parallelization for us because that is in fact
what most programmers want to express.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Lovely programm please process all elements of &lt;code&gt;vs&lt;/code&gt;
in parallel&lt;/em&gt; (and not in sequential order, which is what &lt;code&gt;map&lt;/code&gt; does).&lt;/p&gt;

&lt;p&gt;This is called a &lt;strong&gt;parallel map&lt;/strong&gt; and it works great on iterables. Parallel map &lt;code&gt;pmap&lt;/code&gt; might be typed like that:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Future&amp;lt;Iterable&amp;gt; pmap&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;dynamic f&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;dynamic&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Because &lt;code&gt;pmap&lt;/code&gt; returns a &lt;code&gt;Future&lt;/code&gt; (it is executed asynchronously because it is parallel) of an &lt;code&gt;Iterable&lt;/code&gt; we have to rewrite our
initial problem a little bit.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;41&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;43&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;44&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;45&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;vs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pmap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;fib(40) + fib(41) + ... + fib(45) = &amp;quot;&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;From my point of view this would be the perfect solution for Dart providing a very pragmatic form of parallelization.&lt;/p&gt;

&lt;h3&gt; Why closures are not always cool &lt;/h3&gt;

&lt;p&gt;But this is not possible in Dart. Due to the fact that a closure can reference (and change) a variable state outside its scope it is not allowed to be passed between isolates. If we could we had all problems of &lt;a href=&quot;https://en.wikipedia.org/wiki/Thread_safety&quot;&gt;thread safety&lt;/a&gt; again. So closures are no adequate solution for our problem but what is about &lt;em&gt;wannabe functions&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;Gilad Bracha has written an interesting blog post about &lt;a href=&quot;https://www.dartlang.org/articles/emulating-functions/&quot;&gt;emulating functions in Dart&lt;/a&gt;. According to this article we
are able to implement our fibonacci function as a &lt;em&gt;wannabe function&lt;/em&gt; like that&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FibFunc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and we can instantiate objects of this class being callable like &amp;quot;normal&amp;quot; functions.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fibFunc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FibFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib40&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fibFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;These objects are no closures but behave like functions and they are transferable between isolates. Our solution would change into&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;41&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;43&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;44&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;45&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FibFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;vs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pmap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;fib(40) + fib(41) + ... + fib(45) = &amp;quot;&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;which is very close to our intent.&lt;/p&gt;

&lt;h3&gt;The parallel package&lt;/h3&gt;

&lt;p&gt;Is it possible to build something like that in Dart? Yes. Take a look at the &lt;a href=&quot;http://pub.dartlang.org/packages/parallel&quot;&gt;parallel package&lt;/a&gt; I propose. The parallel package
is in fact only a small wrapper around the worker package. It defines a parallel &lt;code&gt;map&lt;/code&gt; method and delegates all other method calls to &lt;code&gt;Iterable&lt;/code&gt;. So in fact it behaves almost like an iterable but provides the opportunity to launch a parallel map. In fact you can use it almost like a normal iterable.&lt;/p&gt;

&lt;p&gt;Therefore the parallel package defines a function &lt;code&gt;parallel&lt;/code&gt; to transform any &lt;code&gt;Iterable&lt;/code&gt; collection into a &lt;code&gt;PIterable&lt;/code&gt; collection.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span class=&quot;n&quot;&gt;PIterable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parallel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Iterable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PIterable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It furthermore defines a library private &lt;code&gt;MessagableFunction&lt;/code&gt; by extending the &lt;code&gt;Task&lt;/code&gt; concept of the &lt;a href=&quot;https://pub.dartlang.org/packages/worker&quot;&gt;Worker&lt;/a&gt; package (this library private class is in fact the bridge to the worker package).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;_MessageableFunction&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;_MessageableFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;dynamic&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally the &lt;code&gt;PIterable&lt;/code&gt; class is implemented like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PIterable&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Iterable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Wrapped future of an iterable&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Iterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_futureIterable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Constructor&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;PIterable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_futureIterable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Parallel map. [f] has to be a wannabe function.&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;PIterable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;worker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Worker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Completer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Iterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;computations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_futureIterable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iterable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_MessageableFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;computations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;worker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;computations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;worker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;complete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PIterable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;future&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Delegates all methods except #map to [Iterable].&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;dynamic&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;noSuchMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Invocation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Completer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_futureIterable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;completed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reflect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;completed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;complete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;future&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now we have a function &lt;code&gt;parallel&lt;/code&gt; to transform each &lt;code&gt;Iterable&lt;/code&gt;
into a parallelizable &lt;code&gt;PIterable&lt;/code&gt; form. And we have a &lt;code&gt;map&lt;/code&gt; method defined
on &lt;code&gt;PIterable&lt;/code&gt; which can be executed in parallel.&lt;/p&gt;

&lt;p&gt;Due to the fact that &lt;code&gt;PIterable&lt;/code&gt; delegates all unknown method calls via &lt;code&gt;noSuchMethod&lt;/code&gt; to &lt;code&gt;Iterable&lt;/code&gt;
you can combine the parallel &lt;code&gt;map&lt;/code&gt; with all methods known from &lt;code&gt;Iterable&lt;/code&gt; (for example
&lt;code&gt;reduce&lt;/code&gt;).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FibFunc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;41&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;43&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;44&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;45&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parallel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FibFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// parallel&lt;/span&gt;
                          &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// delegated to Iterable&lt;/span&gt;
                          &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                          &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Some closing remarks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Be aware:&lt;/strong&gt; The parallel package has version 0.0.3 and main reason to release it is to foster discussions about pragmatic forms of parallelization in Dart (it is far from being complete or perfect)&lt;/li&gt;
&lt;li&gt;The parallel library is provided via &lt;a href=&quot;http://pub.dartlang.org/packages/parallel&quot;&gt;http://pub.dartlang.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The parallel library is also provided via &lt;a href=&quot;https://github.com/nkratzke/parallel&quot;&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;This post is to foster discussions. So discussions, comments, remarks, opinions, etc. are very welcome.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Special thanks go to Diego Rocha and his awesome &lt;a href=&quot;https://pub.dartlang.org/packages/worker&quot;&gt;Worker&lt;/a&gt; library.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;hr /&gt;&lt;/p&gt;

&lt;h4&gt;My last wish is about syntactic sugar&lt;/h4&gt;

&lt;p&gt;This here goes out to the Dart Language Specialists at Google. If there are thoughts how to improve the programmability of isolates you could think about some syntactic sugar.&lt;/p&gt;

&lt;p&gt;It would be great if Dart had a syntax to create anonymous wannabe functions (not closures) so that&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// the closure form would be (n) =&amp;gt; fib(n)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;would be syntactic sugar for:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;  &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FibFunc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FibFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If Dart would provide that form of syntactic sugar it would be possible to come very close
to a pragmatic form to express parallelization in Dart:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-dart&quot; data-lang=&quot;dart&quot;&gt;  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;41&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;43&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;44&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;45&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parallel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// parallel&lt;/span&gt;
                          &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// delegated to Iterable&lt;/span&gt;
                          &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                              &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                          &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

      </description>
      <pubDate>Tue, 18 Feb 2014 16:39:48 +0100</pubDate>
      <link>http://www.nkode.io//2014/02/18/parallels-dart.html</link>
      <guid isPermaLink="true">http://www.nkode.io//2014/02/18/parallels-dart.html</guid>
    </item>
    
    <item>
      <title>Rebuild of a flash game using JavaScript</title>
      <description>
        
        &lt;img src=&quot;/img/posts/bomberman.jpg&quot;&gt;
        
        &lt;p&gt;The technical capabilities of JavaScript are often underestimated. The aim of this thesis is to demonstrate
technical capabilities of JavaScript by implementing a variation of a well known game series called &lt;a href=&quot;https://en.wikipedia.org/wiki/Bomberman&quot;&gt;Bomberman&lt;/a&gt; for
demonstration purposes.&lt;/p&gt;

&lt;p&gt;The general goal throughout the series of bomberman games is to complete several levels by strategically placing bombs in order to kill enemies
and destroy obstacles. Exploding bombs can set off other bombs, kill or injure enemies, and destroy obstacles. However, they can also kill or injure the player character, destroy powerups, and sometimes &amp;quot;anger&amp;quot; the exit, causing it to generate more enemies.&lt;/p&gt;

&lt;p&gt;The to be developed game&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;should modify the above mentioned game concept (for example by flushing enemies and obstacles using water balloons),&lt;/li&gt;
&lt;li&gt;should be purely developed in JavaScript,&lt;/li&gt;
&lt;li&gt;should not need a server,&lt;/li&gt;
&lt;li&gt;should be executable in the latest versions of actual web browsers (Chrome, Firefox, Safari, Internet Explorer)&lt;/li&gt;
&lt;li&gt;should provide several game levels which can be defined (and extended) by a descriptive data format (JSON, XML, etc.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In detail the following tasks have to be performed:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Analyse &amp;quot;Bomberman&amp;quot; to derive an interesting and implementable game concept&lt;/li&gt;
&lt;li&gt;Refine game concept into guiding software requirements&lt;/li&gt;
&lt;li&gt;Develop a suitable MVC-based software architecture&lt;/li&gt;
&lt;li&gt;Define a suitable software test strategy&lt;/li&gt;
&lt;li&gt;Design necessary conceptual models like explosion propagation/water flushing/movements models, battlefield models, user interaction models, etc.&lt;/li&gt;
&lt;li&gt;Define game level describing data formats&lt;/li&gt;
&lt;li&gt;Theme an attractive and functional user interface according to designed user interaction models&lt;/li&gt;
&lt;li&gt;Implement a realizing game engine&lt;/li&gt;
&lt;li&gt;Test and evaluate the game according to the developed software test strategy&lt;/li&gt;
&lt;li&gt;Document the above mentioned steps, design decisions and results (thesis document)&lt;/li&gt;
&lt;/ul&gt;

      </description>
      <pubDate>Mon, 17 Feb 2014 00:00:00 +0100</pubDate>
      <link>http://www.nkode.io//thesis/2014/02/17/thesis-bomberman.html</link>
      <guid isPermaLink="true">http://www.nkode.io//thesis/2014/02/17/thesis-bomberman.html</guid>
    </item>
    
    <item>
      <title>Tour de Dart (Part I)</title>
      <description>
        
        &lt;img src=&quot;/img/posts/dart-tour.png&quot;&gt;
        
        &lt;p&gt;This (german) presentation provides a comprehensive survey of the programming language &lt;a href=&quot;https://www.dartlang.org/&quot;&gt;Dart&lt;/a&gt; and its core concepts.
&lt;a href=&quot;https://www.dartlang.org/&quot;&gt;Dart&lt;/a&gt; is a web programming language mainly developed by Google with the intention to provide an alternative to JavaScript (the actual de facto standard in web client side programming).
To get the most out of the survey you should be familiar with at least one programming language and the concepts of object oriented programming.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;iframe src=&quot;http://www.slideshare.net/slideshow/embed_code/30352398&quot;
        width=&quot;600px&quot;
        height=&quot;462px&quot;
        frameborder=&quot;0&quot;
        marginwidth=&quot;0&quot;
        marginheight=&quot;0&quot;
        scrolling=&quot;no&quot;
        style=&quot;border: 1px solid rgba(0, 0, 0, 0.5); max-width: 100%;&quot;&gt;&lt;/iframe&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Part I&lt;/strong&gt; focuses the language &lt;a href=&quot;https://www.dartlang.org/&quot;&gt;Dart&lt;/a&gt; itself and has a look at
&lt;em&gt;the optional type system, data types, functions, operators, object oriented concepts, and generics&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Upcoming Part II&lt;/strong&gt; will concentrate on further aspects of &lt;a href=&quot;https://www.dartlang.org/&quot;&gt;Dart&lt;/a&gt; like the
&lt;em&gt;library system, asynchronous programming, I/O programming, manipulating the DOM tree, server/client side web programming,
conversion of data formats (often used in the web domain)&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So stay tuned.&lt;/strong&gt;&lt;/p&gt;

      </description>
      <pubDate>Thu, 13 Feb 2014 09:39:48 +0100</pubDate>
      <link>http://www.nkode.io//2014/02/13/dart-part-I.html</link>
      <guid isPermaLink="true">http://www.nkode.io//2014/02/13/dart-part-I.html</guid>
    </item>
    
    <item>
      <title>Evaluierung von Cross Mobile Frameworks</title>
      <description>
        
        &lt;img src=&quot;/img/posts/mobile-phones.jpg&quot;&gt;
        
        &lt;p&gt;Durch die stetig steigende Bedeutung von Smartphones und Tablets
für Unternehmen und private Anwendungen stehen App-Entwickler häufig
vor der Aufgabe Anwendungen für mehrere Zielplattformen (iOS, Android, Symbian, etc.)
ggf. unter Nutzung plattformspezifischer Programmiersprachen entwicklen
zu müssen. Dieser mehrfache Entwicklungsaufwand kostet Zeit und Geld.
Ein Ansatz, um die Entwicklung für diese verschiedenen Plattformen kostengünstiger
und einfacher zu gestalten, sind sogenannte &amp;quot;Cross Mobile&amp;quot; Plattformen.
Das spezifische Entwickeln für mehrere Zielplattformen entfällt,
da der Code zum Großteil plattformunabhängig ist.&lt;/p&gt;

&lt;p&gt;Die meisten Vertreter
dieser Entwicklungsumgebungen erstellen sogenannte &amp;quot;Hybrid Apps&amp;quot;. Diese
nutzen die Funktionalität von HTML5 zur Darstellung und binden plattformspezifische
Schnittstellen, über eine die Ziel-Plattform abstrahierende &amp;quot;Cross Mobile&amp;quot;
Plattform API an.&lt;/p&gt;

&lt;p&gt;In dieser Bachelorarbeit soll es darum gehen, die gängigsten
Entwicklungsumgebungen anhand einer App-Entwicklung zu vergleichen. Die App-Entwicklung
konzentriert sich dabei vor allem auf die Integration von Mobilephone typischer
Sensorik (Ortsbestimmung, Lagebestimmung, Beschleunigung, etc.). Dazu wird
ein und dieselbe App auf mehreren &amp;quot;Cross Mobile&amp;quot; Plattformen und zusätzlich noch für
die jeweilige Mobileplattform nativ entwickelt.&lt;/p&gt;

&lt;p&gt;Die zu betrachtenden Mobile Plattformen sind&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;iOS (in Version 6.1)&lt;/li&gt;
&lt;li&gt;Android (in Version 4.1)&lt;/li&gt;
&lt;li&gt;WindowsPhone (in Version 8).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Die zu evaluierenden &amp;quot;Cross Mobile&amp;quot; Plattformen sind&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MoSync&lt;/li&gt;
&lt;li&gt;Titanium&lt;/li&gt;
&lt;li&gt;PhoneGap&lt;/li&gt;
&lt;li&gt;Corona Labs&lt;/li&gt;
&lt;li&gt;und Sencha.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Die zu entwickelnde App soll&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Positionsbestimmung&lt;/li&gt;
&lt;li&gt;Richtungsbestimmung (Kompass)&lt;/li&gt;
&lt;li&gt;Beschleunigungsbestimmung&lt;/li&gt;
&lt;li&gt;Fotoaufnahmen&lt;/li&gt;
&lt;li&gt;Fotosharing mittels WLAN oder Bluetooth&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ermöglichen.&lt;/p&gt;

&lt;p&gt;Die Evaluation der &amp;quot;Cross Mobile&amp;quot; Frameworks erfolgt anhand der folgenden
Kategorien:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Installationsaufwand&lt;/li&gt;
&lt;li&gt;Kosten der Plattform&lt;/li&gt;
&lt;li&gt;Ansprechbarkeit der oben genannten Sensoren&lt;/li&gt;
&lt;li&gt;Unterstütze Zielplattformen (iOS, Android, WindowsPhone)&lt;/li&gt;
&lt;li&gt;Test- und Simulationsmöglichkeiten (insbesondere der Sensorik)&lt;/li&gt;
&lt;li&gt;Feldtest der Apps auf Testgeräten (alle Apps sollten bspw. dieselben
Sensordaten wie die nativ entwickelte App darstellen)&lt;/li&gt;
&lt;/ul&gt;

      </description>
      <pubDate>Fri, 08 Nov 2013 00:00:00 +0100</pubDate>
      <link>http://www.nkode.io//thesis/2013/11/08/thesis-evaluation-cross-mobile-frameworks.html</link>
      <guid isPermaLink="true">http://www.nkode.io//thesis/2013/11/08/thesis-evaluation-cross-mobile-frameworks.html</guid>
    </item>
    
    <item>
      <title>Systematisches Testen von Mobile Applikationen</title>
      <description>
        
        &lt;img src=&quot;/img/posts/mobile-phones.jpg&quot;&gt;
        
        &lt;p&gt;In allen Bereichen in denen Software ihren Einsatz findet, ist die Qualität
der Software zu einem entscheidenden Faktor für den Erfolg eines Unternehmens
und deren Produkten geworden.&lt;/p&gt;

&lt;p&gt;Um Qualität von Softwaresystemen zu erreichen, wird Software geprüft und getestet.
Hierzu durchläuft Spftware Testphasen. Die zugehörigen Tests sind bekannt als
Komponententest, Integrationstest, Systemtest und Abnahmetest. Innerhalb der
Testphasen gibt es verschiedene Testarten, z.B. Black-Box-Test, White-Box-Test,
funktionaler Test oder Codeüberdeckung.&lt;/p&gt;

&lt;p&gt;Mit zunehmender Anzahl von Smartphones und Tablets steigt heutzutage auch die
Bedeutung mobiler Anwendungen. Bei Softwaretests von zunehmend komplexer
werdenden mobilen Anwendungen kommen zu den Anforderungen der Tests herkömmlicher
Anwendungen weitere Problemfelder hinzu. So gibt es Situationen in denen
sich das Gerät mal mittels WLAN, mal mittels UMTS verbindet. Apps sind ggf.
von Ortungsdiensten abhängig. Ortungsdienste wie GPS oder Gallileo sind aber
nicht immer verfügbar, so dass WLAN-basierte oder funkmastbasierte Ortungsfunktionen
geringerer Güte genutzt werden. Display Auflösungen, Speicher- und Prozessorausstattung
unterscheiden sich zwischen den mobilen Geräteklassen teilweise erheblich.&lt;/p&gt;

&lt;p&gt;Im Rahmen dieser Bachelorarbeit soll daher ein allgemeiner
Überblick über Softwaretestverfahren gegeben werden und anhand einer
geeigneten mobilen Applikation und deren Eignung
für das Android Betriebssystem untersucht werden.&lt;/p&gt;

&lt;p&gt;Hierzu sind verschiedenste Open Source Testframeworks zu recherchieren,
die die Testarten&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Funktionstest&lt;/li&gt;
&lt;li&gt;Kontrollflusstest&lt;/li&gt;
&lt;li&gt;Softwaremessung&lt;/li&gt;
&lt;li&gt;Stil-/Codeanalyse&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;sowie den Testphasen&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Komponententest (Modultest)&lt;/li&gt;
&lt;li&gt;Integrationstest&lt;/li&gt;
&lt;li&gt;Systemtest (Funktionstest, Leistungstest, Stresstest, Regressionstest)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;abdecken.&lt;/p&gt;

&lt;p&gt;Auf Basis dessen erfolgt eine Evaluation der Testframeworks anhand folgender
Kriterien:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Installationskomplexität&lt;/li&gt;
&lt;li&gt;Bekanntheitsgrad&lt;/li&gt;
&lt;li&gt;Komplexität der zu entwickelnden Tests&lt;/li&gt;
&lt;li&gt;Aufwand der Einarbeitung&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So soll die Eignung der jeweiligen Frameworks für Testphasen/Testarten erhoben
und aufbereitet werden.&lt;/p&gt;

      </description>
      <pubDate>Thu, 08 Aug 2013 00:00:00 +0200</pubDate>
      <link>http://www.nkode.io//thesis/2013/08/08/thesis-test-mobile-apps.html</link>
      <guid isPermaLink="true">http://www.nkode.io//thesis/2013/08/08/thesis-test-mobile-apps.html</guid>
    </item>
    
    <item>
      <title>Database-based Web Server Programming (Winter 2012)</title>
      <description>
        
        &lt;img src=&quot;/img/posts/webtech.jpg&quot;&gt;
        
        &lt;p&gt;The lecture is about common technologies used to build (part) of web information systems. Lecture is held for students
at Lübeck University of Applied Sciences (in german language). Lecture covers following aspects:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;IaaS Cloud Computing&lt;/strong&gt; to host (distributed and scalable) web applications&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;descriptional languages&lt;/strong&gt; like &lt;a href=&quot;http://www.w3.org/html/&quot;&gt;HTML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;presentational languages&lt;/strong&gt; like &lt;a href=&quot;http://www.w3.org/Style/CSS/&quot;&gt;CSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Document Object Model&lt;/strong&gt; (DOM) used for example in web browsers&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;client side programming&lt;/strong&gt; with languages like &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Language_Resources&quot;&gt;JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;server side programming&lt;/strong&gt; with languages like &lt;a href=&quot;http://www.php.net/&quot;&gt;PHP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;security aspects&lt;/strong&gt; like &lt;em&gt;HTML/SQL injections&lt;/em&gt; or &lt;em&gt;session hijacking&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Course Material (german only)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Crash course: &lt;a href=&quot;/assets/ss2014/webtech/cloud.pdf&quot;&gt;IaaS Cloud Computing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;HTML Units: &lt;a href=&quot;/assets/ss2014/webtech/html_css.pdf&quot;&gt;HTML and CSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Database Units: &lt;a href=&quot;/assets/ws2012/dbsp/db_1.pdf&quot;&gt;Part 1&lt;/a&gt;, &lt;a href=&quot;/assets/ws2012/dbsp/db_2.pdf&quot;&gt;Part 2&lt;/a&gt;, &lt;a href=&quot;/assets/ws2012/dbsp/db_3.pdf&quot;&gt;Part 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PHP Units: &lt;a href=&quot;/assets/ws2012/dbsp/php_1.pdf&quot;&gt;Part 1&lt;/a&gt;, &lt;a href=&quot;/assets/ws2012/dbsp/php_2.pdf&quot;&gt;Part 2&lt;/a&gt;, &lt;a href=&quot;/assets/ws2012/dbsp/php_4.pdf&quot;&gt;Part 3&lt;/a&gt;, &lt;a href=&quot;/assets/ws2012/dbsp/php_4.pdf&quot;&gt;Part 4&lt;/a&gt;, &lt;a href=&quot;/assets/ws2012/dbsp/php_5.pdf&quot;&gt;Part 5&lt;/a&gt;, &lt;a href=&quot;/assets/ws2012/dbsp/php_6.pdf&quot;&gt;Part 6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;JavaScript Units: &lt;a href=&quot;/assets/ws2012/dbsp/js.pdf&quot;&gt;JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Exercises: &lt;a href=&quot;/assets/ws2012/dbsp/excercises.pdf&quot;&gt;Catalog of Excercises&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;funded&quot;&gt;
&lt;center&gt;
&lt;p&gt;
Course is supported by educational grants from:
&lt;/p&gt;
&lt;a href=&quot;https://aws.amazon.com/&quot;&gt;
  &lt;img src=&quot;/img/posts/amazon-web-services.png&quot; height=&quot;50px&quot;&gt;
&lt;/a&gt;
&lt;/center&gt;
&lt;/div&gt;

      </description>
      <pubDate>Sat, 01 Sep 2012 00:00:00 +0200</pubDate>
      <link>http://www.nkode.io//lecture/2012/09/01/lecture-db-web-programming.html</link>
      <guid isPermaLink="true">http://www.nkode.io//lecture/2012/09/01/lecture-db-web-programming.html</guid>
    </item>
    
  </channel>
</rss>
